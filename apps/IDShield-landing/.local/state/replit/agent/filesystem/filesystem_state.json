{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nIDShield is a privacy-focused identity management system that leverages blockchain technology and Zero-Knowledge proofs to give users complete control over their personal data. The application enables users to store personal information in different privacy levels (0-6) and selectively share verified information with third-party applications without compromising sensitive data. The system features integration with Lace Wallet for blockchain interactions and includes a marketplace for privacy-respecting applications.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom color scheme and dark mode support\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **Form Handling**: React Hook Form with Zod validation\n\n## Backend Architecture\n- **Framework**: Express.js server with TypeScript\n- **API Pattern**: RESTful API design with centralized route handling\n- **Development Setup**: Hot module replacement with Vite integration for development\n- **Error Handling**: Centralized error middleware with proper HTTP status codes\n- **Logging**: Custom request/response logging with performance metrics\n\n## Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Development Storage**: In-memory storage implementation for development/testing\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n\nThe data model includes three main entities:\n- **Users**: Basic user authentication data\n- **Waitlist Entries**: Early access signup information\n- **Contact Submissions**: User contact form data\n\n## Privacy Level System\nThe application implements a 7-level privacy system (0-6):\n- Level 0: Absolute privacy (completely private)\n- Level 1: Ultra confidential (critical verifications only)\n- Level 2: Selective confidential (authorized sharing)\n- Level 6: Third-party ecosystem (marketplace availability)\n\n## Authentication and Authorization\n- **Wallet Integration**: Lace Wallet connectivity for blockchain-based authentication\n- **Session Management**: Express sessions with PostgreSQL session store\n- **Zero-Knowledge Proofs**: Client-side ZK proof generation for data verification\n\n# External Dependencies\n\n## Core Technologies\n- **Database**: Neon Database (serverless PostgreSQL)\n- **Blockchain**: Cardano blockchain integration via Lace Wallet\n- **Session Storage**: PostgreSQL with connect-pg-simple\n\n## UI and Styling\n- **Component Library**: Radix UI primitives for accessible components\n- **Icons**: Lucide React icon library\n- **Fonts**: Google Fonts (Architects Daughter, DM Sans, Fira Code, Geist Mono)\n- **Styling**: Tailwind CSS with PostCSS processing\n\n## Development Tools\n- **Build System**: Vite with React plugin\n- **TypeScript**: Full TypeScript support across frontend and backend\n- **Validation**: Zod for runtime type validation and schema generation\n- **Development Environment**: Replit-specific plugins for development banner and cartographer\n\n## External APIs and Services\n- **Image Assets**: Unsplash for demo images\n- **Development**: Replit development environment integration\n- **Deployment**: Built for production deployment with static file serving\n\nThe application is designed as a full-stack TypeScript application with a focus on privacy, user control, and blockchain integration while maintaining a clean, accessible user interface.","size_bytes":3763},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        navy: \"var(--navy)\",\n        teal: \"var(--teal)\",\n        steel: \"var(--steel)\",\n        ocean: \"var(--ocean)\",\n        emerald: \"var(--emerald)\",\n        amber: \"var(--amber)\",\n        \"slate-bg\": \"var(--slate-bg)\",\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"Open Sans\", \"sans-serif\"],\n        serif: [\"Georgia\", \"serif\"],\n        mono: [\"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2573},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertWaitlistSchema, insertContactSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Waitlist signup endpoint\n  app.post(\"/api/waitlist\", async (req, res) => {\n    try {\n      const validatedData = insertWaitlistSchema.parse(req.body);\n      const entry = await storage.createWaitlistEntry(validatedData);\n      res.json({ success: true, entry });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid input data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create waitlist entry\" });\n      }\n    }\n  });\n\n  // Get waitlist entries (for admin purposes)\n  app.get(\"/api/waitlist\", async (req, res) => {\n    try {\n      const entries = await storage.getWaitlistEntries();\n      res.json(entries);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch waitlist entries\" });\n    }\n  });\n\n  // Contact form submission endpoint\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const validatedData = insertContactSchema.parse(req.body);\n      const submission = await storage.createContactSubmission(validatedData);\n      res.json({ success: true, submission });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid input data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create contact submission\" });\n      }\n    }\n  });\n\n  // Get contact submissions (for admin purposes)\n  app.get(\"/api/contact\", async (req, res) => {\n    try {\n      const submissions = await storage.getContactSubmissions();\n      res.json(submissions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch contact submissions\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":2058},"server/storage.ts":{"content":"import { type User, type InsertUser, type WaitlistEntry, type InsertWaitlistEntry, type ContactSubmission, type InsertContactSubmission } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createWaitlistEntry(entry: InsertWaitlistEntry): Promise<WaitlistEntry>;\n  getWaitlistEntries(): Promise<WaitlistEntry[]>;\n  createContactSubmission(submission: InsertContactSubmission): Promise<ContactSubmission>;\n  getContactSubmissions(): Promise<ContactSubmission[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private waitlistEntries: Map<string, WaitlistEntry>;\n  private contactSubmissions: Map<string, ContactSubmission>;\n\n  constructor() {\n    this.users = new Map();\n    this.waitlistEntries = new Map();\n    this.contactSubmissions = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createWaitlistEntry(insertEntry: InsertWaitlistEntry): Promise<WaitlistEntry> {\n    const id = randomUUID();\n    const entry: WaitlistEntry = { \n      ...insertEntry, \n      id, \n      createdAt: new Date() \n    };\n    this.waitlistEntries.set(id, entry);\n    return entry;\n  }\n\n  async getWaitlistEntries(): Promise<WaitlistEntry[]> {\n    return Array.from(this.waitlistEntries.values());\n  }\n\n  async createContactSubmission(insertSubmission: InsertContactSubmission): Promise<ContactSubmission> {\n    const id = randomUUID();\n    const submission: ContactSubmission = { \n      ...insertSubmission, \n      id, \n      createdAt: new Date() \n    };\n    this.contactSubmissions.set(id, submission);\n    return submission;\n  }\n\n  async getContactSubmissions(): Promise<ContactSubmission[]> {\n    return Array.from(this.contactSubmissions.values());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2358},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const waitlistEntries = pgTable(\"waitlist_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  interest: text(\"interest\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contactSubmissions = pgTable(\"contact_submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertWaitlistSchema = createInsertSchema(waitlistEntries).pick({\n  name: true,\n  email: true,\n  interest: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contactSubmissions).pick({\n  name: true,\n  email: true,\n  message: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertWaitlistEntry = z.infer<typeof insertWaitlistSchema>;\nexport type WaitlistEntry = typeof waitlistEntries.$inferSelect;\nexport type InsertContactSubmission = z.infer<typeof insertContactSchema>;\nexport type ContactSubmission = typeof contactSubmissions.$inferSelect;\n","size_bytes":1733},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { LanguageProvider } from \"@/contexts/LanguageContext\";\nimport Home from \"@/pages/home\";\nimport PrivacyPage from \"@/pages/PrivacyPage\";\nimport TermsPage from \"@/pages/TermsPage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/privacy\" component={PrivacyPage} />\n      <Route path=\"/terms\" component={TermsPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <LanguageProvider>\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </QueryClientProvider>\n    </LanguageProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1019},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Better focus visibility for accessibility */\n.focus\\:ring-2:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n}\n\n/* Skip to content positioning */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n.focus\\:not-sr-only:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  padding: inherit;\n  margin: inherit;\n  overflow: visible;\n  clip: auto;\n  white-space: normal;\n}\n\n:root {\n  --background: hsl(248, 20%, 98%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(248, 20%, 98%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(172, 94%, 23%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(222, 84%, 5%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(248, 7%, 90%);\n  --muted-foreground: hsl(222, 20%, 40%);\n  --accent: hsl(248, 20%, 92%);\n  --accent-foreground: hsl(172, 94%, 23%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(172, 94%, 23%);\n  --chart-1: hsl(172, 94%, 23%);\n  --chart-2: hsl(160, 100%, 36%);\n  --chart-3: hsl(43, 96%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --navy: hsl(215, 28%, 17%);\n  --teal: hsl(172, 94%, 23%);\n  --steel: hsl(215, 20%, 40%);\n  --ocean: hsl(201, 96%, 53%);\n  --emerald: hsl(159, 81%, 58%);\n  --amber: hsl(43, 96%, 56%);\n  --slate-bg: hsl(248, 20%, 98%);\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(248, 20%, 92%);\n  --card: hsl(222, 84%, 5%);\n  --card-foreground: hsl(248, 20%, 92%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(248, 20%, 92%);\n  --primary: hsl(172, 94%, 23%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(248, 20%, 92%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(222, 20%, 15%);\n  --muted-foreground: hsl(215, 20%, 40%);\n  --accent: hsl(222, 20%, 15%);\n  --accent-foreground: hsl(172, 94%, 23%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(222, 20%, 15%);\n  --input: hsl(222, 20%, 15%);\n  --ring: hsl(172, 94%, 23%);\n  --navy: hsl(215, 28%, 17%);\n  --teal: hsl(172, 94%, 23%);\n  --steel: hsl(215, 20%, 40%);\n  --ocean: hsl(201, 96%, 53%);\n  --emerald: hsl(159, 81%, 58%);\n  --amber: hsl(43, 96%, 56%);\n  --slate-bg: hsl(222, 84%, 5%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: 'Inter', 'Open Sans', sans-serif;\n    scroll-behavior: smooth;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n\n  /* Ensure minimum touch target size on mobile */\n  @media (max-width: 768px) {\n    button, a, input, select {\n      min-height: 44px;\n    }\n  }\n\n  /* Improve text readability */\n  @media (max-width: 360px) {\n    .text-4xl {\n      font-size: 2rem;\n      line-height: 2.25rem;\n    }\n    \n    .text-6xl {\n      font-size: 2.5rem;\n      line-height: 2.75rem;\n    }\n  }\n\n  /* Custom scrollbar styling for privacy levels */\n  .overflow-x-auto {\n    scrollbar-width: thin;\n    scrollbar-color: hsl(172, 94%, 23%) hsl(222, 20%, 15%);\n  }\n\n  .overflow-x-auto::-webkit-scrollbar {\n    height: 6px;\n  }\n\n  .overflow-x-auto::-webkit-scrollbar-track {\n    background: hsl(222, 20%, 15%);\n    border-radius: 3px;\n  }\n\n  .overflow-x-auto::-webkit-scrollbar-thumb {\n    background: hsl(172, 94%, 23%);\n    border-radius: 3px;\n  }\n\n  .overflow-x-auto::-webkit-scrollbar-thumb:hover {\n    background: hsl(172, 94%, 20%);\n  }\n\n  /* Smooth scrolling for privacy levels */\n  .overflow-x-auto {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer utilities {\n  .text-navy {\n    color: var(--navy);\n  }\n  \n  .text-teal {\n    color: var(--teal);\n  }\n  \n  .text-steel {\n    color: var(--steel);\n  }\n  \n  .text-ocean {\n    color: var(--ocean);\n  }\n  \n  .text-emerald {\n    color: var(--emerald);\n  }\n  \n  .text-amber {\n    color: var(--amber);\n  }\n  \n  .bg-navy {\n    background-color: var(--navy);\n  }\n  \n  .bg-teal {\n    background-color: var(--teal);\n  }\n  \n  .bg-steel {\n    background-color: var(--steel);\n  }\n  \n  .bg-ocean {\n    background-color: var(--ocean);\n  }\n  \n  .bg-emerald {\n    background-color: var(--emerald);\n  }\n  \n  .bg-amber {\n    background-color: var(--amber);\n  }\n  \n  .bg-slate-bg {\n    background-color: var(--slate-bg);\n  }\n  \n  .border-teal {\n    border-color: var(--teal);\n  }\n  \n  .border-emerald {\n    border-color: var(--emerald);\n  }\n  \n  .border-ocean {\n    border-color: var(--ocean);\n  }\n  \n  .hover\\:bg-teal\\/10:hover {\n    background-color: hsl(172 94% 23% / 0.1);\n  }\n  \n  .hover\\:bg-teal\\/90:hover {\n    background-color: hsl(172 94% 23% / 0.9);\n  }\n  \n  .hover\\:bg-emerald\\/10:hover {\n    background-color: hsl(159 81% 58% / 0.1);\n  }\n  \n  .hover\\:bg-emerald\\/20:hover {\n    background-color: hsl(159 81% 58% / 0.2);\n  }\n  \n  .hover\\:bg-emerald\\/90:hover {\n    background-color: hsl(159 81% 58% / 0.9);\n  }\n  \n  .hover\\:bg-ocean\\/10:hover {\n    background-color: hsl(201 96% 53% / 0.1);\n  }\n  \n  .hover\\:bg-ocean\\/20:hover {\n    background-color: hsl(201 96% 53% / 0.2);\n  }\n  \n  .hover\\:bg-navy\\/90:hover {\n    background-color: hsl(215 28% 17% / 0.9);\n  }\n  \n  .bg-teal\\/10 {\n    background-color: hsl(172 94% 23% / 0.1);\n  }\n  \n  .bg-emerald\\/10 {\n    background-color: hsl(159 81% 58% / 0.1);\n  }\n  \n  .bg-emerald\\/5 {\n    background-color: hsl(159 81% 58% / 0.05);\n  }\n  \n  .bg-ocean\\/10 {\n    background-color: hsl(201 96% 53% / 0.1);\n  }\n  \n  .bg-amber\\/10 {\n    background-color: hsl(43 96% 56% / 0.1);\n  }\n  \n  .text-emerald-700 {\n    color: hsl(159 81% 35%);\n  }\n  \n  .text-amber-700 {\n    color: hsl(43 96% 35%);\n  }\n  \n  .border-emerald\\/20 {\n    border-color: hsl(159 81% 58% / 0.2);\n  }\n  \n  .border-emerald\\/5 {\n    border-color: hsl(159 81% 58% / 0.05);\n  }\n}\n","size_bytes":6306},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ACESection.tsx":{"content":"// ACESection.tsx – sección \"Framework ACE\" con cobertura de hackathon\nimport { Check, Info, Shield, Users, Handshake, MessageSquare } from \"lucide-react\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\nexport default function ACESection() {\n  const { t } = useLanguage();\n  return (\n    <section id=\"ace\" aria-labelledby=\"ace-title\" className=\"relative py-20 bg-slate-900\">\n      <div className=\"mx-auto max-w-6xl px-6\">\n        <div className=\"text-center max-w-3xl mx-auto\">\n          <h2 id=\"ace-title\" className=\"text-3xl md:text-4xl font-bold tracking-tight text-white\">\n            {t('ace.title')} <span className=\"text-teal\">{t('ace.title.highlight')}</span> {t('ace.title.end')}\n          </h2>\n          <p className=\"mt-3 text-slate-300\">\n            {t('ace.subtitle')} <b>{t('ace.subtitle.challenge')}</b> {t('ace.subtitle.hackathon')}{\" \"}\n            <b>Association</b>, <b>Commerce</b> y <b>Expression</b> {t('ace.subtitle.components')}\n          </p>\n        </div>\n\n        {/* Cards */}\n        <div className=\"mt-12 grid gap-6 sm:grid-cols-3\">\n          {/* Association */}\n          <div className=\"group rounded-2xl border border-slate-700 bg-slate-800 p-6 shadow-sm hover:shadow-md transition\">\n            <div className=\"flex items-center gap-3\">\n              <span className=\"inline-flex h-10 w-10 items-center justify-center rounded-xl bg-emerald-500/20 text-emerald-400\">\n                <Users className=\"h-5 w-5\" aria-hidden=\"true\" />\n              </span>\n              <h3 className=\"text-lg font-semibold text-white\">{t('ace.association.title')}</h3>\n            </div>\n            <p className=\"mt-3 text-sm text-slate-300\">\n              {t('ace.association.description')}\n            </p>\n            <div className=\"mt-4 flex items-center gap-2 text-xs text-slate-400\">\n              <Info className=\"h-4 w-4\" aria-hidden=\"true\" />\n              <span>{t('ace.association.example')}</span>\n            </div>\n          </div>\n\n          {/* Commerce */}\n          <div className=\"group rounded-2xl border border-slate-700 bg-slate-800 p-6 shadow-sm hover:shadow-md transition\">\n            <div className=\"flex items-center gap-3\">\n              <span className=\"inline-flex h-10 w-10 items-center justify-center rounded-xl bg-teal-500/20 text-teal-400\">\n                <Handshake className=\"h-5 w-5\" aria-hidden=\"true\" />\n              </span>\n              <h3 className=\"text-lg font-semibold text-white\">{t('ace.commerce.title')}</h3>\n            </div>\n            <p className=\"mt-3 text-sm text-slate-300\">\n              {t('ace.commerce.description')} <b>{t('ace.commerce.description.highlight')}</b> {t('ace.commerce.description.end')}\n            </p>\n            <div className=\"mt-4 flex items-center gap-2 text-xs text-slate-400\">\n              <Info className=\"h-4 w-4\" aria-hidden=\"true\" />\n              <span>{t('ace.commerce.example')}</span>\n            </div>\n          </div>\n\n          {/* Expression */}\n          <div className=\"group rounded-2xl border border-slate-700 bg-slate-800 p-6 shadow-sm hover:shadow-md transition\">\n            <div className=\"flex items-center gap-3\">\n              <span className=\"inline-flex h-10 w-10 items-center justify-center rounded-xl bg-sky-500/20 text-sky-400\">\n                <MessageSquare className=\"h-5 w-5\" aria-hidden=\"true\" />\n              </span>\n              <h3 className=\"text-lg font-semibold text-white\">{t('ace.expression.title')}</h3>\n            </div>\n            <p className=\"mt-3 text-sm text-slate-300\">\n              {t('ace.expression.description')}\n            </p>\n            <div className=\"mt-4 flex items-center gap-2 text-xs text-slate-400\">\n              <Info className=\"h-4 w-4\" aria-hidden=\"true\" />\n              <span>{t('ace.expression.example')}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Coverage strip (explicit hackathon compliance) */}\n        <div className=\"mt-10 rounded-2xl border border-teal/30 bg-teal/10 p-5\">\n          <div className=\"flex items-start gap-3\">\n            <Shield className=\"h-6 w-6 text-teal\" aria-hidden=\"true\" />\n            <div>\n              <p className=\"font-semibold text-white\">{t('ace.coverage.title')}</p>\n              <p className=\"mt-1 text-sm text-slate-200\">\n                {t('ace.coverage.description')} <b>{t('ace.coverage.tracks')}</b> y usamos <b>{t('ace.coverage.components')}</b>{t('ace.coverage.description.end')}\n              </p>\n              <ul className=\"mt-3 grid gap-2 sm:grid-cols-2\">\n                <li className=\"flex items-start gap-2 text-sm text-slate-200\">\n                  <Check className=\"mt-0.5 h-4 w-4 text-emerald-600\" />\n                  <span><b>{t('ace.zk.verification')}</b> {t('ace.zk.description')}</span>\n                </li>\n                <li className=\"flex items-start gap-2 text-sm text-slate-200\">\n                  <Check className=\"mt-0.5 h-4 w-4 text-emerald-600\" />\n                  <span><b>{t('ace.secure.sharing')}</b> {t('ace.secure.description')}</span>\n                </li>\n                <li className=\"flex items-start gap-2 text-sm text-slate-200\">\n                  <Check className=\"mt-0.5 h-4 w-4 text-emerald-600\" />\n                  <span><b>{t('ace.openzeppelin.integration')}</b> {t('ace.openzeppelin.description')}</span>\n                </li>\n                <li className=\"flex items-start gap-2 text-sm text-slate-200\">\n                  <Check className=\"mt-0.5 h-4 w-4 text-emerald-600\" />\n                  <span><b>{t('ace.developer.tooling')}</b> {t('ace.developer.description')}</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        {/* CTA */}\n        <div className=\"mt-10 flex flex-col items-center gap-3\">\n          <a href=\"#demo\" className=\"inline-flex items-center gap-2 rounded-2xl bg-teal px-5 py-3 text-white font-semibold hover:bg-teal/90 transition-colors\">\n            {t('ace.cta.demo')}\n          </a>\n          <p className=\"text-xs text-slate-300\">{t('ace.demo.description')}</p>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":6117},"client/src/components/AccessRequestsSection.tsx":{"content":"import { Clock, CheckCircle, XCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function AccessRequestsSection() {\n  const pendingRequests = [\n    {\n      app: \"HealthApp\",\n      description: \"Solicita acceso a edad y género para personalización\",\n      status: \"pending\"\n    }\n  ];\n\n  const approvedRequests = [\n    {\n      app: \"AutoSecure\",\n      description: \"Acceso a historial de conducción - Nivel 3\",\n      status: \"approved\"\n    }\n  ];\n\n  const revokedRequests = [\n    {\n      app: \"DataMining Corp\",\n      description: \"Acceso revocado por uso indebido\",\n      status: \"revoked\"\n    }\n  ];\n\n  return (\n    <section className=\"py-20 bg-slate-bg\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-navy mb-4\" data-testid=\"section-title-access-requests\">\n            Solicitudes de Acceso\n          </h2>\n          <p className=\"text-xl text-steel max-w-3xl mx-auto\" data-testid=\"section-description-access-requests\">\n            Mantén el control total sobre quién accede a tu información y para qué propósito\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Pending Requests */}\n          <div className=\"bg-white rounded-xl p-6 shadow-lg\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-semibold text-navy\" data-testid=\"pending-requests-title\">\n                Pendientes\n              </h3>\n              <span className=\"px-3 py-1 bg-amber/10 text-amber-700 rounded-full text-sm\" data-testid=\"pending-count\">\n                3 nuevas\n              </span>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {pendingRequests.map((request, index) => (\n                <div key={index} className=\"p-4 border border-slate-200 rounded-lg\" data-testid={`pending-request-${index}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"font-medium text-navy\" data-testid={`pending-app-${index}`}>\n                      {request.app}\n                    </span>\n                    <span className=\"text-xs text-amber-600\" data-testid={`pending-status-${index}`}>\n                      Pendiente\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-steel mb-3\" data-testid={`pending-description-${index}`}>\n                    {request.description}\n                  </p>\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      size=\"sm\"\n                      className=\"flex-1 bg-emerald text-white hover:bg-emerald/90\"\n                      data-testid={`approve-button-${index}`}\n                    >\n                      Aprobar\n                    </Button>\n                    <Button \n                      size=\"sm\"\n                      variant=\"destructive\"\n                      className=\"flex-1\"\n                      data-testid={`reject-button-${index}`}\n                    >\n                      Rechazar\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Approved Requests */}\n          <div className=\"bg-white rounded-xl p-6 shadow-lg\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-semibold text-navy\" data-testid=\"approved-requests-title\">\n                Aprobadas\n              </h3>\n              <span className=\"px-3 py-1 bg-emerald/10 text-emerald-700 rounded-full text-sm\" data-testid=\"approved-count\">\n                12 activas\n              </span>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {approvedRequests.map((request, index) => (\n                <div key={index} className=\"p-4 border border-emerald/20 bg-emerald/5 rounded-lg\" data-testid={`approved-request-${index}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"font-medium text-navy\" data-testid={`approved-app-${index}`}>\n                      {request.app}\n                    </span>\n                    <span className=\"text-xs text-emerald-600\" data-testid={`approved-status-${index}`}>\n                      Activa\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-steel mb-3\" data-testid={`approved-description-${index}`}>\n                    {request.description}\n                  </p>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    className=\"text-emerald hover:text-emerald/80 p-0\"\n                    data-testid={`view-details-button-${index}`}\n                  >\n                    Ver detalles\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Revoked Requests */}\n          <div className=\"bg-white rounded-xl p-6 shadow-lg\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-semibold text-navy\" data-testid=\"revoked-requests-title\">\n                Revocadas\n              </h3>\n              <span className=\"px-3 py-1 bg-red-100 text-red-700 rounded-full text-sm\" data-testid=\"revoked-count\">\n                2 recientes\n              </span>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {revokedRequests.map((request, index) => (\n                <div key={index} className=\"p-4 border border-red-200 bg-red-50 rounded-lg\" data-testid={`revoked-request-${index}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"font-medium text-navy\" data-testid={`revoked-app-${index}`}>\n                      {request.app}\n                    </span>\n                    <span className=\"text-xs text-red-600\" data-testid={`revoked-status-${index}`}>\n                      Revocada\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-steel mb-3\" data-testid={`revoked-description-${index}`}>\n                    {request.description}\n                  </p>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    className=\"text-red-600 hover:text-red-700 p-0\"\n                    data-testid={`view-reason-button-${index}`}\n                  >\n                    Ver razón\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6833},"client/src/components/ContactSection.tsx":{"content":"import { useState } from \"react\";\nimport { CheckCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\nexport default function ContactSection() {\n  const { t } = useLanguage();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    interest: \"\"\n  });\n  const [emailError, setEmailError] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const waitlistMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const response = await apiRequest(\"POST\", \"/api/waitlist\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: t('waitlist.success'),\n        description: t('waitlist.success'),\n      });\n      setFormData({ name: \"\", email: \"\", interest: \"\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/waitlist\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: t('waitlist.error'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const validateEmail = (email: string) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const email = e.target.value;\n    setFormData(prev => ({ ...prev, email }));\n    \n    if (email && !validateEmail(email)) {\n      setEmailError(\"Please enter a valid email address\");\n    } else {\n      setEmailError(\"\");\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate required fields\n    if (!formData.name.trim() || !formData.email.trim() || !formData.interest) {\n      toast({\n        title: \"Required fields\",\n        description: \"Please complete all form fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate email format\n    if (!validateEmail(formData.email)) {\n      toast({\n        title: \"Invalid email\",\n        description: \"Please enter a valid email address.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    waitlistMutation.mutate(formData);\n  };\n\n  const benefits = [\n    t('contact.benefits.1'),\n    t('contact.benefits.2'),\n    t('contact.benefits.3'),\n    t('contact.benefits.4')\n  ];\n\n  return (\n    <section id=\"contact\" className=\"py-20 bg-navy\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold text-white mb-4\" data-testid=\"section-title-contact\">\n            {t('contact.title')}\n          </h2>\n          <p className=\"text-xl text-slate-300 max-w-2xl mx-auto\" data-testid=\"section-description-contact\">\n            {t('contact.subtitle')}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"text-white\">\n            <div className=\"space-y-6\">\n              {benefits.map((benefit, index) => (\n                <div key={index} className=\"flex items-center space-x-4\" data-testid={`benefit-${index}`}>\n                  <CheckCircle className=\"h-6 w-6 text-emerald flex-shrink-0\" />\n                  <span className=\"text-lg\">{benefit}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"bg-slate-800 rounded-2xl p-8\">\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-slate-300 mb-2\" data-testid=\"label-name\">\n                  {t('contact.form.name')}\n                </label>\n                <Input \n                  type=\"text\"\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder={t('contact.form.name')}\n                  className=\"w-full min-h-[44px] focus:outline-none focus:ring-2 focus:ring-teal focus:ring-offset-2\"\n                  required\n                  aria-describedby=\"name-error\"\n                  data-testid=\"input-name\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-300 mb-2\" data-testid=\"label-email\">\n                  {t('contact.form.email')}\n                </label>\n                <Input \n                  type=\"email\"\n                  value={formData.email}\n                  onChange={handleEmailChange}\n                  placeholder=\"tu@email.com\"\n                  className={`w-full min-h-[44px] focus:outline-none focus:ring-2 focus:ring-teal focus:ring-offset-2 ${\n                    emailError ? \"border-red-500\" : \"\"\n                  }`}\n                  required\n                  aria-describedby=\"email-error\"\n                  data-testid=\"input-email\"\n                />\n                {emailError && (\n                  <p id=\"email-error\" className=\"text-red-600 text-sm mt-1\" data-testid=\"email-error\">\n                    {emailError}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-300 mb-2\" data-testid=\"label-interest\">\n                  {t('contact.form.message')}\n                </label>\n                <Select value={formData.interest} onValueChange={(value) => setFormData(prev => ({ ...prev, interest: value }))}>\n                  <SelectTrigger className=\"w-full min-h-[44px] focus:outline-none focus:ring-2 focus:ring-teal focus:ring-offset-2\" data-testid=\"select-interest\">\n                    <SelectValue placeholder={t('contact.form.interest.placeholder')} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"personal\">{t('contact.form.interest.personal')}</SelectItem>\n                    <SelectItem value=\"development\">{t('contact.form.interest.development')}</SelectItem>\n                    <SelectItem value=\"enterprise\">{t('contact.form.interest.enterprise')}</SelectItem>\n                    <SelectItem value=\"research\">{t('contact.form.interest.research')}</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button \n                type=\"submit\"\n                disabled={waitlistMutation.isPending || !!emailError}\n                className=\"w-full bg-teal text-white py-3 rounded-lg font-semibold hover:bg-teal/90 transition-colors min-h-[48px] focus:outline-none focus:ring-2 focus:ring-teal focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n                data-testid=\"button-submit-waitlist\"\n              >\n                {waitlistMutation.isPending ? t('contact.form.loading') : t('contact.form.submit')}\n              </Button>\n\n              <p className=\"text-xs text-slate-400 text-center\" data-testid=\"privacy-notice\">\n                {t('contact.form.privacy')}\n              </p>\n            </form>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7434},"client/src/components/Footer.tsx":{"content":"import { Github, Twitter, MessageCircle, Send } from \"lucide-react\";\nimport logoImage from \"@assets/horizontal_1755999944515.png\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { X } from \"lucide-react\";\n\nexport default function Footer() {\n  const { t } = useLanguage();\n  const [showComingSoon, setShowComingSoon] = useState(false);\n  \n  const productLinks = [\n    { name: t('footer.features'), href: \"#\", action: \"contact\" },\n    { name: t('footer.security'), href: \"#\", action: \"contact\" },\n    { name: t('footer.integration'), href: \"#\", action: \"coming-soon\" },\n    { name: t('footer.api'), href: \"#\", action: \"coming-soon\" }\n  ];\n\n  const supportLinks = [\n    { name: t('footer.documentation'), href: \"https://docs.idshield.cc/\", action: \"external\" },\n    { name: t('footer.help'), href: \"https://docs.idshield.cc/\", action: \"external\" },\n    { name: t('footer.contact'), href: \"#contact\", action: \"scroll\" },\n    { name: t('footer.status'), href: \"#\", action: \"contact\" }\n  ];\n\n  const socialLinks = [\n    { icon: Github, href: \"https://github.com/idarkstudio/idshield\", label: \"GitHub\" },\n    { icon: Twitter, href: \"#\", label: \"Twitter\" },\n    { icon: MessageCircle, href: \"#\", label: \"Discord\" },\n    { icon: Send, href: \"#\", label: \"Telegram\" }\n  ];\n\n  const legalLinks = [\n    { name: t('footer.privacy'), href: \"/privacy\", action: \"navigate\" },\n    { name: t('footer.terms'), href: \"/terms\", action: \"navigate\" }\n  ];\n\n  const handleLinkClick = (e: React.MouseEvent, link: any) => {\n    e.preventDefault();\n    if (link.action === \"coming-soon\") {\n      setShowComingSoon(true);\n    } else if (link.action === \"scroll\") {\n      const element = document.querySelector(link.href);\n      if (element) {\n        element.scrollIntoView({ behavior: \"smooth\" });\n      }\n    } else if (link.action === \"navigate\") {\n      window.location.href = link.href;\n    } else if (link.action === \"external\") {\n      window.open(link.href, '_blank', 'noopener,noreferrer');\n    } else if (link.action === \"contact\") {\n      const element = document.querySelector(\"#contact\");\n      if (element) {\n        element.scrollIntoView({ behavior: \"smooth\" });\n      }\n    }\n  };\n\n  return (\n    <footer className=\"bg-slate-900 text-slate-300 py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"md:col-span-2\">\n            <div className=\"flex items-center space-x-2 mb-6\">\n              <img \n                src={logoImage} \n                alt=\"IDSHIELD LANDING Logo\" \n                className=\"h-12 w-auto\" \n                data-testid=\"footer-logo\" \n              />\n            </div>\n            <p className=\"text-slate-400 mb-6 max-w-md\" data-testid=\"footer-description\">\n              {t('footer.description')}\n            </p>\n            <div className=\"flex space-x-4\">\n              {socialLinks.map((social, index) => {\n                const IconComponent = social.icon;\n                return (\n                  <a \n                    key={index}\n                    href={social.href}\n                    className=\"text-slate-400 hover:text-teal transition-colors\"\n                    aria-label={social.label}\n                    data-testid={`social-link-${social.label.toLowerCase()}`}\n                  >\n                    <IconComponent className=\"h-5 w-5\" />\n                  </a>\n                );\n              })}\n            </div>\n          </div>\n\n          <div>\n            <h4 className=\"text-white font-semibold mb-4\" data-testid=\"footer-product-title\">\n              {t('footer.product')}\n            </h4>\n            <ul className=\"space-y-2\">\n              {productLinks.map((link, index) => (\n                <li key={index}>\n                  <button \n                    onClick={(e) => handleLinkClick(e, link)}\n                    className=\"hover:text-teal transition-colors text-left\"\n                    data-testid={`product-link-${index}`}\n                  >\n                    {link.name}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"text-white font-semibold mb-4\" data-testid=\"footer-support-title\">\n              {t('footer.support')}\n            </h4>\n            <ul className=\"space-y-2\">\n              {supportLinks.map((link, index) => (\n                <li key={index}>\n                  <button \n                    onClick={(e) => handleLinkClick(e, link)}\n                    className=\"hover:text-teal transition-colors text-left\"\n                    data-testid={`support-link-${index}`}\n                  >\n                    {link.name}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-slate-800 mt-12 pt-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"text-center md:text-left\">\n              <p className=\"text-slate-400 text-sm\" data-testid=\"footer-copyright\">\n                {t('footer.copyright')} <a href=\"https://insidedarkstudio.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-teal hover:text-teal/80 transition-colors\" data-testid=\"inside-dark-studio-link\">Inside Dark Studio</a>{t('footer.rights')}\n              </p>\n              <p className=\"text-slate-500 text-xs mt-1\" data-testid=\"footer-hackathon\">\n                {t('footer.hackathon')}\n              </p>\n            </div>\n            <div className=\"flex space-x-6 mt-4 md:mt-0\">\n              {legalLinks.map((link, index) => (\n                <button \n                  key={index}\n                  onClick={(e) => handleLinkClick(e, link)}\n                  className=\"text-slate-400 hover:text-teal transition-colors text-sm\"\n                  data-testid={`legal-link-${index}`}\n                >\n                  {link.name}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Coming Soon Modal */}\n      {showComingSoon && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\" onClick={() => setShowComingSoon(false)}>\n          <div className=\"bg-slate-800 rounded-xl p-8 max-w-md mx-4 border border-slate-700\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"flex justify-between items-start mb-4\">\n              <h3 className=\"text-xl font-bold text-white\">{t('footer.coming.soon')}</h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowComingSoon(false)}\n                className=\"text-slate-400 hover:text-white p-1\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            <p className=\"text-slate-300 mb-6\">\n              {t('footer.coming.soon') === 'Coming Soon' \n                ? 'This feature is coming soon. Stay tuned for updates!' \n                : 'Esta característica estará disponible próximamente. ¡Manténte atento a las actualizaciones!'}\n            </p>\n            <Button \n              onClick={() => setShowComingSoon(false)}\n              className=\"w-full bg-emerald-500 hover:bg-emerald-600 text-white\"\n            >\n              {t('footer.coming.soon') === 'Coming Soon' ? 'Close' : 'Cerrar'}\n            </Button>\n          </div>\n        </div>\n      )}\n    </footer>\n  );\n}\n","size_bytes":7618},"client/src/components/HeroSection.tsx":{"content":"import React, { useState } from \"react\";\nimport MatrixTunnel from \"./MatrixTunnel\";\nimport WaitlistModal from \"./WaitlistModal\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport logoImage from \"@assets/logo+nombre_1756000028088.png\";\n\nexport default function HeroSection() {\n  const [isWaitlistModalOpen, setIsWaitlistModalOpen] = useState(false);\n  const { t } = useLanguage();\n\n  return (\n    <section\n      id=\"hero\"\n      className=\"relative min-h-screen flex items-center overflow-hidden\"\n      style={{\n        background: \"linear-gradient(180deg, #0b1220 0%, #0e1528 100%)\",\n      }}\n    >\n      <MatrixTunnel />\n      <div className=\"absolute inset-0 bg-slate-900/70\" style={{ zIndex: 2 }} />\n      <div className=\"relative mx-auto w-full max-w-7xl px-6 grid grid-cols-1 md:grid-cols-2 gap-10 items-center\" style={{ zIndex: 3 }}>\n        {/* Left */}\n        <div className=\"max-w-xl\">\n          <span className=\"inline-flex items-center gap-2 px-3 py-1 text-xs font-semibold rounded-full bg-emerald-500/15 text-white ring-1 ring-emerald-400/30\">\n            {t('hero.hackathon.participating')} <strong><a href=\"https://lu.ma/4uq8yejo?tk=zxwwek\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"hover:underline\">{t('hero.hackathon.link')}</a></strong>\n          </span>\n          <h1 className=\"mt-4 text-4xl md:text-5xl font-extrabold leading-tight text-white\">\n            {t('hero.title')} <span className=\"text-emerald-400\">{t('hero.title.highlight')}</span> {t('hero.title.end')}\n          </h1>\n          <p className=\"mt-4 text-slate-300\">\n            {t('hero.subtitle')}\n          </p>\n\n          <ul className=\"mt-5 space-y-2 text-slate-400 text-sm\">\n            <li>{t('hero.feature.1')}</li>\n            <li>{t('hero.feature.2')}</li>\n          </ul>\n\n          <div className=\"mt-6 flex flex-wrap gap-3\">\n            <a href=\"https://dapp.idshield.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"px-8 py-4 rounded-xl bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700 text-white font-bold text-lg shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200 ring-2 ring-emerald-400/20 hover:ring-emerald-400/40\">\n              {t('hero.cta.demo')}\n            </a>\n            <button \n              onClick={() => setIsWaitlistModalOpen(true)}\n              className=\"px-5 py-3 rounded-xl border border-emerald-400 text-white hover:bg-emerald-400/10 font-semibold transition-colors\"\n              data-testid=\"button-waitlist\"\n            >\n              {t('hero.cta.waitlist')}\n            </button>\n          </div>\n        </div>\n\n        {/* Right */}\n        <div className=\"md:justify-self-end\">\n          <img\n            src={logoImage}\n            alt=\"IDShield - Escudo de privacidad con logo y nombre\"\n            className=\"w-[500px] max-w-full mx-auto block\"\n          />\n        </div>\n      </div>\n      \n      <WaitlistModal \n        isOpen={isWaitlistModalOpen} \n        onClose={() => setIsWaitlistModalOpen(false)} \n      />\n    </section>\n  );\n}","size_bytes":3074},"client/src/components/HowItWorksSection.tsx":{"content":"// HowItWorksMedical.tsx\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\nexport default function HowItWorksSection() {\n  const { t } = useLanguage();\n  return (\n    <section id=\"how\" className=\"py-20 bg-slate-900\">\n      <div className=\"mx-auto max-w-6xl px-6\">\n        {/* Título */}\n        <div className=\"text-center max-w-3xl mx-auto\">\n          <h2 className=\"text-3xl md:text-4xl font-bold tracking-tight text-white\">\n            {t('how.title')}\n          </h2>\n          <p className=\"mt-3 text-slate-300\">\n            {t('how.subtitle')}\n          </p>\n        </div>\n\n        {/* 3 pasos principales */}\n        <div className=\"mt-12 grid gap-8 sm:grid-cols-3\">\n          {/* Paso 1 */}\n          <div className=\"rounded-2xl border border-slate-700 bg-slate-800 p-6 shadow-sm\">\n            <div className=\"h-12 w-12 rounded-full bg-emerald-500 text-white flex items-center justify-center font-bold text-lg mx-auto\">1</div>\n            <h3 className=\"mt-4 text-lg font-semibold text-white\">{t('how.step.1.title')}</h3>\n            <p className=\"mt-2 text-sm text-slate-300\">\n              {t('how.step.1.description')}\n            </p>\n          </div>\n\n          {/* Paso 2 */}\n          <div className=\"rounded-2xl border border-slate-700 bg-slate-800 p-6 shadow-sm\">\n            <div className=\"h-12 w-12 rounded-full bg-emerald-500 text-white flex items-center justify-center font-bold text-lg mx-auto\">2</div>\n            <h3 className=\"mt-4 text-lg font-semibold text-white\">{t('how.step.2.title')}</h3>\n            <p className=\"mt-2 text-sm text-slate-300\">\n              {t('how.step.2.description')}\n            </p>\n          </div>\n\n          {/* Paso 3 */}\n          <div className=\"rounded-2xl border border-slate-700 bg-slate-800 p-6 shadow-sm\">\n            <div className=\"h-12 w-12 rounded-full bg-emerald-500 text-white flex items-center justify-center font-bold text-lg mx-auto\">3</div>\n            <h3 className=\"mt-4 text-lg font-semibold text-white\">{t('how.step.3.title')}</h3>\n            <p className=\"mt-2 text-sm text-slate-300\">\n              {t('how.step.3.description')}\n            </p>\n          </div>\n        </div>\n\n        {/* Ejemplo de uso: Flujo Paciente-Doctor */}\n        <div className=\"mt-16\">\n          <h3 className=\"text-center text-2xl font-bold text-white mb-8\">{t('how.example.title')}</h3>\n          <div className=\"rounded-2xl border border-slate-700 bg-slate-800 p-6 shadow-sm\">\n            <h4 className=\"text-base font-semibold text-white\">{t('how.example.subtitle')}</h4>\n            <div className=\"mt-4 grid gap-6 md:grid-cols-3\">\n              <div>\n                <p className=\"text-sm text-slate-300\">\n                  {t('how.example.request')}\n                </p>\n                <p className=\"mt-1 text-xs text-slate-400\">{t('how.example.request.scope')}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-slate-300\">\n                  {t('how.example.auth')}\n                </p>\n                <p className=\"mt-1 text-xs text-slate-400\">{t('how.example.auth.revoke')}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-slate-300\">\n                  {t('how.example.record')}\n                </p>\n                <p className=\"mt-1 text-xs text-slate-400\">{t('how.example.record.privacy')}</p>\n              </div>\n            </div>\n\n            <div className=\"mt-5 flex flex-wrap gap-3\">\n              <span className=\"inline-flex items-center gap-2 rounded-full bg-emerald-500/20 px-3 py-1 text-xs text-white ring-1 ring-emerald-500/30\">\n{t('how.example.badge.1')}\n              </span>\n              <span className=\"inline-flex items-center gap-2 rounded-full bg-emerald-500/20 px-3 py-1 text-xs text-white ring-1 ring-emerald-500/30\">\n{t('how.example.badge.2')}\n              </span>\n              <span className=\"inline-flex items-center gap-2 rounded-full bg-emerald-500/20 px-3 py-1 text-xs text-white ring-1 ring-emerald-500/30\">\n{t('how.example.badge.3')}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":4140},"client/src/components/MarketplaceSection.tsx":{"content":"import { Smartphone, Car, GraduationCap, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function MarketplaceSection() {\n  const marketplaceApps = [\n    {\n      name: \"HealthCheck Pro\",\n      description: \"Monitoreo de salud que solo accede a métricas básicas\",\n      icon: Smartphone,\n      color: \"teal\",\n      level: \"Nivel 3 requerido\",\n      verified: true\n    },\n    {\n      name: \"AutoSecure\",\n      description: \"Seguro de auto con verificación de historial mínima\",\n      icon: Car,\n      color: \"emerald\",\n      level: \"Nivel 4 requerido\",\n      verified: true\n    },\n    {\n      name: \"EduVerify\",\n      description: \"Verificación de credenciales académicas\",\n      icon: GraduationCap,\n      color: \"ocean\",\n      level: \"Nivel 5 requerido\",\n      verified: true\n    }\n  ];\n\n  return (\n    <section id=\"marketplace\" className=\"py-20 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-navy mb-4\" data-testid=\"section-title-marketplace\">\n            Marketplace de Aplicaciones\n          </h2>\n          <p className=\"text-xl text-steel max-w-3xl mx-auto\" data-testid=\"section-description-marketplace\">\n            Explora aplicaciones que respetan tu privacidad y solo acceden a los datos que necesitas compartir\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {marketplaceApps.map((app, index) => {\n            const IconComponent = app.icon;\n            return (\n              <div \n                key={index} \n                className=\"bg-slate-bg rounded-xl p-6 border border-slate-200 hover:shadow-lg transition-shadow\"\n                data-testid={`marketplace-app-${index}`}\n              >\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className={`w-12 h-12 bg-${app.color} rounded-xl flex items-center justify-center`}>\n                    <IconComponent className=\"h-6 w-6 text-white\" />\n                  </div>\n                  {app.verified && (\n                    <span className=\"px-3 py-1 bg-emerald/10 text-emerald-700 rounded-full text-sm\" data-testid={`verified-badge-${index}`}>\n                      Verificada\n                    </span>\n                  )}\n                </div>\n                \n                <h4 className=\"font-semibold text-navy mb-2\" data-testid={`app-name-${index}`}>\n                  {app.name}\n                </h4>\n                <p className=\"text-steel text-sm mb-4\" data-testid={`app-description-${index}`}>\n                  {app.description}\n                </p>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-steel\" data-testid={`app-level-${index}`}>\n                    {app.level}\n                  </span>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    className={`text-${app.color} hover:text-${app.color}/80 transition-colors p-1`}\n                    data-testid={`app-link-${index}`}\n                  >\n                    <ExternalLink className=\"h-4 w-4\" />\n                    <span className=\"sr-only\">Abrir {app.name}</span>\n                  </Button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        <div className=\"text-center mt-12\">\n          <Button \n            className=\"bg-navy text-white px-8 py-3 rounded-lg font-semibold hover:bg-navy/90 transition-colors\"\n            data-testid=\"button-ver-todas-apps\"\n          >\n            Ver Todas las Apps\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3818},"client/src/components/MatrixTunnel.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nexport default function MatrixTunnel() {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const animationIdRef = useRef<number | null>(null);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n    \n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\n    rendererRef.current = renderer;\n    \n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create tunnel geometry\n    const tunnelGeometry = new THREE.CylinderGeometry(50, 50, 200, 32, 1, true);\n    \n    // Matrix-style material with transparency\n    const tunnelMaterial = new THREE.MeshBasicMaterial({\n      color: 0x00ff41,\n      wireframe: true,\n      transparent: true,\n      opacity: 0.1,\n      side: THREE.DoubleSide\n    });\n    \n    const tunnel = new THREE.Mesh(tunnelGeometry, tunnelMaterial);\n    tunnel.rotation.x = Math.PI / 2;\n    scene.add(tunnel);\n\n    // Create matrix characters - reliable basic set\n    const matrixChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!@#$%^&*()_+-=[]{}|;:,.<>?/0123456789';\n    \n    // Privacy words in multiple languages (simplified)\n    const privacyWords = [\n      'PRIVACY', 'PRIVACIDAD', 'DATENSCHUTZ', 'PRIVACIDADE', 'INTEGRITET', \n      'PERSONVERN', 'PRYWATNOSC', 'SOUKROMI', 'YKSITYISYYS', 'PRIVATNOST',\n      'ADATVEDELEM', 'ZASEBNOST', 'CONFIDENTIALITE', 'RISERVATEZZA', 'PRIVATA'\n    ];\n    \n    // Create character textures\n    const canvas = document.createElement('canvas');\n    canvas.width = 64;\n    canvas.height = 64;\n    const context = canvas.getContext('2d');\n    \n    const characterTextures: THREE.Texture[] = [];\n    \n    // Create single character textures\n    for (let i = 0; i < matrixChars.length; i++) {\n      if (!context) continue;\n      \n      // Clear with transparent background\n      context.clearRect(0, 0, 64, 64);\n      \n      // Set font and style\n      context.fillStyle = '#00ff41';\n      context.font = 'bold 32px Arial, sans-serif';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      \n      // Render the character clearly\n      context.fillText(matrixChars[i], 32, 32);\n      \n      const texture = new THREE.CanvasTexture(canvas);\n      texture.needsUpdate = true;\n      characterTextures.push(texture);\n    }\n    \n    // Create privacy word textures (larger canvas for full words)\n    const wordCanvas = document.createElement('canvas');\n    wordCanvas.width = 256;\n    wordCanvas.height = 64;\n    const wordContext = wordCanvas.getContext('2d');\n    \n    const privacyWordTextures: THREE.Texture[] = [];\n    \n    for (let i = 0; i < privacyWords.length; i++) {\n      if (!wordContext) continue;\n      \n      // Clear with transparent background\n      wordContext.clearRect(0, 0, 256, 64);\n      \n      // Set font and style\n      wordContext.fillStyle = '#00ff41';\n      wordContext.font = 'bold 16px Arial, sans-serif';\n      wordContext.textAlign = 'center';\n      wordContext.textBaseline = 'middle';\n      \n      // Render the word clearly\n      wordContext.fillText(privacyWords[i], 128, 32);\n      \n      const texture = new THREE.CanvasTexture(wordCanvas);\n      texture.needsUpdate = true;\n      privacyWordTextures.push(texture);\n    }\n    \n    // Create character particles\n    const particleCount = 300; // Reduced for performance\n    const characterMeshes: THREE.Mesh[] = [];\n    const characterVelocities: number[] = [];\n    const isWordMesh: boolean[] = []; // Track which meshes are words\n    \n    for (let i = 0; i < particleCount; i++) {\n      const isPrivacyWord = Math.random() < 0.1; // 10% chance to be a privacy word\n      \n      let geometry, material;\n      \n      if (isPrivacyWord) {\n        // Create larger geometry for privacy words\n        geometry = new THREE.PlaneGeometry(12, 3);\n        const randomOpacity = 0.7 + Math.random() * 0.3; // Brighter for words\n        material = new THREE.MeshBasicMaterial({\n          map: privacyWordTextures[Math.floor(Math.random() * privacyWordTextures.length)],\n          transparent: true,\n          opacity: randomOpacity,\n          alphaTest: 0.1,\n          side: THREE.DoubleSide\n        });\n      } else {\n        // Regular single character\n        geometry = new THREE.PlaneGeometry(2, 2);\n        const randomOpacity = 0.5 + Math.random() * 0.5;\n        material = new THREE.MeshBasicMaterial({\n          map: characterTextures[Math.floor(Math.random() * characterTextures.length)],\n          transparent: true,\n          opacity: randomOpacity,\n          alphaTest: 0.1,\n          side: THREE.DoubleSide\n        });\n      }\n      \n      const mesh = new THREE.Mesh(geometry, material);\n      \n      const angle = Math.random() * Math.PI * 2;\n      const radius = Math.random() * 45 + 5;\n      mesh.position.x = Math.cos(angle) * radius;\n      mesh.position.y = Math.sin(angle) * radius;\n      mesh.position.z = Math.random() * 400 - 200;\n      \n      mesh.lookAt(camera.position);\n      \n      characterMeshes.push(mesh);\n      characterVelocities.push(Math.random() * 0.5 + 0.2); // Slower speed\n      isWordMesh.push(isPrivacyWord); // Track if this mesh is a word\n      scene.add(mesh);\n    }\n\n    // Create data streams (vertical lines)\n    const streamCount = 20;\n    const streams: THREE.Line[] = [];\n    \n    for (let i = 0; i < streamCount; i++) {\n      const streamGeometry = new THREE.BufferGeometry();\n      const streamPositions = new Float32Array(60); // 20 points * 3 coordinates\n      \n      const angle = (i / streamCount) * Math.PI * 2;\n      const radius = 25 + Math.random() * 15;\n      const x = Math.cos(angle) * radius;\n      const y = Math.sin(angle) * radius;\n      \n      for (let j = 0; j < 20; j++) {\n        streamPositions[j * 3] = x;\n        streamPositions[j * 3 + 1] = y;\n        streamPositions[j * 3 + 2] = j * 10 - 100;\n      }\n      \n      streamGeometry.setAttribute('position', new THREE.BufferAttribute(streamPositions, 3));\n      \n      const streamMaterial = new THREE.LineBasicMaterial({\n        color: 0x00ff41,\n        transparent: true,\n        opacity: 0.3\n      });\n      \n      const stream = new THREE.Line(streamGeometry, streamMaterial);\n      streams.push(stream);\n      scene.add(stream);\n    }\n\n    // Position camera\n    camera.position.z = 10;\n    camera.position.y = 0;\n    camera.lookAt(0, 0, -50);\n\n    // Animation loop\n    const animate = () => {\n      animationIdRef.current = requestAnimationFrame(animate);\n      \n      // Remove tunnel rotation\n      // tunnel.rotation.z += 0.001;\n      \n      // Animate character particles\n      characterMeshes.forEach((mesh, i) => {\n        mesh.position.z += characterVelocities[i];\n        \n        // Randomly change characters while moving (more dynamic)\n        if (Math.random() < 0.02) { // 2% chance each frame to change character\n          const material = mesh.material as THREE.MeshBasicMaterial;\n          const isCurrentlyWord = isWordMesh[i]; // Check if it's currently a word\n          \n          if (Math.random() < 0.15 && !isCurrentlyWord) { // 15% chance to become a privacy word\n            const newTexture = privacyWordTextures[Math.floor(Math.random() * privacyWordTextures.length)];\n            material.map = newTexture;\n            material.needsUpdate = true;\n            isWordMesh[i] = true; // Update the flag\n          } else if (isCurrentlyWord && Math.random() < 0.3) { // 30% chance for words to become characters\n            const newTexture = characterTextures[Math.floor(Math.random() * characterTextures.length)];\n            material.map = newTexture;\n            material.needsUpdate = true;\n            isWordMesh[i] = false; // Update the flag\n          } else if (!isCurrentlyWord) { // Regular character change\n            const newTexture = characterTextures[Math.floor(Math.random() * characterTextures.length)];\n            material.map = newTexture;\n            material.needsUpdate = true;\n          }\n        }\n        \n        // Reset character if it goes too far\n        if (mesh.position.z > 100) {\n          mesh.position.z = -300;\n          const angle = Math.random() * Math.PI * 2;\n          const radius = Math.random() * 45 + 5;\n          mesh.position.x = Math.cos(angle) * radius;\n          mesh.position.y = Math.sin(angle) * radius;\n          \n          // Always change character when resetting position\n          const material = mesh.material as THREE.MeshBasicMaterial;\n          \n          if (Math.random() < 0.15) { // 15% chance to be a privacy word\n            const newTexture = privacyWordTextures[Math.floor(Math.random() * privacyWordTextures.length)];\n            material.map = newTexture;\n            isWordMesh[i] = true; // Update the flag\n          } else {\n            const newTexture = characterTextures[Math.floor(Math.random() * characterTextures.length)];\n            material.map = newTexture;\n            isWordMesh[i] = false; // Update the flag\n          }\n          material.needsUpdate = true;\n          \n          // Random opacity change\n          material.opacity = 0.4 + Math.random() * 0.4;\n        }\n        \n        // Make characters face camera\n        mesh.lookAt(camera.position);\n      });\n      \n      // Animate data streams slower\n      streams.forEach((stream, index) => {\n        // Remove stream rotation\n        // stream.rotation.z += 0.002 + index * 0.0002;\n        \n        const positions = stream.geometry.attributes.position.array as Float32Array;\n        for (let i = 0; i < 20; i++) {\n          positions[i * 3 + 2] += 0.3; // Much slower\n          if (positions[i * 3 + 2] > 100) {\n            positions[i * 3 + 2] = -200;\n          }\n        }\n        stream.geometry.attributes.position.needsUpdate = true;\n      });\n      \n      // Move camera forward very slowly\n      camera.position.z = 10 + Math.sin(Date.now() * 0.0003) * 2;\n      \n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      if (!rendererRef.current) return;\n      \n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      rendererRef.current.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      \n      window.removeEventListener('resize', handleResize);\n      \n      if (mountRef.current && rendererRef.current) {\n        mountRef.current.removeChild(rendererRef.current.domElement);\n      }\n      \n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n      }\n      \n      // Dispose geometries and materials\n      tunnel.geometry.dispose();\n      tunnelMaterial.dispose();\n      \n      characterMeshes.forEach(mesh => {\n        mesh.geometry.dispose();\n        (mesh.material as THREE.MeshBasicMaterial).dispose();\n      });\n      \n      characterTextures.forEach(texture => {\n        texture.dispose();\n      });\n      \n      privacyWordTextures.forEach(texture => {\n        texture.dispose();\n      });\n      \n      streams.forEach(stream => {\n        stream.geometry.dispose();\n        (stream.material as THREE.LineBasicMaterial).dispose();\n      });\n    };\n  }, []);\n\n  return (\n    <div \n      ref={mountRef} \n      className=\"absolute inset-0 overflow-hidden\"\n      style={{ zIndex: 1 }}\n    />\n  );\n}","size_bytes":11839},"client/src/components/Navigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport logoImage from \"@assets/horizontal_1755999944515.png\";\nimport LanguageSelector from \"@/components/LanguageSelector\";\n\nexport default function Navigation() {\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { t } = useLanguage();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 50);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const handleNavClick = (href: string) => {\n    const element = document.querySelector(href);\n    if (element) {\n      const headerOffset = 80; // Account for fixed header\n      const elementPosition = element.getBoundingClientRect().top;\n      const offsetPosition = elementPosition + window.pageYOffset - headerOffset;\n      \n      window.scrollTo({\n        top: offsetPosition,\n        behavior: \"smooth\"\n      });\n    }\n    setIsMobileMenuOpen(false);\n  };\n\n  return (\n    <nav \n      role=\"navigation\"\n      aria-label=\"Main navigation\"\n      className={`fixed top-0 w-full bg-slate-900/95 backdrop-blur-md border-b border-slate-700 z-50 transition-shadow duration-300 ${\n        isScrolled ? \"shadow-lg\" : \"\"\n      }`}\n    >\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-2\">\n            <img \n              src={logoImage} \n              alt=\"IDSHIELD LANDING Logo\" \n              className=\"h-10 w-auto\" \n              data-testid=\"logo-image\" \n            />\n          </div>\n          \n          <div className=\"hidden md:flex items-center space-x-8\">\n            <button \n              onClick={() => handleNavClick(\"#niveles\")}\n              className=\"text-slate-300 hover:text-white transition-colors focus:outline-none focus:ring-2 focus:ring-teal focus:ring-offset-2 rounded px-2 py-1\"\n              data-testid=\"nav-niveles\"\n            >\n              {t('nav.privacy.levels')}\n            </button>\n            <button \n              onClick={() => handleNavClick(\"#casos-uso\")}\n              className=\"text-slate-300 hover:text-white transition-colors focus:outline-none focus:ring-2 focus:ring-teal focus:ring-offset-2 rounded px-2 py-1\"\n              data-testid=\"nav-casos-uso\"\n            >\n              {t('nav.use.cases')}\n            </button>\n            <button \n              onClick={() => handleNavClick(\"#ace\")}\n              className=\"text-slate-300 hover:text-white transition-colors focus:outline-none focus:ring-2 focus:ring-teal focus:ring-offset-2 rounded px-2 py-1\"\n              data-testid=\"nav-ace\"\n            >\n              {t('nav.ace.framework')}\n            </button>\n            <a \n              href=\"https://github.com/idarkstudio/idshield\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-slate-300 hover:text-white transition-colors focus:outline-none focus:ring-2 focus:ring-teal focus:ring-offset-2 rounded px-2 py-1\"\n              data-testid=\"nav-github\"\n            >\n              {t('nav.github')}\n            </a>\n            <LanguageSelector />\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              onClick={() => handleNavClick(\"#demo\")}\n              className=\"bg-teal text-white hover:bg-teal/90 transition-colors min-h-[44px] focus:outline-none focus:ring-2 focus:ring-teal focus:ring-offset-2\"\n              data-testid=\"button-try-demo\"\n            >\n              {t('nav.try.demo')}\n            </Button>\n            \n            <button\n              className=\"md:hidden text-slate-300 min-h-[44px] min-w-[44px] flex items-center justify-center focus:outline-none focus:ring-2 focus:ring-teal focus:ring-offset-2 rounded\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              aria-label={isMobileMenuOpen ? \"Cerrar menú\" : \"Abrir menú\"}\n              aria-expanded={isMobileMenuOpen}\n              data-testid=\"button-mobile-menu\"\n            >\n              {isMobileMenuOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n            </button>\n          </div>\n        </div>\n\n        {/* Mobile menu */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden py-4 border-t border-slate-700\">\n            <div className=\"flex flex-col space-y-4\">\n              <button \n                onClick={() => handleNavClick(\"#niveles\")}\n                className=\"text-slate-300 hover:text-white transition-colors text-left min-h-[44px] focus:outline-none focus:ring-2 focus:ring-teal focus:ring-offset-2 rounded px-2 py-2\"\n                data-testid=\"mobile-nav-niveles\"\n              >\n                {t('nav.privacy.levels')}\n              </button>\n              <button \n                onClick={() => handleNavClick(\"#casos-uso\")}\n                className=\"text-slate-300 hover:text-white transition-colors text-left min-h-[44px] focus:outline-none focus:ring-2 focus:ring-teal focus:ring-offset-2 rounded px-2 py-2\"\n                data-testid=\"mobile-nav-casos-uso\"\n              >\n                {t('nav.use.cases')}\n              </button>\n              <button \n                onClick={() => handleNavClick(\"#ace\")}\n                className=\"text-slate-300 hover:text-white transition-colors text-left min-h-[44px] focus:outline-none focus:ring-2 focus:ring-teal focus:ring-offset-2 rounded px-2 py-2\"\n                data-testid=\"mobile-nav-ace\"\n              >\n                {t('nav.ace.framework')}\n              </button>\n              <a \n                href=\"https://github.com/idarkstudio/idshield\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-slate-300 hover:text-white transition-colors text-left min-h-[44px] focus:outline-none focus:ring-2 focus:ring-teal focus:ring-offset-2 rounded px-2 py-2 block\"\n                data-testid=\"mobile-nav-github\"\n              >\n                {t('nav.github')}\n              </a>\n              <div className=\"px-2 py-2\">\n                <LanguageSelector />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":6507},"client/src/components/PrivacyLevelsSection.tsx":{"content":"// PrivacyLevels.tsx\nimport { Shield, Eye, Lock, Users, Globe2, Activity } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\n\nexport default function PrivacyLevelsSection() {\n  const [active, setActive] = useState<number>(0);\n  const { t } = useLanguage();\n  const LEVELS = [\n    {\n      id: 0,\n      title: t('privacy.level.0.title'),\n      subtitle: t('privacy.level.0.subtitle'),\n      icon: <Shield className=\"h-5 w-5 flex-shrink-0\" />,\n      color: \"bg-slate-700 text-white border border-slate-500\",\n      access: t('privacy.level.0.access'),\n      examples: t('privacy.level.0.examples'),\n      security: t('privacy.level.0.security'),\n      bullets: [\"Nunca se comparte\", \"Fuente para pruebas ZK\", \"Claves/biometría/datos crudos\"],\n    },\n    {\n      id: 1,\n      title: t('privacy.level.1.title'),\n      subtitle: t('privacy.level.1.subtitle'),\n      icon: <Eye className=\"h-5 w-5 flex-shrink-0\" />,\n      color: \"bg-emerald-700 text-white border border-emerald-500\",\n      access: t('privacy.level.1.access'),\n      examples: t('privacy.level.1.examples'),\n      security: t('privacy.level.1.security'),\n      bullets: [\"Acceso puntual y granular\", \"Tiempo limitado (TTL)\", \"Alergias, pólizas, finanzas\"],\n    },\n    {\n      id: 2,\n      title: t('privacy.level.2.title'),\n      subtitle: t('privacy.level.2.subtitle'),\n      icon: <Lock className=\"h-5 w-5 flex-shrink-0\" />,\n      color: \"bg-emerald-600 text-white border border-emerald-400\",\n      access: t('privacy.level.2.access'),\n      examples: t('privacy.level.2.examples'),\n      security: t('privacy.level.2.security'),\n      bullets: [\"Permisos recurrentes\", \"Roles/ámbitos específicos\", \"Licencias, certificados\"],\n    },\n    {\n      id: 3,\n      title: t('privacy.level.3.title'),\n      subtitle: t('privacy.level.3.subtitle'),\n      icon: <Users className=\"h-5 w-5 flex-shrink-0\" />,\n      color: \"bg-sky-600 text-white border border-sky-400\",\n      access: t('privacy.level.3.access'),\n      examples: t('privacy.level.3.examples'),\n      security: t('privacy.level.3.security'),\n      bullets: [\"KYC mínimo (atributos anónimos)\", \"Acceso para dApps verificadas\", \"Perfil básico validado\"],\n    },\n    {\n      id: 4,\n      title: t('privacy.level.4.title'),\n      subtitle: t('privacy.level.4.subtitle'),\n      icon: <Globe2 className=\"h-5 w-5 flex-shrink-0\" />,\n      color: \"bg-orange-600 text-white border border-orange-400\",\n      access: t('privacy.level.4.access'),\n      examples: t('privacy.level.4.examples'),\n      security: t('privacy.level.4.security'),\n      bullets: [\"Perfiles públicos (Linkedin style)\", \"Historial de reputación\", \"Certificaciones y logros\"],\n    },\n    {\n      id: 5,\n      title: t('privacy.level.5.title'),\n      subtitle: t('privacy.level.5.subtitle'),\n      icon: <Activity className=\"h-5 w-5 flex-shrink-0\" />,\n      color: \"bg-indigo-600 text-white border border-indigo-400\",\n      access: t('privacy.level.5.access'),\n      examples: t('privacy.level.5.examples'),\n      security: t('privacy.level.5.security'),\n      bullets: [\"No vinculables a identidad\", \"Open data/estudios\", \"Políticas públicas\"],\n    },\n    {\n      id: 6,\n      title: t('privacy.level.6.title'),\n      subtitle: t('privacy.level.6.subtitle'),\n      icon: <Globe2 className=\"h-5 w-5 flex-shrink-0\" />,\n      color: \"bg-purple-600 text-white border border-purple-400\",\n      access: t('privacy.level.6.access'),\n      examples: t('privacy.level.6.examples'),\n      security: t('privacy.level.6.security'),\n      bullets: [\"Marketplace de aplicaciones\", \"APIs de terceros verificados\", \"Monetización de datos\"],\n    }\n  ];\n  const a = LEVELS.find(l => l.id === active)!;\n\n  return (\n    <section id=\"levels\" className=\"py-16\">\n      <div className=\"mx-auto max-w-6xl px-6\">\n        <div className=\"text-center max-w-3xl mx-auto\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-white\">{t('privacy.title')}</h2>\n          <p className=\"mt-3 text-slate-200\">\n            {t('privacy.subtitle')}\n          </p>\n        </div>\n\n        {/* Mobile: carousel scroll-snap */}\n        <div className=\"mt-10 md:hidden\">\n          <div className=\"flex gap-4 overflow-x-auto snap-x snap-mandatory pb-4 [-ms-overflow-style:none] [scrollbar-width:none]\"\n               style={{scrollbarWidth:\"none\"}} >\n            {LEVELS.map(l => (\n              <button\n                key={l.id}\n                onClick={() => setActive(l.id)}\n                className=\"snap-start min-w-[80%] rounded-2xl border border-slate-600 bg-slate-800 p-5 text-left shadow-sm active:scale-[.99] transition\"\n              >\n                <div className={`inline-flex items-center gap-2 px-3 py-1 rounded-xl text-xs ${l.color}`}>\n                  {l.icon}<span>{l.id}</span>\n                </div>\n                <h3 className=\"mt-3 text-lg font-semibold text-white\">{l.title}</h3>\n                <p className=\"mt-1 text-sm text-slate-200\">{l.subtitle}</p>\n              </button>\n            ))}\n          </div>\n\n          {/* Detail panel (mobile) */}\n          <div className=\"mt-4 rounded-2xl border border-slate-600 bg-slate-800 p-5\">\n            <h4 className=\"text-base font-semibold text-white\">{t('privacy.detail.prefix')} {a.id}</h4>\n            \n            <div className=\"mt-3 space-y-3\">\n              <div>\n                <h5 className=\"text-sm font-semibold text-emerald-300 mb-1\">{t('privacy.labels.access')}:</h5>\n                <p className=\"text-xs text-slate-200\">{a.access}</p>\n              </div>\n              \n              <div>\n                <h5 className=\"text-sm font-semibold text-emerald-300 mb-1\">{t('privacy.labels.examples')}:</h5>\n                <p className=\"text-xs text-slate-200\">{a.examples}</p>\n              </div>\n              \n              <div>\n                <h5 className=\"text-sm font-semibold text-emerald-300 mb-1\">{t('privacy.labels.security')}:</h5>\n                <p className=\"text-xs text-slate-200\">{a.security}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Desktop: grid layout */}\n        <div className=\"mt-10 hidden md:block\">\n          <div className=\"grid grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-5 mb-6\">\n            {LEVELS.map(l => (\n              <button\n                key={l.id}\n                onClick={() => setActive(l.id)}\n                className={`rounded-2xl border p-6 text-left shadow-sm transition hover:shadow-md\n                           ${active===l.id ? \"border-emerald-300 ring-2 ring-emerald-200 bg-slate-700\" : \"border-slate-600 bg-slate-800\"}`}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className={`inline-flex items-center gap-2 px-3 py-1 rounded-xl text-xs ${l.color}`}>\n                    {l.icon}<span>{l.id}</span>\n                  </div>\n                  <div className=\"text-slate-500 mt-1\">\n                    {l.icon}\n                  </div>\n                </div>\n                <h3 className=\"mt-3 text-lg font-semibold text-white\">{l.title}</h3>\n                <p className=\"mt-1 text-sm text-slate-200\">{l.subtitle}</p>\n              </button>\n            ))}\n          </div>\n          \n          {/* Desktop detail panel */}\n          <div className=\"rounded-2xl border border-slate-600 bg-slate-800 p-8\">\n            <div className=\"flex items-center gap-3 mb-6\">\n              <div className={`inline-flex items-center gap-2 px-4 py-2 rounded-xl ${a.color}`}>\n                {a.icon}<span className=\"font-semibold\">Nivel {a.id}</span>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-bold text-white\">{a.title}</h3>\n                <p className=\"text-slate-200\">{a.subtitle}</p>\n              </div>\n            </div>\n            \n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div>\n                <h4 className=\"text-sm font-semibold text-emerald-300 mb-2 uppercase tracking-wider\">{t('privacy.labels.access')}</h4>\n                <p className=\"text-sm text-slate-200 leading-relaxed\">{a.access}</p>\n              </div>\n              \n              <div>\n                <h4 className=\"text-sm font-semibold text-emerald-300 mb-2 uppercase tracking-wider\">{t('privacy.labels.examples')}</h4>\n                <p className=\"text-sm text-slate-200 leading-relaxed\">{a.examples}</p>\n              </div>\n              \n              <div>\n                <h4 className=\"text-sm font-semibold text-emerald-300 mb-2 uppercase tracking-wider\">{t('privacy.labels.security')}</h4>\n                <p className=\"text-sm text-slate-200 leading-relaxed\">{a.security}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n\n        {/* Hint */}\n        <p className=\"mt-6 text-center text-xs text-slate-400\">\n          {t('privacy.explore.hint')}\n        </p>\n      </div>\n    </section>\n  );\n}","size_bytes":8949},"client/src/components/SkipToContent.tsx":{"content":"export default function SkipToContent() {\n  return (\n    <a\n      href=\"#main-content\"\n      className=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-teal text-white px-4 py-2 rounded-lg font-semibold z-50 focus:outline-none focus:ring-2 focus:ring-emerald focus:ring-offset-2\"\n      data-testid=\"skip-to-content\"\n    >\n      Saltar al contenido principal\n    </a>\n  );\n}","size_bytes":394},"client/src/components/UseCasesSection.tsx":{"content":"import { Heart, Shield, Building } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\nexport default function UseCasesSection() {\n  const { t } = useLanguage();\n  \n  const useCases = [\n    {\n      title: t('cases.health.title'),\n      description: t('cases.health.description'),\n      icon: Heart,\n      color: \"teal\",\n      compliance: t('cases.health.compliance'),\n      image: \"https://images.unsplash.com/photo-1612349317150-e413f6a5b16d?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=300\"\n    },\n    {\n      title: t('cases.insurance.title'),\n      description: t('cases.insurance.description'),\n      icon: Shield,\n      color: \"emerald\",\n      compliance: t('cases.insurance.verification'),\n      image: \"https://images.unsplash.com/photo-1450101499163-c8848c66ca85?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=300\"\n    },\n    {\n      title: t('cases.government.title'),\n      description: t('cases.government.description'),\n      icon: Building,\n      color: \"ocean\",\n      compliance: t('cases.government.compliance'),\n      image: \"https://images.unsplash.com/photo-1577962917302-cd874c4e31d2?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=300\"\n    }\n  ];\n\n  return (\n    <section id=\"casos-uso\" className=\"py-20 bg-slate-bg\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-white mb-4\" data-testid=\"section-title-casos-uso\">\n            {t('cases.title')}\n          </h2>\n          <p className=\"text-xl text-slate-300 max-w-3xl mx-auto\" data-testid=\"section-description-casos-uso\">\n            {t('cases.subtitle')}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          {useCases.map((useCase, index) => {\n            const IconComponent = useCase.icon;\n            return (\n              <div \n                key={index} \n                className=\"bg-slate-800 rounded-2xl p-8 shadow-lg hover:shadow-xl transition-shadow border border-slate-700\"\n                data-testid={`use-case-${index}`}\n              >\n                <img \n                  src={useCase.image}\n                  alt={`Ilustración para ${useCase.title}`}\n                  width=\"600\" \n                  height=\"300\"\n                  loading=\"lazy\"\n                  className=\"rounded-lg mb-6 w-full h-48 object-cover\"\n                  data-testid={`use-case-image-${index}`}\n                />\n                \n                <div className=\"mb-4\">\n                  <IconComponent className={`h-8 w-8 text-${useCase.color} mb-4`} />\n                  <h3 className=\"text-2xl font-semibold text-white mb-3\" data-testid={`use-case-title-${index}`}>\n                    {useCase.title}\n                  </h3>\n                  <p className=\"text-slate-300 leading-relaxed mb-4\" data-testid={`use-case-description-${index}`}>\n                    {useCase.description}\n                  </p>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm text-${useCase.color} font-medium`} data-testid={`use-case-compliance-${index}`}>\n                    {useCase.compliance}\n                  </span>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    className={`text-${useCase.color} hover:text-${useCase.color}/80 transition-colors p-0`}\n                    data-testid={`use-case-button-${index}`}\n                  >\n                    <span className=\"sr-only\">Más información sobre {useCase.title}</span>\n                    →\n                  </Button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3870},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport HeroSection from \"@/components/HeroSection\";\nimport HowItWorksSection from \"@/components/HowItWorksSection\";\nimport PrivacyLevelsSection from \"@/components/PrivacyLevelsSection\";\nimport UseCasesSection from \"@/components/UseCasesSection\";\nimport ACESection from \"@/components/ACESection\";\nimport MarketplaceSection from \"@/components/MarketplaceSection\";\nimport AccessRequestsSection from \"@/components/AccessRequestsSection\";\nimport ContactSection from \"@/components/ContactSection\";\nimport Footer from \"@/components/Footer\";\nimport SkipToContent from \"@/components/SkipToContent\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-slate-bg dark\">\n      <SkipToContent />\n      <Navigation />\n      <main id=\"main-content\" role=\"main\">\n        <HeroSection />\n        <HowItWorksSection />\n        <PrivacyLevelsSection />\n        <UseCasesSection />\n        <ACESection />\n        <ContactSection />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":1039},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/WaitlistModal.tsx":{"content":"import React, { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { X } from \"lucide-react\";\n\ninterface WaitlistModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function WaitlistModal({ isOpen, onClose }: WaitlistModalProps) {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    interest: \"\"\n  });\n  const [emailError, setEmailError] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const waitlistMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const response = await apiRequest(\"POST\", \"/api/waitlist\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"¡Registrado exitosamente!\",\n        description: \"Te hemos agregado a nuestra lista de espera para early access.\",\n      });\n      setFormData({ name: \"\", email: \"\", interest: \"\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/waitlist\"] });\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Hubo un problema al procesar tu solicitud. Intenta nuevamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const validateEmail = (email: string) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const email = e.target.value;\n    setFormData(prev => ({ ...prev, email }));\n    \n    if (email && !validateEmail(email)) {\n      setEmailError(\"Por favor ingresa una dirección de email válida\");\n    } else {\n      setEmailError(\"\");\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate required fields\n    if (!formData.name.trim() || !formData.email.trim() || !formData.interest) {\n      toast({\n        title: \"Campos requeridos\",\n        description: \"Por favor completa todos los campos del formulario.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate email format\n    if (!validateEmail(formData.email)) {\n      toast({\n        title: \"Email inválido\",\n        description: \"Por favor ingresa una dirección de email válida.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    waitlistMutation.mutate(formData);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\" onClick={onClose}>\n      <div \n        className=\"bg-slate-900 rounded-2xl p-8 max-w-md w-full mx-4 border border-slate-700 shadow-2xl\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-2xl font-bold text-white\">Únete a la Lista de Espera</h2>\n          <button\n            onClick={onClose}\n            className=\"text-slate-400 hover:text-white transition-colors\"\n            data-testid=\"close-modal\"\n          >\n            <X className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        <p className=\"text-slate-300 mb-6\">\n          Sé de los primeros en acceder a IDShield y experimenta el futuro de la privacidad digital.\n        </p>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Name Field */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Nombre completo *\n            </label>\n            <Input\n              type=\"text\"\n              value={formData.name}\n              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n              placeholder=\"Tu nombre completo\"\n              className=\"bg-slate-800 border-slate-600 text-white placeholder:text-slate-400\"\n              data-testid=\"input-name\"\n            />\n          </div>\n\n          {/* Email Field */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Email *\n            </label>\n            <Input\n              type=\"email\"\n              value={formData.email}\n              onChange={handleEmailChange}\n              placeholder=\"tu@email.com\"\n              className=\"bg-slate-800 border-slate-600 text-white placeholder:text-slate-400\"\n              data-testid=\"input-email\"\n            />\n            {emailError && (\n              <p className=\"text-red-400 text-sm mt-1\" data-testid=\"email-error\">\n                {emailError}\n              </p>\n            )}\n          </div>\n\n          {/* Interest Field */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              ¿Qué te interesa más? *\n            </label>\n            <Select value={formData.interest} onValueChange={(value) => setFormData(prev => ({ ...prev, interest: value }))}>\n              <SelectTrigger className=\"bg-slate-800 border-slate-600 text-white\" data-testid=\"select-interest\">\n                <SelectValue placeholder=\"Selecciona una opción\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-600\">\n                <SelectItem value=\"privacy\" className=\"text-white hover:bg-slate-700\">Control de privacidad</SelectItem>\n                <SelectItem value=\"blockchain\" className=\"text-white hover:bg-slate-700\">Integración blockchain</SelectItem>\n                <SelectItem value=\"marketplace\" className=\"text-white hover:bg-slate-700\">Marketplace de apps</SelectItem>\n                <SelectItem value=\"developer\" className=\"text-white hover:bg-slate-700\">Herramientas para desarrolladores</SelectItem>\n                <SelectItem value=\"business\" className=\"text-white hover:bg-slate-700\">Soluciones empresariales</SelectItem>\n                <SelectItem value=\"other\" className=\"text-white hover:bg-slate-700\">Otro</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Benefits */}\n          <div className=\"bg-slate-800/50 rounded-lg p-4 mt-6\">\n            <h3 className=\"text-emerald-400 font-semibold mb-3\">Lo que obtienes:</h3>\n            <ul className=\"space-y-2 text-sm text-slate-300\">\n              <li>• Acceso temprano a IDShield</li>\n              <li>• Notificaciones sobre nuevas funciones</li>\n              <li>• Descuentos especiales</li>\n              <li>• Invitaciones a eventos exclusivos</li>\n            </ul>\n          </div>\n\n          {/* Submit Button */}\n          <Button\n            type=\"submit\"\n            disabled={waitlistMutation.isPending}\n            className=\"w-full bg-emerald-500 hover:bg-emerald-600 text-white font-semibold py-3 mt-6\"\n            data-testid=\"button-submit\"\n          >\n            {waitlistMutation.isPending ? \"Enviando...\" : \"Unirse a la Lista\"}\n          </Button>\n\n          <p className=\"text-xs text-slate-400 text-center mt-4\" data-testid=\"privacy-notice\">\n            Al registrarte, aceptas nuestros términos de privacidad. No spam, prometido.\n          </p>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":7429},"client/src/components/LanguageSelector.tsx":{"content":"import React from 'react';\nimport { useLanguage, Language } from '@/contexts/LanguageContext';\nimport { Button } from '@/components/ui/button';\nimport { Globe } from 'lucide-react';\n\nexport default function LanguageSelector() {\n  const { language, setLanguage } = useLanguage();\n\n  const languages: { code: Language; name: string; flag: string }[] = [\n    { code: 'es', name: 'Español', flag: '🇪🇸' },\n    { code: 'en', name: 'English', flag: '🇺🇸' },\n  ];\n\n  const currentLanguage = languages.find(lang => lang.code === language);\n\n  return (\n    <div className=\"relative group\">\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"flex items-center gap-2 text-slate-300 hover:text-white transition-colors\"\n        data-testid=\"language-selector\"\n      >\n        <Globe className=\"h-4 w-4\" />\n        <span className=\"hidden sm:inline\">{currentLanguage?.name}</span>\n        <span className=\"sm:hidden\">{currentLanguage?.flag}</span>\n      </Button>\n      \n      <div className=\"absolute right-0 top-full mt-2 bg-slate-800 border border-slate-700 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50 min-w-[120px]\">\n        {languages.map((lang) => (\n          <button\n            key={lang.code}\n            onClick={() => setLanguage(lang.code)}\n            className={`w-full flex items-center gap-2 px-3 py-2 text-sm transition-colors first:rounded-t-lg last:rounded-b-lg ${\n              language === lang.code\n                ? 'bg-emerald-500/20 text-emerald-400'\n                : 'text-slate-300 hover:bg-slate-700 hover:text-white'\n            }`}\n            data-testid={`language-option-${lang.code}`}\n          >\n            <span className=\"text-lg\">{lang.flag}</span>\n            <span>{lang.name}</span>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":1883},"client/src/contexts/LanguageContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\n\nexport type Language = 'es' | 'en';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n\ninterface LanguageProviderProps {\n  children: React.ReactNode;\n}\n\nexport const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {\n  const [language, setLanguage] = useState<Language>(() => {\n    const saved = localStorage.getItem('idshield-language');\n    return (saved as Language) || 'es';\n  });\n\n  useEffect(() => {\n    localStorage.setItem('idshield-language', language);\n    document.documentElement.lang = language;\n  }, [language]);\n\n  const t = (key: string): string => {\n    return (translations[language] as any)[key] || key;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nconst translations = {\n  es: {\n    // Navigation\n    'nav.privacy.levels': 'Niveles de Privacidad',\n    'nav.demo': 'Prueba el Demo',\n    'nav.use.cases': 'Casos de Uso',\n    'nav.ace.framework': 'Framework ACE',\n    'nav.github': 'GitHub',\n    'nav.try.demo': 'Probar Demo',\n\n    // Hero Section\n    'hero.hackathon.participating': 'Participando en',\n    'hero.hackathon.link': 'Midnight Hackathon – Buenos Aires',\n    'hero.title': 'Tu Identidad',\n    'hero.title.highlight': 'Completamente',\n    'hero.title.end': 'Protegida',\n    'hero.subtitle': 'Control total sobre tus datos personales con tecnología Zero-Knowledge. Comparte información sin comprometer tu privacidad.',\n    'hero.feature.1': '• Sistema de privacidad multicapa (niveles 0–6)',\n    'hero.feature.2': '• Demo interactiva con simulación',\n    'hero.cta.demo': 'Probar Demo',\n    'hero.cta.waitlist': 'Unirse a Lista de Espera',\n\n    // Privacy Levels\n    'privacy.title': 'Sistema de Privacidad Multicapa',\n    'privacy.subtitle': 'Controla exactamente qué información compartes y con quién a través de nuestro sistema de niveles.',\n    'privacy.explore.hint': '👆 En móvil, desliza horizontalmente para explorar todos los niveles.',\n    'privacy.detail.prefix': 'Detalle del nivel',\n    'privacy.level.0.title': 'Nivel 0 - Información Confidencial Absoluta',\n    'privacy.level.0.subtitle': 'Solo el usuario; nunca compartida',\n    'privacy.level.0.access': 'Solo el usuario; nunca compartida.',\n    'privacy.level.0.examples': 'Historial médico completo, llaves privadas, documentos de identidad en crudo.',\n    'privacy.level.0.security': 'Cifrado total y almacenado en bóveda privada. Ninguna API o tercero puede acceder.',\n    'privacy.level.1.title': 'Nivel 1 - Información Sensible',\n    'privacy.level.1.subtitle': 'Verificación crítica con consentimiento explícito',\n    'privacy.level.1.access': 'Compartida solo en casos de verificación crítica con consentimiento explícito.',\n    'privacy.level.1.examples': 'Resultados médicos específicos, datos financieros sensibles (cuentas, tarjetas).',\n    'privacy.level.1.security': 'Puede otorgarse acceso temporal y auditado.',\n    'privacy.level.2.title': 'Nivel 2 - Información Privada',\n    'privacy.level.2.subtitle': 'Compartición selectiva con usuarios/organizaciones autorizadas',\n    'privacy.level.2.access': 'Compartida de forma selectiva con usuarios/organizaciones autorizadas.',\n    'privacy.level.2.examples': 'Dirección, teléfono, historial laboral o académico.',\n    'privacy.level.2.security': 'Encriptada; solo revelada a partes verificadas y con permisos de nivel adecuado.',\n    'privacy.level.3.title': 'Nivel 3 - Información Interna',\n    'privacy.level.3.subtitle': 'Interacciones internas bajo acuerdos de privacidad',\n    'privacy.level.3.access': 'Usada para interacciones internas dentro de servicios o empresas, bajo acuerdos de privacidad.',\n    'privacy.level.3.examples': 'Evaluaciones internas, datos no públicos de seguros, reportes no sensibles.',\n    'privacy.level.3.security': 'Acceso regulado, con trazabilidad y auditoría.',\n    'privacy.level.4.title': 'Nivel 4 - Información Pública Controlada',\n    'privacy.level.4.subtitle': 'Visible parcialmente al público o en contextos de confianza',\n    'privacy.level.4.access': 'Información que puede hacerse visible parcialmente al público o en contextos de confianza.',\n    'privacy.level.4.examples': 'Perfil profesional, certificados públicos, información que el usuario quiera compartir en redes controladas.',\n    'privacy.level.4.security': 'Control sobre qué partes son visibles y a quién.',\n    'privacy.level.5.title': 'Nivel 5 - ZK Data (Zero-Knowledge Proofs)',\n    'privacy.level.5.subtitle': 'Verificar atributos sin exponer información real',\n    'privacy.level.5.access': 'Uso de pruebas criptográficas ZK para verificar atributos sin exponer la información real.',\n    'privacy.level.5.examples': 'Verificación de que eres mayor de 18 sin revelar tu fecha de nacimiento, prueba de cobertura de seguro sin mostrar la póliza completa.',\n    'privacy.level.5.security': 'Máxima privacidad; datos nunca se revelan, solo se prueba el atributo.',\n    'privacy.level.6.title': 'Nivel 6 - Ecosystem Applications',\n    'privacy.level.6.subtitle': 'Aplicaciones sobre infraestructura IDShield',\n    'privacy.level.6.access': 'Empresas y desarrolladores pueden construir aplicaciones sobre la infraestructura de IDShield, usando datos en forma modular y controlada.',\n    'privacy.level.6.examples': 'Aplicaciones médicas, seguros, identidad digital, gobernanza.',\n    'privacy.level.6.security': 'El usuario sigue siendo el dueño de los datos y aprueba cada uso; IDShield monetiza a través de APIs/licencias en este nivel.',\n    'privacy.labels.access': 'Acceso',\n    'privacy.labels.examples': 'Ejemplos',\n    'privacy.labels.security': 'Seguridad',\n\n    // Use Cases\n    'cases.title': 'Casos de Uso',\n    'cases.subtitle': 'IDShield transforma la gestión de identidad digital en múltiples sectores',\n    'cases.health.title': 'Salud Digital',\n    'cases.health.description': 'Comparte información médica necesaria sin exponer tu historial completo. Ideal para seguros de salud y consultas médicas.',\n    'cases.health.compliance': 'HIPAA Compliant',\n    'cases.insurance.title': 'Seguros',\n    'cases.insurance.description': 'Verifica tu elegibilidad para seguros sin revelar información financiera sensible. Proceso de suscripción más rápido y privado.',\n    'cases.insurance.verification': 'Verificación Instant',\n    'cases.government.title': 'Gobierno & Educación',\n    'cases.government.description': 'Accede a servicios gubernamentales y educativos verificando solo la información necesaria. Privacidad garantizada en trámites oficiales.',\n    'cases.government.compliance': 'Cumple Regulaciones',\n\n    // How It Works\n    'how.title': 'Cómo Funciona IDShield',\n    'how.subtitle': 'Protege tu identidad en tres simples pasos con tecnología blockchain avanzada.',\n    'how.step.1.title': 'Conecta tu Wallet',\n    'how.step.1.description': 'Vincula tu wallet Lace para acceder a IDShield y firmar permisos.',\n    'how.step.2.title': 'Organiza tus Datos',\n    'how.step.2.description': 'Guarda tu información en 7 niveles (0–6), desde privacidad absoluta hasta ecosistema.',\n    'how.step.3.title': 'Genera Pruebas ZK',\n    'how.step.3.description': 'Comparte atributos verificables sin revelar datos crudos (p. ej., alergias o cobertura activa).',\n    'how.example.title': 'Ejemplo de Uso',\n    'how.example.subtitle': 'Flujo Paciente–Doctor (con permisos y auditoría)',\n    'how.example.request': 'Solicitud: el consultorio pide \"lectura Nivel 1 y 2\" (alergias, diagnósticos previos).',\n    'how.example.request.scope': 'Se especifica alcance + tiempo (ej. 24 h).',\n    'how.example.auth': 'Autorización: aprobás en tu wallet y se registra en contratos Midnight.',\n    'how.example.auth.revoke': 'Revocable en cualquier momento.',\n    'how.example.record': 'Registro: el médico carga la evolución y se guarda un hash + metadatos auditables.',\n    'how.example.record.privacy': 'Sin exponer tus datos de Nivel 0.',\n    'how.example.badge.1': '✓ Lectura controlada por niveles',\n    'how.example.badge.2': '✓ ZK para atributos (alergias, cobertura)',\n    'how.example.badge.3': '✓ Auditoría y revocación',\n\n    // Contact\n    'contact.title': 'Únete al Futuro de la Privacidad',\n    'contact.subtitle': 'Sé parte de la revolución en protección de datos personales. Regístrate para early access.',\n    'contact.form.name': 'Nombre Completo',\n    'contact.form.email': 'Email',\n    'contact.form.message': 'Interés Principal',\n    'contact.form.interest.placeholder': 'Selecciona tu interés principal',\n    'contact.form.interest.personal': 'Uso Personal',\n    'contact.form.interest.development': 'Desarrollo de Apps',\n    'contact.form.interest.enterprise': 'Integración Empresarial',\n    'contact.form.interest.research': 'Investigación',\n    'contact.form.submit': 'Unirse a Lista de Espera',\n    'contact.form.loading': 'Procesando...',\n    'contact.form.privacy': 'Al registrarte, aceptas nuestros términos de privacidad. No spam, prometido.',\n    'contact.benefits.1': 'Control total de tus datos',\n    'contact.benefits.2': 'Tecnología Zero-Knowledge',\n    'contact.benefits.3': 'Integración con Cardano',\n    'contact.benefits.4': 'Marketplace de apps verificadas',\n\n    // Footer\n    'footer.description': 'Protegiendo tu identidad digital con tecnología blockchain avanzada y pruebas Zero-Knowledge.',\n    'footer.product': 'Producto',\n    'footer.support': 'Soporte',\n    'footer.features': 'Características',\n    'footer.security': 'Seguridad',\n    'footer.integration': 'Integración',\n    'footer.api': 'API Docs',\n    'footer.documentation': 'Documentación',\n    'footer.help': 'Ayuda',\n    'footer.contact': 'Contacto',\n    'footer.status': 'Estado',\n    'footer.privacy': 'Privacidad',\n    'footer.terms': 'Términos',\n    'footer.cookies': 'Cookies',\n    'footer.copyright': '© 2025 IDShield es una marca de',\n    'footer.rights': '. Todos los derechos reservados.',\n    'footer.hackathon': 'Producto creado para el hackathon Midnight Buenos Aires',\n    'footer.coming.soon': 'Próximamente',\n\n    // Waitlist Modal\n    'waitlist.title': 'Únete a la Lista de Espera',\n    'waitlist.subtitle': 'Sé de los primeros en acceder a IDShield cuando esté disponible.',\n    'waitlist.form.name': 'Nombre completo',\n    'waitlist.form.email': 'Correo electrónico',\n    'waitlist.form.company': 'Empresa (opcional)',\n    'waitlist.form.interest': 'Área de interés',\n    'waitlist.form.interest.health': 'Salud Digital',\n    'waitlist.form.interest.insurance': 'Seguros',\n    'waitlist.form.interest.government': 'Gobierno',\n    'waitlist.form.interest.education': 'Educación',\n    'waitlist.form.interest.other': 'Otro',\n    'waitlist.form.submit': 'Unirse a Lista de Espera',\n    'waitlist.success': '¡Gracias! Te hemos agregado a la lista de espera.',\n    'waitlist.error': 'Error al enviar. Inténtalo de nuevo.',\n\n    // Privacy Policy\n    'privacy.page.title': 'IDShield – Términos de Privacidad y Protección de Datos',\n    'privacy.page.effective': 'Fecha de vigencia: 24 de agosto de 2025',\n    'privacy.page.tagline': 'Tu Privacidad, Tu Control',\n    'privacy.page.intro': 'IDShield está diseñado para darte control total sobre tu información personal. Todos los datos que eliges compartir están cifrados y, cuando corresponde, asegurados con pruebas Zero-Knowledge (ZK). Nunca accedemos a tus datos privados sin procesar.',\n    'privacy.page.collect.title': 'Qué Datos Recopilamos',\n    'privacy.page.collect.voluntary': 'Información voluntaria: Dirección de wallet (ej. Lace), email (si te unes a nuestra lista de espera), y preferencias que proporciones.',\n    'privacy.page.collect.usage': 'Datos de uso: Análisis no identificables como visitas a páginas y patrones de interacción, recopilados solo para mejorar nuestro sitio.',\n    'privacy.page.use.title': 'Cómo se Utilizan tus Datos',\n    'privacy.page.use.operate': 'Para operar y mostrar la demo de IDShield.',\n    'privacy.page.use.communicate': 'Para comunicarnos contigo si optas por nuestra lista de espera o eventos.',\n    'privacy.page.use.compliance': 'Para asegurar cumplimiento con requisitos de hackathon o legales.',\n    'privacy.page.not.title': 'Lo Que No Hacemos',\n    'privacy.page.not.sell': 'No vendemos, rentamos o intercambiamos tus datos.',\n    'privacy.page.not.share': 'No compartimos información personal con terceros sin tu consentimiento explícito.',\n    'privacy.page.not.store': 'No almacenamos registros sensibles (como datos de salud o seguros) en nuestro sitio de entrada; esos son controlados por ti dentro de la bóveda descentralizada de IDShield.',\n    'privacy.page.security.title': 'Seguridad',\n    'privacy.page.security.description': 'Utilizamos cifrado estándar de la industria y mecanismos ZK para asegurar privacidad por diseño. Cualquier prueba generada a través de la demo es simulada y no expone datos personales reales.',\n    'privacy.page.rights.title': 'Tus Derechos',\n    'privacy.page.rights.description': 'Puedes solicitar acceso o eliminación de cualquier información que proporciones (como tu email) en cualquier momento contactándonos a: contact@idshield.cc',\n    'privacy.page.third.title': 'Servicios de Terceros',\n    'privacy.page.third.description': 'Si nuestro sitio de entrada utiliza análisis (ej. herramientas que respetan la privacidad), las cookies son mínimas y solo para funcionalidad esencial. Puedes optar por no participar cuando sea aplicable.',\n    'privacy.page.updates.title': 'Actualizaciones',\n    'privacy.page.updates.description': 'Podemos actualizar estos términos conforme evolucionan nuestros servicios. Los cambios se publicarán aquí con una fecha actualizada.',\n    'privacy.page.contact.info': 'Contacto: Para preguntas o inquietudes sobre tu privacidad, envíanos un email a contact@idshield.cc',\n\n    // Terms & Conditions\n    'terms.page.title': 'IDShield – Términos y Condiciones',\n    'terms.page.effective': 'Fecha de vigencia: 24 de agosto de 2025',\n    'terms.page.acceptance.title': '1. Aceptación de Términos',\n    'terms.page.acceptance.description': 'Al acceder o utilizar la página de IDShield, demo o servicios, aceptas estos Términos y Condiciones y nuestra Política de Privacidad. Si no estás de acuerdo, por favor no uses nuestro sitio o demo.',\n    'terms.page.purpose.title': '2. Propósito del Sitio',\n    'terms.page.purpose.intro': 'Esta página está destinada a:',\n    'terms.page.purpose.info': 'Proporcionar información sobre IDShield y sus características.',\n    'terms.page.purpose.demo': 'Mostrar una demo de nuestra tecnología de privacidad Zero-Knowledge.',\n    'terms.page.purpose.waitlist': 'Permitir a los visitantes unirse a una lista de espera o solicitar actualizaciones.',\n    'terms.page.purpose.disclaimer': 'La demo e información proporcionadas son solo para fines de demostración y educativos. No constituyen asesoramiento legal, médico o financiero.',\n    'terms.page.eligibility.title': '3. Elegibilidad',\n    'terms.page.eligibility.description': 'Nuestros servicios están disponibles para personas de 18 años o más. Al usar nuestro sitio, confirmas que cumples este requisito.',\n    'terms.page.responsibilities.title': '4. Responsabilidades del Usuario',\n    'terms.page.responsibilities.lawful': 'Aceptas usar nuestro sitio y demo de manera legal y respetuosa.',\n    'terms.page.responsibilities.hack': 'No intentes hackear, interrumpir o usar incorrectamente la demo o la infraestructura del sitio.',\n    'terms.page.responsibilities.info': 'Eres responsable de cualquier información que proporciones voluntariamente (ej. email para lista de espera).',\n    'terms.page.intellectual.title': '5. Propiedad Intelectual',\n    'terms.page.intellectual.description': 'Todo el contenido en este sitio, incluyendo logos, diseños, gráficos y texto, es propiedad de IDShield o sus licenciantes. No puedes copiar, reproducir o distribuir sin nuestro consentimiento previo por escrito.',\n    'terms.page.thirdparty.title': '6. Enlaces de Terceros',\n    'terms.page.thirdparty.description': 'Nuestro sitio puede incluir enlaces a sitios o servicios de terceros (ej. socios de hackathon). No somos responsables de su contenido o prácticas.',\n    'terms.page.warranties.title': '7. Descargo de Garantías',\n    'terms.page.warranties.description': 'La demo de IDShield se proporciona \"tal como está\", sin garantías de ningún tipo, expresas o implícitas. No garantizamos servicio ininterrumpido o libre de errores, ni garantizamos resultados específicos del uso de la demo.',\n    'terms.page.liability.title': '8. Limitación de Responsabilidad',\n    'terms.page.liability.intro': 'En la máxima medida permitida por la ley:',\n    'terms.page.liability.damages': 'IDShield no es responsable de ningún daño, directo o indirecto, resultante del uso de nuestra página o demo.',\n    'terms.page.liability.data': 'Cualquier dato usado en la demo es ilustrativo; las decisiones médicas o de seguros reales no deben basarse en las salidas de la demo.',\n    'terms.page.changes.title': '9. Cambios en los Términos',\n    'terms.page.changes.description': 'Podemos actualizar estos Términos de vez en cuando. Las actualizaciones se publicarán aquí con una nueva fecha de vigencia. Tu uso continuo de nuestro sitio después de los cambios significa que aceptas los términos actualizados.',\n    'terms.page.governing.title': '10. Ley Aplicable',\n    'terms.page.governing.description': 'Estos Términos se rigen por las leyes de Argentina. Cualquier disputa se resolverá en los tribunales competentes de Buenos Aires, Argentina.',\n    'terms.page.contact.title': '11. Contáctanos',\n    'terms.page.contact.description': 'Para preguntas sobre estos Términos, contacta: contact@idshield.cc',\n\n    // ACE Framework\n    'ace.title': 'Framework',\n    'ace.title.highlight': 'ACE',\n    'ace.title.end': 'de Libertad',\n    'ace.subtitle': 'IDShield está alineado con el',\n    'ace.subtitle.challenge': 'ACE Freedom Challenge',\n    'ace.subtitle.hackathon': 'del Midnight Hackathon Buenos Aires: protegemos',\n    'ace.subtitle.components': 'usando ZK y contratos privados en Midnight.',\n    'ace.association.title': 'Association',\n    'ace.association.description': 'Conexiones privadas y membresías verificadas con ZK en bóvedas de datos compartidas.',\n    'ace.association.example': 'Ej.: grupos médicos/aseguradoras con acceso mínimo necesario.',\n    'ace.commerce.title': 'Commerce',\n    'ace.commerce.description': 'Transacciones/validaciones privadas con',\n    'ace.commerce.description.highlight': 'divulgación selectiva',\n    'ace.commerce.description.end': 'y control de permisos.',\n    'ace.commerce.example': 'Ej.: póliza activa o solvencia sin revelar el documento completo.',\n    'ace.expression.title': 'Expression',\n    'ace.expression.description': 'Publicaciones, encuestas y credenciales anónimas con pruebas verificables.',\n    'ace.expression.example': 'Ej.: atestaciones anónimas con prueba de elegibilidad.',\n    'ace.coverage.title': 'Cobertura del Midnight Hackathon Buenos Aires',\n    'ace.coverage.description': 'Cumplimos con los',\n    'ace.coverage.tracks': '3 tracks ACE',\n    'ace.coverage.components': '≥ 2 componentes requeridos',\n    'ace.coverage.description.end': '.',\n    'ace.zk.verification': 'ZK Verification:',\n    'ace.zk.description': 'pruebas de atributos (edad, póliza, membresía).',\n    'ace.secure.sharing': 'Secure Data Sharing:',\n    'ace.secure.description': 'divulgación selectiva y revocación.',\n    'ace.openzeppelin.integration': 'OpenZeppelin Integration:',\n    'ace.openzeppelin.description': 'roles/pausable & contratos seguros.',\n    'ace.developer.tooling': 'Developer Tooling:',\n    'ace.developer.description': 'generador/CLI para flujos ZK (demo).',\n    'ace.cta.demo': 'Probar Demo',\n    'ace.demo.description': 'La demo simula conexión Lace y generación de pruebas ZK.',\n  },\n  en: {\n    // Navigation\n    'nav.privacy.levels': 'Privacy Levels',\n    'nav.demo': 'Try Demo',\n    'nav.use.cases': 'Use Cases',\n    'nav.ace.framework': 'ACE Framework',\n    'nav.github': 'GitHub',\n    'nav.try.demo': 'Try Demo',\n\n    // Hero Section\n    'hero.hackathon.participating': 'Participating in',\n    'hero.hackathon.link': 'Midnight Hackathon – Buenos Aires',\n    'hero.title': 'Your Identity',\n    'hero.title.highlight': 'Completely',\n    'hero.title.end': 'Protected',\n    'hero.subtitle': 'Total control over your personal data with Zero-Knowledge technology. Share verifiable information without compromising your privacy.',\n    'hero.feature.1': '• Multi-layer privacy system (levels 0–6)',\n    'hero.feature.2': '• Interactive demo with simulation',\n    'hero.cta.demo': 'Try Demo',\n    'hero.cta.waitlist': 'Join Waitlist',\n\n    // Privacy Levels\n    'privacy.title': 'Multi-Layer Privacy System',\n    'privacy.subtitle': 'Control exactly what information you share and with whom through our level system.',\n    'privacy.explore.hint': '👆 On mobile, swipe horizontally to explore all levels.',\n    'privacy.detail.prefix': 'Level detail',\n    'privacy.level.0.title': 'Level 0 - Absolute Confidential Information',\n    'privacy.level.0.subtitle': 'User only; never shared',\n    'privacy.level.0.access': 'User only; never shared.',\n    'privacy.level.0.examples': 'Complete medical history, private keys, raw identity documents.',\n    'privacy.level.0.security': 'Total encryption and stored in private vault. No API or third party can access.',\n    'privacy.level.1.title': 'Level 1 - Sensitive Information',\n    'privacy.level.1.subtitle': 'Critical verification with explicit consent',\n    'privacy.level.1.access': 'Shared only in cases of critical verification with explicit consent.',\n    'privacy.level.1.examples': 'Specific medical results, sensitive financial data (accounts, cards).',\n    'privacy.level.1.security': 'Temporary and audited access can be granted.',\n    'privacy.level.2.title': 'Level 2 - Private Information',\n    'privacy.level.2.subtitle': 'Selective sharing with authorized users/organizations',\n    'privacy.level.2.access': 'Shared selectively with authorized users/organizations.',\n    'privacy.level.2.examples': 'Address, phone, work or academic history.',\n    'privacy.level.2.security': 'Encrypted; only revealed to verified parties with appropriate level permissions.',\n    'privacy.level.3.title': 'Level 3 - Internal Information',\n    'privacy.level.3.subtitle': 'Internal interactions under privacy agreements',\n    'privacy.level.3.access': 'Used for internal interactions within services or companies, under privacy agreements.',\n    'privacy.level.3.examples': 'Internal evaluations, non-public insurance data, non-sensitive reports.',\n    'privacy.level.3.security': 'Regulated access, with traceability and auditing.',\n    'privacy.level.4.title': 'Level 4 - Controlled Public Information',\n    'privacy.level.4.subtitle': 'Partially visible to public or in trusted contexts',\n    'privacy.level.4.access': 'Information that can be made partially visible to the public or in trusted contexts.',\n    'privacy.level.4.examples': 'Professional profile, public certificates, information the user wants to share on controlled networks.',\n    'privacy.level.4.security': 'Control over which parts are visible and to whom.',\n    'privacy.level.5.title': 'Level 5 - ZK Data (Zero-Knowledge Proofs)',\n    'privacy.level.5.subtitle': 'Verify attributes without exposing real information',\n    'privacy.level.5.access': 'Use of ZK cryptographic proofs to verify attributes without exposing real information.',\n    'privacy.level.5.examples': 'Verification that you are over 18 without revealing your birth date, proof of insurance coverage without showing the complete policy.',\n    'privacy.level.5.security': 'Maximum privacy; data is never revealed, only the attribute is proven.',\n    'privacy.level.6.title': 'Level 6 - Ecosystem Applications',\n    'privacy.level.6.subtitle': 'Applications on IDShield infrastructure',\n    'privacy.level.6.access': 'Companies and developers can build applications on IDShield infrastructure, using data in modular and controlled form.',\n    'privacy.level.6.examples': 'Medical applications, insurance, digital identity, governance.',\n    'privacy.level.6.security': 'User remains the owner of data and approves each use; IDShield monetizes through APIs/licenses at this level.',\n    'privacy.labels.access': 'Access',\n    'privacy.labels.examples': 'Examples',\n    'privacy.labels.security': 'Security',\n\n    // Use Cases\n    'cases.title': 'Use Cases',\n    'cases.subtitle': 'IDShield transforms digital identity management across multiple sectors',\n    'cases.health.title': 'Digital Health',\n    'cases.health.description': 'Share necessary medical information without exposing your complete history. Ideal for health insurance and medical consultations.',\n    'cases.health.compliance': 'HIPAA Compliant',\n    'cases.insurance.title': 'Insurance',\n    'cases.insurance.description': 'Verify your eligibility for insurance without revealing sensitive financial information. Faster and more private underwriting process.',\n    'cases.insurance.verification': 'Instant Verification',\n    'cases.government.title': 'Government & Education',\n    'cases.government.description': 'Access government and educational services by verifying only necessary information. Guaranteed privacy in official procedures.',\n    'cases.government.compliance': 'Regulation Compliant',\n\n    // How It Works\n    'how.title': 'How IDShield Works',\n    'how.subtitle': 'Protect your identity in three simple steps with advanced blockchain technology.',\n    'how.step.1.title': 'Connect your Wallet',\n    'how.step.1.description': 'Link your Lace wallet to access IDShield and sign permissions.',\n    'how.step.2.title': 'Organize your Data',\n    'how.step.2.description': 'Store your information in 7 levels (0–6), from absolute privacy to ecosystem.',\n    'how.step.3.title': 'Generate ZK Proofs',\n    'how.step.3.description': 'Share verifiable attributes without revealing raw data (e.g., allergies or active coverage).',\n    'how.example.title': 'Use Case Example',\n    'how.example.subtitle': 'Patient–Doctor Flow (with permissions and audit)',\n    'how.example.request': 'Request: the clinic requests \"Level 1 and 2 read\" (allergies, previous diagnoses).',\n    'how.example.request.scope': 'Scope + time specified (e.g. 24 h).',\n    'how.example.auth': 'Authorization: you approve in your wallet and it\\'s registered in Midnight contracts.',\n    'how.example.auth.revoke': 'Revocable at any time.',\n    'how.example.record': 'Record: doctor uploads the evolution and a hash + auditable metadata is saved.',\n    'how.example.record.privacy': 'Without exposing your Level 0 data.',\n    'how.example.badge.1': '✓ Level-controlled reading',\n    'how.example.badge.2': '✓ ZK for attributes (allergies, coverage)',\n    'how.example.badge.3': '✓ Audit and revocation',\n\n    // Contact\n    'contact.title': 'Join the Future of Privacy',\n    'contact.subtitle': 'Be part of the revolution in personal data protection. Sign up for early access.',\n    'contact.form.name': 'Full Name',\n    'contact.form.email': 'Email',\n    'contact.form.message': 'Main Interest',\n    'contact.form.interest.placeholder': 'Select your main interest',\n    'contact.form.interest.personal': 'Personal Use',\n    'contact.form.interest.development': 'App Development',\n    'contact.form.interest.enterprise': 'Enterprise Integration',\n    'contact.form.interest.research': 'Research',\n    'contact.form.submit': 'Join Waitlist',\n    'contact.form.loading': 'Processing...',\n    'contact.form.privacy': 'By signing up, you agree to our privacy terms. No spam, promised.',\n    'contact.benefits.1': 'Total control of your data',\n    'contact.benefits.2': 'Zero-Knowledge Technology',\n    'contact.benefits.3': 'Cardano Integration',\n    'contact.benefits.4': 'Verified app marketplace',\n    \n    // ACE Framework\n    'ace.title': 'Framework',\n    'ace.title.highlight': 'ACE',\n    'ace.title.end': 'for Freedom',\n    'ace.subtitle': 'IDShield is aligned with the',\n    'ace.subtitle.challenge': 'ACE Freedom Challenge',\n    'ace.subtitle.hackathon': 'of Midnight Hackathon Buenos Aires: we protect',\n    'ace.subtitle.components': 'using ZK and private contracts on Midnight.',\n    'ace.association.title': 'Association',\n    'ace.association.description': 'Private connections and verified memberships with ZK in shared data vaults.',\n    'ace.association.example': 'Ex.: medical groups/insurers with minimum necessary access.',\n    'ace.commerce.title': 'Commerce',\n    'ace.commerce.description': 'Private transactions/validations with',\n    'ace.commerce.description.highlight': 'selective disclosure',\n    'ace.commerce.description.end': 'and permission control.',\n    'ace.commerce.example': 'Ex.: active policy or solvency without revealing complete document.',\n    'ace.expression.title': 'Expression',\n    'ace.expression.description': 'Anonymous publications, surveys and credentials with verifiable proofs.',\n    'ace.expression.example': 'Ex.: anonymous attestations with proof of eligibility.',\n    'ace.coverage.title': 'Midnight Hackathon Buenos Aires Coverage',\n    'ace.coverage.description': 'We comply with the',\n    'ace.coverage.tracks': '3 ACE tracks',\n    'ace.coverage.components': '≥ 2 required components',\n    'ace.coverage.description.end': '.',\n    'ace.zk.verification': 'ZK Verification:',\n    'ace.zk.description': 'attribute proofs (age, policy, membership).',\n    'ace.secure.sharing': 'Secure Data Sharing:',\n    'ace.secure.description': 'selective disclosure and revocation.',\n    'ace.openzeppelin.integration': 'OpenZeppelin Integration:',\n    'ace.openzeppelin.description': 'roles/pausable & secure contracts.',\n    'ace.developer.tooling': 'Developer Tooling:',\n    'ace.developer.description': 'generator/CLI for ZK flows (demo).',\n    'ace.cta.demo': 'Try Demo',\n    'ace.demo.description': 'The demo simulates Lace connection and ZK proof generation.',\n\n    // Footer\n    'footer.description': 'Protecting your digital identity with advanced blockchain technology and Zero-Knowledge proofs.',\n    'footer.product': 'Product',\n    'footer.support': 'Support',\n    'footer.features': 'Features',\n    'footer.security': 'Security',\n    'footer.integration': 'Integration',\n    'footer.api': 'API Docs',\n    'footer.documentation': 'Documentation',\n    'footer.help': 'Help',\n    'footer.contact': 'Contact',\n    'footer.status': 'Status',\n    'footer.privacy': 'Privacy',\n    'footer.terms': 'Terms',\n    'footer.cookies': 'Cookies',\n    'footer.copyright': '© 2025 IDShield is a trademark of',\n    'footer.rights': '. All rights reserved.',\n    'footer.hackathon': 'Product created for the Midnight Buenos Aires hackathon',\n    'footer.coming.soon': 'Coming Soon',\n\n    // Waitlist Modal\n    'waitlist.title': 'Join the Waitlist',\n    'waitlist.subtitle': 'Be among the first to access IDShield when it becomes available.',\n    'waitlist.form.name': 'Full name',\n    'waitlist.form.email': 'Email address',\n    'waitlist.form.company': 'Company (optional)',\n    'waitlist.form.interest': 'Area of interest',\n    'waitlist.form.interest.health': 'Digital Health',\n    'waitlist.form.interest.insurance': 'Insurance',\n    'waitlist.form.interest.government': 'Government',\n    'waitlist.form.interest.education': 'Education',\n    'waitlist.form.interest.other': 'Other',\n    'waitlist.form.submit': 'Join Waitlist',\n    'waitlist.success': 'Thank you! We\\'ve added you to the waitlist.',\n    'waitlist.error': 'Error sending. Please try again.',\n\n    // Privacy Policy\n    'privacy.page.title': 'IDShield – Privacy & Data Protection Terms',\n    'privacy.page.effective': 'Effective Date: August 24, 2025',\n    'privacy.page.tagline': 'Your Privacy, Your Control',\n    'privacy.page.intro': 'IDShield is designed to give you full control over your personal information. All data you choose to share is encrypted and, where applicable, secured with Zero-Knowledge proofs (ZK). We never access your raw private data.',\n    'privacy.page.collect.title': 'What Data We Collect',\n    'privacy.page.collect.voluntary': 'Voluntary information: Wallet address (e.g., Lace), email (if you join our waitlist), and preferences you provide.',\n    'privacy.page.collect.usage': 'Usage data: Non-identifiable analytics like page visits and interaction patterns, collected only to improve our site.',\n    'privacy.page.use.title': 'How Your Data is Used',\n    'privacy.page.use.operate': 'To operate and showcase the IDShield demo.',\n    'privacy.page.use.communicate': 'To communicate with you if you opt into our waitlist or events.',\n    'privacy.page.use.compliance': 'To ensure compliance with hackathon or legal requirements.',\n    'privacy.page.not.title': 'What We Do Not Do',\n    'privacy.page.not.sell': 'We do not sell, rent, or trade your data.',\n    'privacy.page.not.share': 'We do not share personal information with third parties without your explicit consent.',\n    'privacy.page.not.store': 'We do not store sensitive records (like health or insurance data) on our landing site; those are controlled by you inside IDShield\\'s decentralized vault.',\n    'privacy.page.security.title': 'Security',\n    'privacy.page.security.description': 'We use industry-standard encryption and ZK mechanisms to ensure privacy by design. Any proofs generated through the demo are simulated and do not expose real personal data.',\n    'privacy.page.rights.title': 'Your Rights',\n    'privacy.page.rights.description': 'You can request access or deletion of any information you provide (such as your email) at any time by contacting us: contact@idshield.cc',\n    'privacy.page.third.title': 'Third-Party Services',\n    'privacy.page.third.description': 'If our landing page uses analytics (e.g., privacy-respecting tools), cookies are minimal and only for essential functionality. You can opt out where applicable.',\n    'privacy.page.updates.title': 'Updates',\n    'privacy.page.updates.description': 'We may update these terms as our services evolve. Changes will be posted here with an updated date.',\n    'privacy.page.contact.info': 'Contact: For questions or concerns about your privacy, email us at contact@idshield.cc',\n\n    // Terms & Conditions\n    'terms.page.title': 'IDShield – Terms & Conditions',\n    'terms.page.effective': 'Effective Date: August 24, 2025',\n    'terms.page.acceptance.title': '1. Acceptance of Terms',\n    'terms.page.acceptance.description': 'By accessing or using the IDShield landing page, demo, or services, you agree to these Terms & Conditions and our Privacy Policy. If you do not agree, please do not use our site or demo.',\n    'terms.page.purpose.title': '2. Purpose of the Site',\n    'terms.page.purpose.intro': 'This landing page is intended to:',\n    'terms.page.purpose.info': 'Provide information about IDShield and its features.',\n    'terms.page.purpose.demo': 'Showcase a demo of our Zero-Knowledge privacy technology.',\n    'terms.page.purpose.waitlist': 'Allow visitors to join a waitlist or request updates.',\n    'terms.page.purpose.disclaimer': 'The demo and information provided are for demonstration and educational purposes only. They do not constitute legal, medical, or financial advice.',\n    'terms.page.eligibility.title': '3. Eligibility',\n    'terms.page.eligibility.description': 'Our services are available to individuals 18 years or older. By using our site, you confirm you meet this requirement.',\n    'terms.page.responsibilities.title': '4. User Responsibilities',\n    'terms.page.responsibilities.lawful': 'You agree to use our site and demo lawfully and respectfully.',\n    'terms.page.responsibilities.hack': 'Do not attempt to hack, disrupt, or misuse the demo or site infrastructure.',\n    'terms.page.responsibilities.info': 'You are responsible for any information you voluntarily provide (e.g., email for waitlist).',\n    'terms.page.intellectual.title': '5. Intellectual Property',\n    'terms.page.intellectual.description': 'All content on this site, including logos, designs, graphics, and text, is the property of IDShield or its licensors. You may not copy, reproduce, or distribute it without our prior written consent.',\n    'terms.page.thirdparty.title': '6. Third-Party Links',\n    'terms.page.thirdparty.description': 'Our site may include links to third-party sites or services (e.g., hackathon partners). We are not responsible for their content or practices.',\n    'terms.page.warranties.title': '7. Disclaimer of Warranties',\n    'terms.page.warranties.description': 'The IDShield demo is provided \"as is,\" without warranties of any kind, express or implied. We do not guarantee uninterrupted or error-free service, nor do we guarantee specific outcomes from using the demo.',\n    'terms.page.liability.title': '8. Limitation of Liability',\n    'terms.page.liability.intro': 'To the maximum extent permitted by law:',\n    'terms.page.liability.damages': 'IDShield is not liable for any damages, direct or indirect, resulting from your use of our landing page or demo.',\n    'terms.page.liability.data': 'Any data used in the demo is illustrative; real medical or insurance decisions should not rely on demo outputs.',\n    'terms.page.changes.title': '9. Changes to Terms',\n    'terms.page.changes.description': 'We may update these Terms from time to time. Updates will be posted here with a new effective date. Your continued use of our site after changes means you accept the updated terms.',\n    'terms.page.governing.title': '10. Governing Law',\n    'terms.page.governing.description': 'These Terms are governed by the laws of Argentina. Any disputes will be resolved in the competent courts of Buenos Aires, Argentina.',\n    'terms.page.contact.title': '11. Contact Us',\n    'terms.page.contact.description': 'For questions about these Terms, contact: contact@idshield.cc',\n  }\n};","size_bytes":38546},"client/src/pages/PrivacyPage.tsx":{"content":"import { useLanguage } from \"@/contexts/LanguageContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function PrivacyPage() {\n  const { t } = useLanguage();\n\n  const goBack = () => {\n    window.history.back();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 text-white\">\n      <div className=\"max-w-4xl mx-auto px-6 py-16\">\n        <Button \n          onClick={goBack}\n          variant=\"ghost\"\n          className=\"mb-8 text-slate-300 hover:text-white\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          {t('privacy.back') || (t('privacy.page.title').includes('Privacy') ? 'Back' : 'Volver')}\n        </Button>\n\n        <h1 className=\"text-4xl font-bold mb-8\">\n          {t('privacy.page.title')}\n        </h1>\n\n        <div className=\"prose prose-invert max-w-none\">\n          <p className=\"text-lg text-slate-300 mb-8\">\n            {t('privacy.page.effective')}\n          </p>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4 text-emerald-400\">\n              {t('privacy.page.tagline')}\n            </h2>\n            <p className=\"text-slate-300 mb-4\">\n              {t('privacy.page.intro')}\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('privacy.page.collect.title')}\n            </h2>\n            <ul className=\"text-slate-300 space-y-2\">\n              <li>• {t('privacy.page.collect.voluntary')}</li>\n              <li>• {t('privacy.page.collect.usage')}</li>\n            </ul>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('privacy.page.use.title')}\n            </h2>\n            <ul className=\"text-slate-300 space-y-2\">\n              <li>• {t('privacy.page.use.operate')}</li>\n              <li>• {t('privacy.page.use.communicate')}</li>\n              <li>• {t('privacy.page.use.compliance')}</li>\n            </ul>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('privacy.page.not.title')}\n            </h2>\n            <ul className=\"text-slate-300 space-y-2\">\n              <li>• {t('privacy.page.not.sell')}</li>\n              <li>• {t('privacy.page.not.share')}</li>\n              <li>• {t('privacy.page.not.store')}</li>\n            </ul>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('privacy.page.security.title')}\n            </h2>\n            <p className=\"text-slate-300 mb-4\">\n              {t('privacy.page.security.description')}\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('privacy.page.rights.title')}\n            </h2>\n            <p className=\"text-slate-300 mb-4\">\n              {t('privacy.page.rights.description')}\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('privacy.page.third.title')}\n            </h2>\n            <p className=\"text-slate-300 mb-4\">\n              {t('privacy.page.third.description')}\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('privacy.page.updates.title')}\n            </h2>\n            <p className=\"text-slate-300 mb-4\">\n              {t('privacy.page.updates.description')}\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <div className=\"bg-slate-800 border border-slate-700 rounded-lg p-6\">\n              <p className=\"text-slate-300\">\n                {t('privacy.page.contact.info')}\n              </p>\n            </div>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4026},"client/src/pages/TermsPage.tsx":{"content":"import { useLanguage } from \"@/contexts/LanguageContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function TermsPage() {\n  const { t } = useLanguage();\n\n  const goBack = () => {\n    window.history.back();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 text-white\">\n      <div className=\"max-w-4xl mx-auto px-6 py-16\">\n        <Button \n          onClick={goBack}\n          variant=\"ghost\"\n          className=\"mb-8 text-slate-300 hover:text-white\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          {t('terms.back') || (t('terms.page.title').includes('Terms') ? 'Back' : 'Volver')}\n        </Button>\n\n        <h1 className=\"text-4xl font-bold mb-8\">\n          {t('terms.page.title')}\n        </h1>\n\n        <div className=\"prose prose-invert max-w-none\">\n          <p className=\"text-lg text-slate-300 mb-8\">\n            {t('terms.page.effective')}\n          </p>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('terms.page.acceptance.title')}\n            </h2>\n            <p className=\"text-slate-300 mb-4\">\n              {t('terms.page.acceptance.description')}\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('terms.page.purpose.title')}\n            </h2>\n            <p className=\"text-slate-300 mb-4\">\n              {t('terms.page.purpose.intro')}\n            </p>\n            <ul className=\"text-slate-300 space-y-2 mb-4\">\n              <li>• {t('terms.page.purpose.info')}</li>\n              <li>• {t('terms.page.purpose.demo')}</li>\n              <li>• {t('terms.page.purpose.waitlist')}</li>\n            </ul>\n            <p className=\"text-slate-300 mb-4\">\n              {t('terms.page.purpose.disclaimer')}\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('terms.page.eligibility.title')}\n            </h2>\n            <p className=\"text-slate-300 mb-4\">\n              {t('terms.page.eligibility.description')}\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('terms.page.responsibilities.title')}\n            </h2>\n            <ul className=\"text-slate-300 space-y-2\">\n              <li>• {t('terms.page.responsibilities.lawful')}</li>\n              <li>• {t('terms.page.responsibilities.hack')}</li>\n              <li>• {t('terms.page.responsibilities.info')}</li>\n            </ul>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('terms.page.intellectual.title')}\n            </h2>\n            <p className=\"text-slate-300 mb-4\">\n              {t('terms.page.intellectual.description')}\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('terms.page.thirdparty.title')}\n            </h2>\n            <p className=\"text-slate-300 mb-4\">\n              {t('terms.page.thirdparty.description')}\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('terms.page.warranties.title')}\n            </h2>\n            <p className=\"text-slate-300 mb-4\">\n              {t('terms.page.warranties.description')}\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('terms.page.liability.title')}\n            </h2>\n            <p className=\"text-slate-300 mb-4\">\n              {t('terms.page.liability.intro')}\n            </p>\n            <ul className=\"text-slate-300 space-y-2\">\n              <li>• {t('terms.page.liability.damages')}</li>\n              <li>• {t('terms.page.liability.data')}</li>\n            </ul>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('terms.page.changes.title')}\n            </h2>\n            <p className=\"text-slate-300 mb-4\">\n              {t('terms.page.changes.description')}\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {t('terms.page.governing.title')}\n            </h2>\n            <p className=\"text-slate-300 mb-4\">\n              {t('terms.page.governing.description')}\n            </p>\n          </section>\n\n          <section className=\"mb-8\">\n            <div className=\"bg-slate-800 border border-slate-700 rounded-lg p-6\">\n              <h2 className=\"text-2xl font-semibold mb-4\">\n                {t('terms.page.contact.title')}\n              </h2>\n              <p className=\"text-slate-300\">\n                {t('terms.page.contact.description')}\n              </p>\n            </div>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5149}},"version":1}