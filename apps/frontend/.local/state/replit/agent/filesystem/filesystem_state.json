{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nIDShield is a privacy-focused identity and data management application that uses zero-knowledge proofs for secure data verification. The application allows users to manage their personal data in a secure vault, control access permissions, and generate cryptographic proofs without revealing sensitive information. It features a dashboard for monitoring privacy levels, managing access requests, and tracking audit logs.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe frontend is built with React and TypeScript using Vite as the build tool. It follows a component-based architecture with shadcn/ui components for consistent design. The application uses Wouter for client-side routing and TanStack Query for server state management. The UI is styled with Tailwind CSS and follows a modular component structure with reusable UI primitives.\n\n## Backend Architecture\nThe backend is an Express.js server with TypeScript that provides RESTful API endpoints. It uses a layered architecture with route handlers in `server/routes.ts` and a storage abstraction layer in `server/storage.ts`. The server includes middleware for request logging and error handling. The current implementation uses in-memory storage but is designed to be easily swapped with a database implementation.\n\n## Data Storage Solutions\nThe application is configured to use PostgreSQL with Drizzle ORM for database operations. The schema is defined in `shared/schema.ts` with tables for users, vault items, access requests, audit logs, and zero-knowledge proofs. The storage layer implements an interface-based design pattern that supports both in-memory storage (for development) and database persistence.\n\n## Authentication and Authorization Mechanisms\nThe application uses decentralized identity (DID) addresses for user identification. Each user has a unique DID address that serves as their identity anchor. The system implements privacy levels (0-6) that control data access and visibility. Session management is handled through PostgreSQL sessions using connect-pg-simple middleware.\n\n## Zero-Knowledge Proof System\nThe application integrates zero-knowledge proof capabilities for privacy-preserving data verification. Users can generate proofs for age verification, income ranges, and other sensitive data without revealing the actual values. The ZK proof system is designed to allow third parties to verify claims while maintaining user privacy.\n\n# External Dependencies\n\n## Database\n- **PostgreSQL**: Primary database using Neon serverless for cloud deployment\n- **Drizzle ORM**: Type-safe database client with migrations support\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n## UI Framework\n- **React**: Frontend framework with TypeScript support\n- **Vite**: Build tool and development server\n- **Wouter**: Lightweight client-side routing\n- **TanStack Query**: Server state management and caching\n\n## Component Library\n- **shadcn/ui**: Collection of reusable UI components built on Radix UI\n- **Radix UI**: Headless component library for accessibility\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Lucide React**: Icon library for consistent iconography\n\n## Development Tools\n- **TypeScript**: Static type checking across the full stack\n- **ESBuild**: Fast bundling for production builds\n- **PostCSS**: CSS processing with Tailwind integration\n- **date-fns**: Date manipulation and formatting utilities\n\n## Third-Party Services\n- **Replit**: Development environment with specialized plugins\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Google Fonts**: Typography with Inter font family","size_bytes":3708},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2991},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { \n  insertAccessRequestSchema,\n  insertAuditLogSchema,\n  insertZKProofSchema,\n  insertMedicalFormTokenSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // For development, we'll use a consistent user ID until authentication is implemented\n  const getCurrentUserId = () => \"current-user\";\n\n  // Profile update endpoint\n  app.patch(\"/api/profile\", async (req, res) => {\n    try {\n      const { fullName, email, phone, location, bio, userType } = req.body;\n      \n      // Validate required fields\n      if (!fullName || fullName.trim().length < 2) {\n        return res.status(400).json({ message: \"Full name is required and must be at least 2 characters\" });\n      }\n      \n      // Update user profile\n      const updateData: any = {\n        fullName: fullName.trim(),\n        email: email?.trim() || null,\n        phone: phone?.trim() || null,\n        location: location?.trim() || null,\n        bio: bio?.trim() || null,\n        updatedAt: new Date(),\n      };\n      \n      if (userType && (userType === \"citizen\" || userType === \"police\")) {\n        updateData.userType = userType;\n      }\n      \n      const currentUserId = getCurrentUserId();\n      const updatedUser = await storage.updateUser(currentUserId, updateData);\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: currentUserId,\n        action: \"profile_updated\",\n        description: \"Profile information updated\",\n        entityName: null,\n        privacyLevel: 1,\n      });\n\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Profile update error:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Dashboard data endpoint\n  app.get(\"/api/dashboard\", async (req, res) => {\n    try {\n      const currentUserId = getCurrentUserId();\n      const user = await storage.getUser(currentUserId);\n      \n      // If user doesn't exist, return empty data (clean slate)\n      if (!user) {\n        return res.json({\n          user: null,\n          vaultItems: [],\n          accessRequests: [],\n          auditLogs: [],\n          zkProofs: []\n        });\n      }\n\n      const [vaultItems, accessRequests, auditLogs, zkProofs] = await Promise.all([\n        storage.getVaultItems(currentUserId),\n        storage.getAccessRequests(currentUserId),\n        storage.getAuditLogs(currentUserId, 5),\n        storage.getZKProofs(currentUserId),\n      ]);\n\n      res.json({\n        user,\n        vaultItems,\n        accessRequests,\n        auditLogs,\n        zkProofs,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Access requests endpoints\n  app.get(\"/api/access-requests\", async (req, res) => {\n    try {\n      const requests = await storage.getAccessRequests(getCurrentUserId());\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/access-requests/:id/approve\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updatedRequest = await storage.updateAccessRequestStatus(id, \"approved\");\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: getCurrentUserId(),\n        action: \"access_granted\",\n        description: `Access granted to ${updatedRequest.requesterName}`,\n        entityName: updatedRequest.requesterName,\n        privacyLevel: updatedRequest.privacyLevel,\n      });\n\n      res.json(updatedRequest);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/access-requests/:id/deny\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updatedRequest = await storage.updateAccessRequestStatus(id, \"denied\");\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: getCurrentUserId(),\n        action: \"access_denied\",\n        description: `Access denied to ${updatedRequest.requesterName}`,\n        entityName: updatedRequest.requesterName,\n        privacyLevel: updatedRequest.privacyLevel,\n      });\n\n      res.json(updatedRequest);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/access-requests/:id/revoke\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updatedRequest = await storage.updateAccessRequestStatus(id, \"revoked\");\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: getCurrentUserId(),\n        action: \"access_revoked\",\n        description: `Access revoked from ${updatedRequest.requesterName}`,\n        entityName: updatedRequest.requesterName,\n        privacyLevel: updatedRequest.privacyLevel,\n      });\n\n      res.json(updatedRequest);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Grant access endpoint\n  app.post(\"/api/grant-access\", async (req, res) => {\n    try {\n      const validatedData = insertAccessRequestSchema.parse({\n        ...req.body,\n        userId: getCurrentUserId(),\n        status: \"approved\",\n      });\n\n      const request = await storage.createAccessRequest(validatedData);\n      await storage.updateAccessRequestStatus(request.id, \"approved\");\n\n      // Create audit log\n      await storage.createAuditLog({\n        userId: getCurrentUserId(),\n        action: \"access_granted\",\n        description: `Access granted to ${request.requesterName}`,\n        entityName: request.requesterName,\n        privacyLevel: request.privacyLevel,\n      });\n\n      res.json(request);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  // ZK Proof generation endpoint\n  app.post(\"/api/generate-proof\", async (req, res) => {\n    try {\n      const validatedData = insertZKProofSchema.parse({\n        ...req.body,\n        userId: getCurrentUserId(),\n      });\n\n      const proof = await storage.createZKProof(validatedData);\n\n      // Create audit log\n      await storage.createAuditLog({\n        userId: getCurrentUserId(),\n        action: \"zk_proof_generated\",\n        description: `ZK Proof generated for ${proof.proofType}`,\n        entityName: null,\n        privacyLevel: 2,\n      });\n\n      res.json(proof);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid proof data\" });\n    }\n  });\n\n  // ZK Proof verification endpoint\n  app.get(\"/api/verify-proof/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const proof = await storage.getZKProof(id);\n      \n      if (!proof) {\n        return res.json({ \n          valid: false, \n          error: \"Proof not found or may have expired\" \n        });\n      }\n\n      // Check if proof has expired (if expiration was set)\n      const attributes = proof.attributes as any;\n      if (attributes?.expiresInDays && attributes.expiresInDays > 0 && proof.createdAt) {\n        const createdDate = new Date(proof.createdAt);\n        const expirationDate = new Date(createdDate.getTime() + (attributes.expiresInDays * 24 * 60 * 60 * 1000));\n        \n        if (new Date() > expirationDate) {\n          return res.json({ \n            valid: false, \n            error: \"This proof has expired and is no longer valid\" \n          });\n        }\n      }\n\n      res.json({ \n        valid: true, \n        proof: {\n          id: proof.id,\n          proofType: proof.proofType,\n          proofResult: proof.proofResult,\n          createdAt: proof.createdAt,\n          attributes: proof.attributes\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ \n        valid: false, \n        error: \"Failed to verify proof\" \n      });\n    }\n  });\n\n  // Update privacy level endpoint\n  app.patch(\"/api/user/privacy-level\", async (req, res) => {\n    try {\n      const { privacyLevel } = req.body;\n      if (typeof privacyLevel !== 'number' || privacyLevel < 0 || privacyLevel > 6) {\n        return res.status(400).json({ message: \"Privacy level must be between 0 and 6\" });\n      }\n\n      const updatedUser = await storage.updateUser(getCurrentUserId(), { privacyLevel });\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: getCurrentUserId(),\n        action: \"privacy_level_updated\",\n        description: `Privacy level updated to ${privacyLevel}`,\n        entityName: null,\n        privacyLevel,\n      });\n\n      res.json(updatedUser);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Audit logs endpoint\n  app.get(\"/api/audit-logs\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const logs = await storage.getAuditLogs(getCurrentUserId(), limit);\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Settings update endpoint\n  app.patch(\"/api/settings\", async (req, res) => {\n    try {\n      const { \n        emailNotifications, \n        pushNotifications, \n        securityAlerts, \n        privacyLevel, \n        twoFactorAuth,\n        dataRetention,\n        autoLogout \n      } = req.body;\n\n      // Update user privacy level if provided\n      if (typeof privacyLevel === 'number' && privacyLevel >= 0 && privacyLevel <= 6) {\n        await storage.updateUser(getCurrentUserId(), { privacyLevel });\n        \n        // Create audit log for privacy level change\n        await storage.createAuditLog({\n          userId: getCurrentUserId(),\n          action: \"privacy_level_updated\",\n          description: `Privacy level updated to ${privacyLevel}`,\n          entityName: null,\n          privacyLevel,\n        });\n      }\n\n      // Create audit log for settings update\n      await storage.createAuditLog({\n        userId: getCurrentUserId(),\n        action: \"settings_updated\",\n        description: \"Account settings have been updated\",\n        entityName: null,\n        privacyLevel: 1,\n      });\n\n      res.json({ \n        success: true, \n        message: \"Settings updated successfully\",\n        settings: {\n          emailNotifications,\n          pushNotifications,\n          securityAlerts,\n          privacyLevel,\n          twoFactorAuth,\n          dataRetention,\n          autoLogout\n        }\n      });\n    } catch (error) {\n      console.error(\"Settings update error:\", error);\n      res.status(500).json({ message: \"Failed to update settings\" });\n    }\n  });\n\n  // Object storage endpoints\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Upload URL generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate upload URL\" });\n    }\n  });\n\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing object:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Medical Form Token endpoints\n  app.post(\"/api/medical-form-tokens\", async (req, res) => {\n    console.log(\"=== MEDICAL FORM TOKEN CREATION START ===\");\n    console.log(\"Request body:\", req.body);\n    try {\n      const parsedToken = insertMedicalFormTokenSchema.parse(req.body);\n      console.log(\"Parsed token:\", parsedToken);\n      const createdToken = await storage.createMedicalFormToken(parsedToken);\n      console.log(\"Created token object:\", createdToken);\n      const response = { \n        success: true,\n        token: createdToken.token,\n        id: createdToken.id,\n        expiresAt: createdToken.expiresAt\n      };\n      console.log(\"Sending response:\", response);\n      res.json(response);\n      console.log(\"=== MEDICAL FORM TOKEN CREATION END ===\");\n    } catch (error) {\n      console.error(\"Medical form token creation error:\", error);\n      res.status(500).json({ message: \"Failed to create medical form token\" });\n    }\n  });\n\n  app.get(\"/api/medical-form-tokens/:userId\", async (req, res) => {\n    try {\n      const tokens = await storage.getMedicalFormTokens(req.params.userId);\n      res.json(tokens);\n    } catch (error) {\n      console.error(\"Medical form tokens fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch medical form tokens\" });\n    }\n  });\n\n  app.get(\"/api/medical-form/:token\", async (req, res) => {\n    try {\n      const formToken = await storage.getMedicalFormTokenByToken(req.params.token);\n      if (!formToken) {\n        return res.status(404).json({ message: \"Form not found\" });\n      }\n      if (formToken.isUsed) {\n        return res.status(410).json({ message: \"Form has already been completed\" });\n      }\n      if (new Date() > formToken.expiresAt) {\n        return res.status(410).json({ message: \"Form has expired\" });\n      }\n      res.json(formToken);\n    } catch (error) {\n      console.error(\"Medical form fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch medical form\" });\n    }\n  });\n\n  app.post(\"/api/medical-form/:token/complete\", async (req, res) => {\n    try {\n      const formToken = await storage.getMedicalFormTokenByToken(req.params.token);\n      if (!formToken) {\n        return res.status(404).json({ message: \"Form not found\" });\n      }\n      if (formToken.isUsed) {\n        return res.status(410).json({ message: \"Form has already been completed\" });\n      }\n      if (new Date() > formToken.expiresAt) {\n        return res.status(410).json({ message: \"Form has expired\" });\n      }\n\n      const updatedToken = await storage.updateMedicalFormToken(formToken.id, {\n        isUsed: true,\n        completedAt: new Date(),\n        formData: req.body.formData,\n        doctorWalletAddress: req.body.doctorWalletAddress,\n        doctorName: req.body.doctorName,\n      });\n\n      // Create the vault item for the patient\n      const vaultItemData = {\n        userId: formToken.userId,\n        category: \"health\",\n        name: `${formToken.appointmentType} - ${req.body.doctorName}`,\n        privacyLevel: 0, // Maximum security for medical data\n        data: {\n          type: \"medical_appointment\",\n          appointmentType: formToken.appointmentType,\n          doctorName: req.body.doctorName,\n          doctorWalletAddress: req.body.doctorWalletAddress,\n          completedAt: new Date().toISOString(),\n          formData: req.body.formData,\n        },\n      };\n\n      const vaultItem = await storage.createVaultItem(vaultItemData);\n\n      res.json({ success: true, vaultItem, token: updatedToken });\n    } catch (error) {\n      console.error(\"Medical form completion error:\", error);\n      res.status(500).json({ message: \"Failed to complete medical form\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15421},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type VaultItem, \n  type InsertVaultItem,\n  type AccessRequest,\n  type InsertAccessRequest,\n  type AuditLog,\n  type InsertAuditLog,\n  type ZKProof,\n  type InsertZKProof,\n  type MedicalFormToken,\n  type InsertMedicalFormToken\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { DatabaseStorage } from \"./database-storage\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n\n  // Vault Items\n  getVaultItems(userId: string): Promise<VaultItem[]>;\n  getVaultItemsByCategory(userId: string, category: string): Promise<VaultItem[]>;\n  createVaultItem(item: InsertVaultItem): Promise<VaultItem>;\n\n  // Access Requests\n  getAccessRequests(userId: string): Promise<AccessRequest[]>;\n  createAccessRequest(request: InsertAccessRequest): Promise<AccessRequest>;\n  updateAccessRequestStatus(id: string, status: string, responseDate?: Date): Promise<AccessRequest>;\n\n  // Audit Logs\n  getAuditLogs(userId: string, limit?: number): Promise<AuditLog[]>;\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n\n  // ZK Proofs\n  getZKProofs(userId: string): Promise<ZKProof[]>;\n  createZKProof(proof: InsertZKProof): Promise<ZKProof>;\n  getZKProof(id: string): Promise<ZKProof | undefined>;\n\n  // Medical Form Tokens\n  getMedicalFormTokens(userId: string): Promise<MedicalFormToken[]>;\n  getMedicalFormTokenByToken(token: string): Promise<MedicalFormToken | undefined>;\n  createMedicalFormToken(token: InsertMedicalFormToken): Promise<MedicalFormToken>;\n  updateMedicalFormToken(id: string, updates: Partial<MedicalFormToken>): Promise<MedicalFormToken>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private vaultItems: Map<string, VaultItem>;\n  private accessRequests: Map<string, AccessRequest>;\n  private auditLogs: Map<string, AuditLog>;\n  private zkProofs: Map<string, ZKProof>;\n  private medicalFormTokens: Map<string, MedicalFormToken>;\n\n  constructor() {\n    this.users = new Map();\n    this.vaultItems = new Map();\n    this.accessRequests = new Map();\n    this.auditLogs = new Map();\n    this.zkProofs = new Map();\n    this.medicalFormTokens = new Map();\n\n    // Initialize with clean, empty data\n    this.initializeDemoData();\n  }\n\n  private initializeDemoData() {\n    // Application starts with clean, empty data\n    // All data will be created by actual users through the application\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser,\n      phone: insertUser.phone || null,\n      location: insertUser.location || null,\n      bio: insertUser.bio || null,\n      profilePicture: insertUser.profilePicture || null,\n      walletConnected: insertUser.walletConnected || null,\n      privacyLevel: insertUser.privacyLevel || null,\n      updatedAt: insertUser.updatedAt || null,\n      id,\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<Omit<User, 'id' | 'createdAt'>>): Promise<User> {\n    const existingUser = this.users.get(id);\n    if (!existingUser) {\n      throw new Error(\"User not found\");\n    }\n    const updatedUser = { ...existingUser, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getVaultItems(userId: string): Promise<VaultItem[]> {\n    return Array.from(this.vaultItems.values()).filter(item => item.userId === userId);\n  }\n\n  async getVaultItemsByCategory(userId: string, category: string): Promise<VaultItem[]> {\n    return Array.from(this.vaultItems.values()).filter(\n      item => item.userId === userId && item.category === category\n    );\n  }\n\n  async createVaultItem(insertItem: InsertVaultItem): Promise<VaultItem> {\n    const id = randomUUID();\n    const item: VaultItem = {\n      ...insertItem,\n      data: insertItem.data || {},\n      id,\n      createdAt: new Date(),\n    };\n    this.vaultItems.set(id, item);\n    return item;\n  }\n\n  async getAccessRequests(userId: string): Promise<AccessRequest[]> {\n    return Array.from(this.accessRequests.values())\n      .filter(request => request.userId === userId)\n      .sort((a, b) => (b.requestDate?.getTime() || 0) - (a.requestDate?.getTime() || 0));\n  }\n\n  async createAccessRequest(insertRequest: InsertAccessRequest): Promise<AccessRequest> {\n    const id = randomUUID();\n    const request: AccessRequest = {\n      ...insertRequest,\n      status: insertRequest.status || null,\n      id,\n      requestDate: new Date(),\n      responseDate: null,\n    };\n    this.accessRequests.set(id, request);\n    return request;\n  }\n\n  async updateAccessRequestStatus(id: string, status: string, responseDate?: Date): Promise<AccessRequest> {\n    const existingRequest = this.accessRequests.get(id);\n    if (!existingRequest) {\n      throw new Error(\"Access request not found\");\n    }\n    const updatedRequest = { \n      ...existingRequest, \n      status, \n      responseDate: responseDate || new Date() \n    };\n    this.accessRequests.set(id, updatedRequest);\n    return updatedRequest;\n  }\n\n  async getAuditLogs(userId: string, limit: number = 10): Promise<AuditLog[]> {\n    return Array.from(this.auditLogs.values())\n      .filter(log => log.userId === userId)\n      .sort((a, b) => (b.timestamp?.getTime() || 0) - (a.timestamp?.getTime() || 0))\n      .slice(0, limit);\n  }\n\n  async createAuditLog(insertLog: InsertAuditLog): Promise<AuditLog> {\n    const id = randomUUID();\n    const log: AuditLog = {\n      ...insertLog,\n      privacyLevel: insertLog.privacyLevel || null,\n      entityName: insertLog.entityName || null,\n      id,\n      timestamp: new Date(),\n    };\n    this.auditLogs.set(id, log);\n    return log;\n  }\n\n  async getZKProofs(userId: string): Promise<ZKProof[]> {\n    return Array.from(this.zkProofs.values())\n      .filter(proof => proof.userId === userId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async createZKProof(insertProof: InsertZKProof): Promise<ZKProof> {\n    const id = randomUUID();\n    const proof: ZKProof = {\n      ...insertProof,\n      attributes: insertProof.attributes || {},\n      id,\n      createdAt: new Date(),\n    };\n    this.zkProofs.set(id, proof);\n    return proof;\n  }\n\n  async getZKProof(id: string): Promise<ZKProof | undefined> {\n    return this.zkProofs.get(id);\n  }\n\n  // Medical Form Token methods\n  async getMedicalFormTokens(userId: string): Promise<MedicalFormToken[]> {\n    return Array.from(this.medicalFormTokens.values()).filter(token => token.userId === userId);\n  }\n\n  async getMedicalFormTokenByToken(token: string): Promise<MedicalFormToken | undefined> {\n    return Array.from(this.medicalFormTokens.values()).find(t => t.token === token);\n  }\n\n  async createMedicalFormToken(tokenData: InsertMedicalFormToken): Promise<MedicalFormToken> {\n    const id = randomUUID();\n    const newToken: MedicalFormToken = {\n      ...tokenData,\n      id,\n      createdAt: new Date(),\n      isUsed: null,\n      doctorWalletAddress: null,\n      doctorName: null,\n      completedAt: null,\n      formData: null,\n    };\n    this.medicalFormTokens.set(id, newToken);\n    return newToken;\n  }\n\n  async updateMedicalFormToken(id: string, updates: Partial<MedicalFormToken>): Promise<MedicalFormToken> {\n    const token = this.medicalFormTokens.get(id);\n    if (!token) {\n      throw new Error(\"Medical form token not found\");\n    }\n    const updatedToken = { ...token, ...updates };\n    this.medicalFormTokens.set(id, updatedToken);\n    return updatedToken;\n  }\n}\n\n// ⚠️  IMPORTANT: DATA STORAGE CONFIGURATION\n// \n// Currently using MemStorage - all data is lost when server restarts!\n// This is only suitable for development/testing.\n//\n// For persistent data storage in production:\n// 1. Comment out the MemStorage line below\n// 2. Uncomment the DatabaseStorage line \n// 3. Run: npm run db:push\n// \n// export const storage = new DatabaseStorage();  // <-- Use this for persistent data\nexport const storage = new MemStorage();           // <-- Currently active (temporary data)\n","size_bytes":8508},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  fullName: text(\"full_name\").notNull(),\n  phone: text(\"phone\"),\n  location: text(\"location\"),\n  bio: text(\"bio\"),\n  profilePicture: text(\"profile_picture\"),\n  didAddress: text(\"did_address\").notNull(),\n  walletConnected: boolean(\"wallet_connected\").default(true),\n  userType: text(\"user_type\").default(\"citizen\"), // citizen, police\n  privacyLevel: integer(\"privacy_level\").default(4),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const vaultItems = pgTable(\"vault_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  category: text(\"category\").notNull(), // health, insurance, ids\n  name: text(\"name\").notNull(),\n  privacyLevel: integer(\"privacy_level\").notNull(),\n  data: jsonb(\"data\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const accessRequests = pgTable(\"access_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  requesterName: text(\"requester_name\").notNull(),\n  requesterEmail: text(\"requester_email\").notNull(),\n  dataRequested: text(\"data_requested\").notNull(),\n  purpose: text(\"purpose\").notNull(),\n  status: text(\"status\").default(\"pending\"), // pending, approved, denied, revoked\n  privacyLevel: integer(\"privacy_level\").notNull(),\n  requestDate: timestamp(\"request_date\").defaultNow(),\n  responseDate: timestamp(\"response_date\"),\n});\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  action: text(\"action\").notNull(),\n  description: text(\"description\").notNull(),\n  entityName: text(\"entity_name\"),\n  privacyLevel: integer(\"privacy_level\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const zkProofs = pgTable(\"zk_proofs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  proofType: text(\"proof_type\").notNull(),\n  attributes: jsonb(\"attributes\"),\n  proofResult: text(\"proof_result\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Medical form tokens for shareable health forms\nexport const medicalFormTokens = pgTable(\"medical_form_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  token: text(\"token\").notNull().unique(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  patientName: text(\"patient_name\").notNull(),\n  appointmentType: text(\"appointment_type\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  isUsed: boolean(\"is_used\").default(false),\n  doctorWalletAddress: text(\"doctor_wallet_address\"),\n  doctorName: text(\"doctor_name\"),\n  completedAt: timestamp(\"completed_at\"),\n  formData: jsonb(\"form_data\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVaultItemSchema = createInsertSchema(vaultItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAccessRequestSchema = createInsertSchema(accessRequests).omit({\n  id: true,\n  requestDate: true,\n  responseDate: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertZKProofSchema = createInsertSchema(zkProofs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMedicalFormTokenSchema = createInsertSchema(medicalFormTokens).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  expiresAt: z.string().transform((str) => new Date(str)),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type VaultItem = typeof vaultItems.$inferSelect;\nexport type InsertVaultItem = z.infer<typeof insertVaultItemSchema>;\nexport type AccessRequest = typeof accessRequests.$inferSelect;\nexport type InsertAccessRequest = z.infer<typeof insertAccessRequestSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type ZKProof = typeof zkProofs.$inferSelect;\nexport type InsertZKProof = z.infer<typeof insertZKProofSchema>;\nexport type MedicalFormToken = typeof medicalFormTokens.$inferSelect;\nexport type InsertMedicalFormToken = z.infer<typeof insertMedicalFormTokenSchema>;\n","size_bytes":4957},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport Dashboard from \"@/pages/dashboard\";\nimport PoliceCheck from \"@/pages/police-check\";\nimport Profile from \"@/pages/profile\";\nimport AccessRequests from \"@/pages/access-requests\";\nimport AuditLog from \"@/pages/audit-log\";\nimport Settings from \"@/pages/settings\";\nimport PrivacyLevels from \"@/pages/privacy-levels\";\nimport HealthVault from \"@/pages/vault/health\";\nimport InsuranceVault from \"@/pages/vault/insurance\";\nimport IDsVault from \"@/pages/vault/ids\";\nimport ZKProofs from \"@/pages/zk-proofs\";\nimport Login from \"@/pages/login\";\nimport MedicalForm from \"@/pages/medical-form\";\nimport VerifyProof from \"@/pages/verify-proof\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Login} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/police-check\" component={PoliceCheck} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/access-requests\" component={AccessRequests} />\n      <Route path=\"/audit-log\" component={AuditLog} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/privacy-levels\" component={PrivacyLevels} />\n      <Route path=\"/vault/health\" component={HealthVault} />\n      <Route path=\"/vault/insurance\" component={InsuranceVault} />\n      <Route path=\"/vault/ids\" component={IDsVault} />\n      <Route path=\"/zk-proofs\" component={ZKProofs} />\n      <Route path=\"/medical-form/:token\" component={MedicalForm} />\n      <Route path=\"/verify-proof/:id\" component={VerifyProof} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2266},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(240 10% 9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(240 10% 9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(240 10% 9%);\n  --primary: hsl(220 83% 35%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(220 14% 42%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(142 71% 45%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(220 83% 35%);\n  --warning: hsl(38 92% 50%);\n  --warning-foreground: hsl(0 0% 100%);\n  --success: hsl(142 71% 45%);\n  --success-foreground: hsl(0 0% 100%);\n  --chart-1: hsl(220 83% 35%);\n  --chart-2: hsl(142 71% 45%);\n  --chart-3: hsl(38 92% 50%);\n  --chart-4: hsl(0 84% 60%);\n  --chart-5: hsl(271 91% 65%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(240 10% 9%);\n  --sidebar-primary: hsl(220 83% 35%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(220 83% 35%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(220 83% 35%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(224 71% 4%);\n  --foreground: hsl(213 31% 91%);\n  --card: hsl(224 71% 4%);\n  --card-foreground: hsl(213 31% 91%);\n  --popover: hsl(224 71% 4%);\n  --popover-foreground: hsl(213 31% 91%);\n  --primary: hsl(220 91% 58%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(215 27% 17%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(215 27% 17%);\n  --muted-foreground: hsl(217 32% 65%);\n  --accent: hsl(142 71% 45%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(215 27% 17%);\n  --input: hsl(215 27% 17%);\n  --ring: hsl(220 91% 58%);\n  --warning: hsl(38 92% 50%);\n  --warning-foreground: hsl(0 0% 100%);\n  --success: hsl(142 71% 45%);\n  --success-foreground: hsl(0 0% 100%);\n  --chart-1: hsl(220 91% 58%);\n  --chart-2: hsl(142 71% 45%);\n  --chart-3: hsl(38 92% 50%);\n  --chart-4: hsl(0 84% 60%);\n  --chart-5: hsl(271 91% 65%);\n  --sidebar: hsl(224 71% 4%);\n  --sidebar-foreground: hsl(213 31% 91%);\n  --sidebar-primary: hsl(220 91% 58%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(215 27% 17%);\n  --sidebar-accent-foreground: hsl(220 91% 58%);\n  --sidebar-border: hsl(215 27% 17%);\n  --sidebar-ring: hsl(220 91% 58%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* IDShield Brand Color Glow Effect */\n@keyframes rgb-glow {\n  0% {\n    box-shadow: 0 0 20px 2px hsl(220, 83%, 35%); /* Primary Blue */\n  }\n  20% {\n    box-shadow: 0 0 20px 2px hsl(142, 71%, 45%); /* Accent Green */\n  }\n  40% {\n    box-shadow: 0 0 20px 2px hsl(38, 92%, 50%); /* Warning Orange */\n  }\n  60% {\n    box-shadow: 0 0 20px 2px hsl(0, 84%, 60%); /* Destructive Red */\n  }\n  80% {\n    box-shadow: 0 0 20px 2px hsl(271, 91%, 65%); /* Purple */\n  }\n  100% {\n    box-shadow: 0 0 20px 2px hsl(220, 83%, 35%); /* Back to Blue */\n  }\n}\n\n.glow-card {\n  animation: rgb-glow 4s ease-in-out infinite;\n  transition: all 0.3s ease;\n}\n\n.glow-card:hover {\n  animation-duration: 2s;\n  box-shadow: 0 0 30px 4px hsl(220, 83%, 35%) !important;\n}\n\n/* Dark mode adjustments for glow */\n@media (prefers-color-scheme: dark) {\n  @keyframes rgb-glow {\n    0% {\n      box-shadow: 0 0 25px 3px hsl(220, 83%, 55%); /* Brighter Blue */\n    }\n    20% {\n      box-shadow: 0 0 25px 3px hsl(142, 71%, 65%); /* Brighter Green */\n    }\n    40% {\n      box-shadow: 0 0 25px 3px hsl(38, 92%, 60%); /* Brighter Orange */\n    }\n    60% {\n      box-shadow: 0 0 25px 3px hsl(0, 84%, 70%); /* Brighter Red */\n    }\n    80% {\n      box-shadow: 0 0 25px 3px hsl(271, 91%, 75%); /* Brighter Purple */\n    }\n    100% {\n      box-shadow: 0 0 25px 3px hsl(220, 83%, 55%); /* Back to Brighter Blue */\n    }\n  }\n  \n  .glow-card:hover {\n    box-shadow: 0 0 35px 5px hsl(220, 83%, 55%) !important;\n  }\n}\n\n@layer utilities {\n  .privacy-level-0 { @apply bg-gray-100 text-gray-600; }\n  .privacy-level-1 { @apply bg-blue-100 text-blue-600; }\n  .privacy-level-2 { @apply bg-green-100 text-green-600; }\n  .privacy-level-3 { @apply bg-yellow-100 text-yellow-600; }\n  .privacy-level-4 { @apply bg-orange-100 text-orange-600; }\n  .privacy-level-5 { @apply bg-red-100 text-red-600; }\n  .privacy-level-6 { @apply bg-purple-100 text-purple-600; }\n}\n","size_bytes":4871},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"idshield-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};","size_bytes":1608},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/dashboard/header\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\nimport ProfileWalletCard from \"@/components/dashboard/profile-wallet-card\";\nimport ShieldMeter from \"@/components/dashboard/shield-meter\";\nimport QuickActions from \"@/components/dashboard/quick-actions\";\nimport AccessRequestsTable from \"@/components/dashboard/access-requests-table\";\nimport RecentActivity from \"@/components/dashboard/recent-activity\";\nimport OnboardingModal from \"@/components/onboarding-modal\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { User, VaultItem, AccessRequest, AuditLog } from \"@shared/schema\";\n\ninterface DashboardData {\n  user: User;\n  vaultItems: VaultItem[];\n  accessRequests: AccessRequest[];\n  auditLogs: AuditLog[];\n}\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const [showOnboarding, setShowOnboarding] = useState(false);\n  const { data: dashboardData, isLoading, error } = useQuery<DashboardData>({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  const pendingRequests = dashboardData?.accessRequests?.filter(req => req.status === \"pending\") || [];\n\n  // Check if user needs onboarding (first-time user)\n  const needsOnboarding = dashboardData?.user && (\n    !dashboardData.user.fullName || \n    dashboardData.user.fullName.trim() === \"\" ||\n    dashboardData.user.fullName === \"John Doe\" // Default demo name\n  );\n\n  // Check authentication on mount\n  useEffect(() => {\n    const session = localStorage.getItem('idshield_session');\n    if (!session) {\n      setLocation('/login');\n    }\n  }, [setLocation]);\n\n  // Show onboarding modal for first-time users\n  useEffect(() => {\n    if (needsOnboarding && !isLoading) {\n      setShowOnboarding(true);\n    }\n  }, [needsOnboarding, isLoading]);\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-destructive mb-2\">Error Loading Dashboard</h1>\n          <p className=\"text-muted-foreground\">Please try refreshing the page</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header user={dashboardData?.user} pendingRequestsCount={pendingRequests.length} />\n      \n      <div className=\"flex pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 ml-64 p-6 space-y-6\">\n          {isLoading ? (\n            <div className=\"space-y-6\">\n              <Skeleton className=\"h-32 w-full\" />\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Skeleton className=\"h-96 w-full\" />\n                <Skeleton className=\"h-96 w-full\" />\n              </div>\n              <Skeleton className=\"h-64 w-full\" />\n              <Skeleton className=\"h-48 w-full\" />\n            </div>\n          ) : dashboardData ? (\n            <>\n              <ProfileWalletCard user={dashboardData.user} />\n              \n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <ShieldMeter \n                  user={dashboardData.user} \n                  vaultItems={dashboardData.vaultItems || []} \n                />\n                <QuickActions />\n              </div>\n              \n              <AccessRequestsTable accessRequests={dashboardData.accessRequests || []} />\n              \n              <RecentActivity auditLogs={dashboardData.auditLogs || []} />\n            </>\n          ) : null}\n        </main>\n      </div>\n\n      {/* Onboarding Modal */}\n      {dashboardData?.user && (\n        <OnboardingModal\n          open={showOnboarding}\n          onComplete={() => setShowOnboarding(false)}\n          user={dashboardData.user}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":3902},"client/src/pages/login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport logoImage from \"@assets/horizontal_1756043627119.png\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Wallet,\n  Shield,\n  CheckCircle,\n  AlertTriangle,\n  XCircle,\n  Eye,\n  Zap\n} from \"lucide-react\";\n\ninterface LaceAPI {\n  enable(): Promise<any>;\n  getNetworkId(): Promise<number>;\n  getUsedAddresses(): Promise<string[]>;\n  getUnusedAddresses(): Promise<string[]>;\n  signData(address: string, payload: Uint8Array): Promise<{ key: string; signature: string }>;\n}\n\ninterface SignInPayload {\n  address: string;\n  nonce: string;\n  signature: string;\n  key: string;\n}\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [status, setStatus] = useState<{ message: string; type: 'idle' | 'success' | 'warning' | 'error' }>({\n    message: 'waiting...',\n    type: 'idle'\n  });\n  const [session, setSession] = useState<SignInPayload | null>(null);\n  const [debug, setDebug] = useState<any>(null);\n  const [api, setApi] = useState<any>(null);\n  const [address, setAddress] = useState<string | null>(null);\n  const [checkState, setCheckState] = useState<'idle' | 'verifying'>('idle');\n\n  // Helper functions\n  const hexToUtf8 = (hex: string) => {\n    const bytes = hex.match(/.{1,2}/g)?.map(byte => parseInt(byte, 16)) || [];\n    return new TextDecoder().decode(new Uint8Array(bytes));\n  };\n\n  const toHex = (u8: Uint8Array) => \n    Array.from(u8).map(b => b.toString(16).padStart(2, '0')).join('');\n\n  const randomNonce = () => crypto.getRandomValues(new Uint8Array(24));\n\n  const handleDetect = () => {\n    const found = !!(window as any).cardano?.lace;\n    setStatus({\n      message: found ? 'Lace detected' : 'Lace NOT detected',\n      type: found ? 'success' : 'warning'\n    });\n  };\n\n\n  const handleConnectAndSignIn = async () => {\n    try {\n      setCheckState('verifying');\n      \n      // Step 1: Connect to wallet if not already connected\n      if (!api) {\n        if (!(window as any).cardano?.lace) {\n          throw new Error('Lace not found. Install the extension.');\n        }\n\n        const laceApi = await (window as any).cardano.lace.enable();\n        const networkId = await laceApi.getNetworkId();\n        const used = await laceApi.getUsedAddresses();\n        const unused = await laceApi.getUnusedAddresses();\n        const walletAddress = (used[0] ?? unused[0]) || null;\n\n        setApi(laceApi);\n        setAddress(walletAddress);\n        \n        setDebug({\n          networkId,\n          usedCount: used.length,\n          hasUnused: !!unused.length,\n          address: walletAddress\n        });\n\n        // Use the newly connected API and address\n        const currentApi = laceApi;\n        const currentAddress = walletAddress;\n\n        // Step 2: Sign in with the connected wallet\n        if (!currentApi || !currentAddress) {\n          throw new Error('Failed to connect wallet.');\n        }\n\n        // Create a nonce and sign the message\n        const nonce = randomNonce();\n        const nonceHex = toHex(nonce);\n        const messageText = `IDShield Login\\nnonce:${nonceHex}\\norigin:${location.origin}`;\n        const messageBytes = new TextEncoder().encode(messageText);\n        const messageHex = toHex(messageBytes);\n\n        // CIP-30 signData expects hex string for the payload\n        const sig = await currentApi.signData(currentAddress, messageHex);\n\n        const payload: SignInPayload = {\n          address: currentAddress,\n          nonce: nonceHex,\n          signature: sig.signature,\n          key: sig.key\n        };\n\n        setStatus({\n          message: 'Signed in successfully! Redirecting to dashboard...',\n          type: 'success'\n        });\n        \n        setSession(payload);\n\n        // Store session and redirect\n        setTimeout(() => {\n          localStorage.setItem('idshield_session', JSON.stringify(payload));\n          setLocation('/dashboard');\n        }, 2000);\n\n      } else {\n        // Already connected, just sign in\n        if (!address) {\n          throw new Error('No wallet address found.');\n        }\n\n        // Create a nonce and sign the message\n        const nonce = randomNonce();\n        const nonceHex = toHex(nonce);\n        const messageText = `IDShield Login\\nnonce:${nonceHex}\\norigin:${location.origin}`;\n        const messageBytes = new TextEncoder().encode(messageText);\n        const messageHex = toHex(messageBytes);\n\n        // CIP-30 signData expects hex string for the payload\n        const sig = await api.signData(address, messageHex);\n\n        const payload: SignInPayload = {\n          address,\n          nonce: nonceHex,\n          signature: sig.signature,\n          key: sig.key\n        };\n\n        setStatus({\n          message: 'Signed in successfully! Redirecting to dashboard...',\n          type: 'success'\n        });\n        \n        setSession(payload);\n\n        // Store session and redirect\n        setTimeout(() => {\n          localStorage.setItem('idshield_session', JSON.stringify(payload));\n          setLocation('/dashboard');\n        }, 2000);\n      }\n\n    } catch (err: any) {\n      console.error(err);\n      setStatus({\n        message: `Connection/Sign-in failed: ${err.message}`,\n        type: 'error'\n      });\n    } finally {\n      setCheckState('idle');\n    }\n  };\n\n  useEffect(() => {\n    // Auto-detect on page load\n    handleDetect();\n  }, []);\n\n  const getStatusIcon = () => {\n    switch (status.type) {\n      case 'success': return <CheckCircle className=\"w-4 h-4\" />;\n      case 'warning': return <AlertTriangle className=\"w-4 h-4\" />;\n      case 'error': return <XCircle className=\"w-4 h-4\" />;\n      default: return <Eye className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (status.type) {\n      case 'success': return 'text-green-500';\n      case 'warning': return 'text-yellow-500';\n      case 'error': return 'text-red-500';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background dark:bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-2xl space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-3\">\n          <div className=\"flex items-center justify-center\">\n            <img \n              src={logoImage} \n              alt=\"ID Shield\" \n              className=\"h-16 w-auto\"\n              data-testid=\"logo-main\"\n            />\n          </div>\n          <p className=\"text-muted-foreground text-lg\">\n            Sign in with <strong>Lace Wallet</strong>\n          </p>\n          <p className=\"text-sm text-muted-foreground max-w-md mx-auto\">\n            Login for IDShield. Your private key never leaves the wallet.\n          </p>\n        </div>\n\n        {/* Main Card */}\n        <Card className=\"border-2 glow-card\" data-testid=\"card-login\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Wallet className=\"w-6 h-6\" />\n              <span>Wallet Authentication</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Action Buttons */}\n            <div className=\"flex flex-col gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={handleDetect}\n                data-testid=\"button-detect\"\n                className=\"w-full\"\n              >\n                <Zap className=\"w-4 h-4 mr-2\" />\n                Detect Lace\n              </Button>\n              <Button\n                onClick={handleConnectAndSignIn}\n                data-testid=\"button-connect-signin\"\n                className=\"w-full\"\n                disabled={checkState === \"verifying\"}\n              >\n                <Wallet className=\"w-4 h-4 mr-2\" />\n                {checkState === \"verifying\" ? \"Processing...\" : \"Connect & Sign In\"}\n              </Button>\n            </div>\n\n            {/* Status */}\n            <Alert data-testid=\"alert-status\">\n              <div className=\"flex items-center space-x-2\">\n                <div className={getStatusColor()}>\n                  {getStatusIcon()}\n                </div>\n                <AlertDescription className={getStatusColor()}>\n                  <strong>Status:</strong> {status.message}\n                </AlertDescription>\n              </div>\n            </Alert>\n\n            {/* Session Data */}\n            {session && (\n              <div className=\"space-y-2\">\n                <h3 className=\"text-lg font-semibold\">Session</h3>\n                <div className=\"bg-muted rounded-lg p-4 font-mono text-sm overflow-auto max-h-48\">\n                  <pre data-testid=\"session-data\">{JSON.stringify(session, null, 2)}</pre>\n                </div>\n              </div>\n            )}\n\n            {/* Debug Info */}\n            {debug && (\n              <div className=\"space-y-2\">\n                <h3 className=\"text-lg font-semibold\">Debug</h3>\n                <div className=\"bg-muted rounded-lg p-4 font-mono text-sm overflow-auto max-h-48\">\n                  <pre data-testid=\"debug-data\">{JSON.stringify(debug, null, 2)}</pre>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Help Text */}\n        <div className=\"text-center\">\n          <p className=\"text-sm text-white\">\n            💡 <strong>Tip:</strong> If Lace isn't detected, install the{' '}\n            <a \n              href=\"https://www.lace.io/\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-white underline hover:text-gray-200 transition-colors\"\n            >\n              wallet\n            </a>{' '}\n            extension and refresh.\n          </p>\n          <div className=\"mt-2\">\n            <a \n              href=\"https://lu.ma/4uq8yejo?tk=zxwwek\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"inline-block\"\n            >\n              <Badge variant=\"outline\" className=\"hover:bg-muted/50 transition-colors cursor-pointer\">\n                Product Develop for Midnight Hackathon Buenos Aires\n              </Badge>\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10440},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/police-check.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Scan, \n  Shield, \n  CheckCircle, \n  XCircle, \n  Clock, \n  User, \n  FileText,\n  Camera,\n  Hash\n} from \"lucide-react\";\n\ninterface VerificationEvent {\n  id: string;\n  timestamp: Date;\n  officerId: string;\n  result: \"valid\" | \"invalid\";\n  proofData?: string;\n  plateNumber?: string;\n  method: \"qr\" | \"plate\";\n}\n\ntype CheckState = \"await_scan\" | \"verifying\" | \"green_ok\" | \"red_fail\";\n\nexport default function PoliceCheck() {\n  const [, setLocation] = useLocation();\n  const [checkState, setCheckState] = useState<CheckState>(\"await_scan\");\n  const [qrInput, setQrInput] = useState(\"\");\n  const [plateInput, setPlateInput] = useState(\"\");\n  const [currentResult, setCurrentResult] = useState<{\n    isValid: boolean;\n    message: string;\n    proofType?: string;\n  } | null>(null);\n  const [eventLog, setEventLog] = useState<VerificationEvent[]>([]);\n  const [officerId] = useState(\"OFFICER_001\"); // In real app, this would come from auth\n  \n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  // Check authentication on mount\n  useEffect(() => {\n    const session = localStorage.getItem('idshield_session');\n    if (!session) {\n      setLocation('/login');\n    }\n  }, [setLocation]);\n\n  const mockVerifyZKProof = async (proofData: string): Promise<boolean> => {\n    // Simulate verification delay\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // Mock verification logic - in real app this would verify the actual ZK proof\n    // For demo, we'll consider proofs containing \"insurance\" as valid\n    return proofData.includes(\"insurance\") || proofData.includes(\"zk_proof\") || Math.random() > 0.3;\n  };\n\n  const mockVerifyPlate = async (plateNumber: string): Promise<boolean> => {\n    // Simulate plate lookup delay\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    // Mock plate verification - some plates are valid\n    const validPlates = [\"ABC123\", \"XYZ789\", \"DEF456\"];\n    return validPlates.includes(plateNumber.toUpperCase()) || Math.random() > 0.4;\n  };\n\n  const logEvent = (result: \"valid\" | \"invalid\", method: \"qr\" | \"plate\", data?: string) => {\n    const event: VerificationEvent = {\n      id: `evt_${Date.now()}`,\n      timestamp: new Date(),\n      officerId,\n      result,\n      method,\n      proofData: method === \"qr\" ? data : undefined,\n      plateNumber: method === \"plate\" ? data : undefined,\n    };\n    \n    setEventLog(prev => [event, ...prev.slice(0, 9)]); // Keep last 10 events\n  };\n\n  const handleQRScan = async () => {\n    if (!qrInput.trim()) return;\n    \n    setCheckState(\"verifying\");\n    \n    try {\n      const isValid = await mockVerifyZKProof(qrInput);\n      \n      setCurrentResult({\n        isValid,\n        message: isValid \n          ? \"Coverage valid - Policy is active\" \n          : \"Invalid or expired coverage\",\n        proofType: \"Insurance Coverage\"\n      });\n      \n      logEvent(isValid ? \"valid\" : \"invalid\", \"qr\", qrInput);\n      setCheckState(isValid ? \"green_ok\" : \"red_fail\");\n      \n      // Auto reset after 3 seconds\n      setTimeout(() => {\n        setCheckState(\"await_scan\");\n        setQrInput(\"\");\n        setCurrentResult(null);\n      }, 3000);\n      \n    } catch (error) {\n      setCurrentResult({\n        isValid: false,\n        message: \"Error verifying proof\"\n      });\n      setCheckState(\"red_fail\");\n      logEvent(\"invalid\", \"qr\", qrInput);\n    }\n  };\n\n  const handlePlateScan = async () => {\n    if (!plateInput.trim()) return;\n    \n    setCheckState(\"verifying\");\n    \n    try {\n      const isValid = await mockVerifyPlate(plateInput);\n      \n      setCurrentResult({\n        isValid,\n        message: isValid \n          ? \"Vehicle registration valid\" \n          : \"Invalid or expired registration\",\n      });\n      \n      logEvent(isValid ? \"valid\" : \"invalid\", \"plate\", plateInput.toUpperCase());\n      setCheckState(isValid ? \"green_ok\" : \"red_fail\");\n      \n      // Auto reset after 3 seconds\n      setTimeout(() => {\n        setCheckState(\"await_scan\");\n        setPlateInput(\"\");\n        setCurrentResult(null);\n      }, 3000);\n      \n    } catch (error) {\n      setCurrentResult({\n        isValid: false,\n        message: \"Error verifying plate\"\n      });\n      setCheckState(\"red_fail\");\n      logEvent(\"invalid\", \"plate\", plateInput);\n    }\n  };\n\n  const getStateDisplay = () => {\n    switch (checkState) {\n      case \"await_scan\":\n        return {\n          title: \"Ready to Scan\",\n          description: \"Scan QR code or enter plate number\",\n          color: \"bg-blue-500\",\n          icon: Scan\n        };\n      case \"verifying\":\n        return {\n          title: \"Verifying...\",\n          description: \"Checking proof validity\",\n          color: \"bg-yellow-500\",\n          icon: Clock\n        };\n      case \"green_ok\":\n        return {\n          title: \"VALID ✅\",\n          description: currentResult?.message || \"Verification successful\",\n          color: \"bg-green-500\",\n          icon: CheckCircle\n        };\n      case \"red_fail\":\n        return {\n          title: \"INVALID ❌\",\n          description: currentResult?.message || \"Verification failed\",\n          color: \"bg-red-500\",\n          icon: XCircle\n        };\n    }\n  };\n\n  const stateInfo = getStateDisplay();\n  const StateIcon = stateInfo.icon;\n\n  return (\n    <div className=\"min-h-screen bg-background dark:bg-background p-4\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-2\">\n          <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"title-police-check\">\n            Police Verification Panel\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Scan QR codes or verify license plates for coverage validation\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Main Verification Panel */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Current State Display */}\n            <Card className=\"border-2\" data-testid=\"card-verification-state\">\n              <CardContent className=\"p-8 text-center\">\n                <div className={`w-24 h-24 mx-auto rounded-full flex items-center justify-center mb-4 ${stateInfo.color}`}>\n                  <StateIcon className=\"w-12 h-12 text-white\" />\n                </div>\n                <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"text-state-title\">\n                  {stateInfo.title}\n                </h2>\n                <p className=\"text-muted-foreground text-lg\" data-testid=\"text-state-description\">\n                  {stateInfo.description}\n                </p>\n                {currentResult?.proofType && (\n                  <Badge variant=\"outline\" className=\"mt-2\">\n                    {currentResult.proofType}\n                  </Badge>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Scanning Interface */}\n            {checkState === \"await_scan\" && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {/* QR Code Scanner */}\n                <Card data-testid=\"card-qr-scanner\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Scan className=\"w-5 h-5\" />\n                      <span>QR Code Scanner</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <label htmlFor=\"qr-input\" className=\"text-sm font-medium\">\n                        Paste QR Code Data\n                      </label>\n                      <Input\n                        id=\"qr-input\"\n                        value={qrInput}\n                        onChange={(e) => setQrInput(e.target.value)}\n                        placeholder=\"zk_proof_...\"\n                        className=\"font-mono text-sm\"\n                        data-testid=\"input-qr-code\"\n                      />\n                    </div>\n                    <Button \n                      onClick={handleQRScan}\n                      disabled={!qrInput.trim() || checkState !== \"await_scan\"}\n                      className=\"w-full\"\n                      data-testid=\"button-verify-qr\"\n                    >\n                      <Shield className=\"w-4 h-4 mr-2\" />\n                      Verify ZK Proof\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* License Plate Scanner */}\n                <Card data-testid=\"card-plate-scanner\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Hash className=\"w-5 h-5\" />\n                      <span>License Plate</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <label htmlFor=\"plate-input\" className=\"text-sm font-medium\">\n                        Enter Plate Number\n                      </label>\n                      <Input\n                        id=\"plate-input\"\n                        value={plateInput}\n                        onChange={(e) => setPlateInput(e.target.value.toUpperCase())}\n                        placeholder=\"ABC123\"\n                        className=\"font-mono text-sm\"\n                        data-testid=\"input-plate-number\"\n                      />\n                    </div>\n                    <Button \n                      onClick={handlePlateScan}\n                      disabled={!plateInput.trim() || checkState !== \"await_scan\"}\n                      className=\"w-full\"\n                      data-testid=\"button-verify-plate\"\n                    >\n                      <FileText className=\"w-4 h-4 mr-2\" />\n                      Verify Registration\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n\n          {/* Event Log Sidebar */}\n          <div className=\"space-y-6\">\n            <Card data-testid=\"card-event-log\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Clock className=\"w-5 h-5\" />\n                  <span>Event Log</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {eventLog.length === 0 ? (\n                  <p className=\"text-muted-foreground text-sm\">No events yet</p>\n                ) : (\n                  eventLog.map((event, index) => (\n                    <div\n                      key={event.id}\n                      className=\"p-3 rounded-lg border space-y-2\"\n                      data-testid={`event-log-item-${index}`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <Badge \n                          variant={event.result === \"valid\" ? \"default\" : \"destructive\"}\n                          className=\"text-xs\"\n                        >\n                          {event.result === \"valid\" ? \"✅ VALID\" : \"❌ INVALID\"}\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {event.timestamp.toLocaleTimeString()}\n                        </span>\n                      </div>\n                      <div className=\"text-sm space-y-1\">\n                        <div className=\"flex items-center space-x-2\">\n                          <User className=\"w-3 h-3\" />\n                          <span className=\"font-mono text-xs\">{event.officerId}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          {event.method === \"qr\" ? (\n                            <Scan className=\"w-3 h-3\" />\n                          ) : (\n                            <Hash className=\"w-3 h-3\" />\n                          )}\n                          <span className=\"text-xs\">\n                            {event.method === \"qr\" ? \"QR Scan\" : \"Plate Check\"}\n                          </span>\n                        </div>\n                        {(event.proofData || event.plateNumber) && (\n                          <div className=\"text-xs font-mono text-muted-foreground truncate\">\n                            {event.proofData || event.plateNumber}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Officer Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"w-5 h-5\" />\n                  <span>Officer Info</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Badge ID:</span>\n                    <span className=\"text-sm font-mono\" data-testid=\"text-officer-id\">\n                      {officerId}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Session:</span>\n                    <span className=\"text-sm font-mono\">\n                      {new Date().toLocaleDateString()}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Checks:</span>\n                    <span className=\"text-sm font-mono\" data-testid=\"text-check-count\">\n                      {eventLog.length}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14597},"client/src/components/dashboard/access-requests-table.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Check, X, Eye, RefreshCw, Ban } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { AccessRequest } from \"@shared/schema\";\n\ninterface AccessRequestsTableProps {\n  accessRequests: AccessRequest[];\n}\n\nexport default function AccessRequestsTable({ accessRequests }: AccessRequestsTableProps) {\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const approveMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"POST\", `/api/access-requests/${id}/approve`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      toast({\n        title: \"Access Approved\",\n        description: \"Access request has been approved successfully\",\n      });\n    },\n  });\n\n  const denyMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"POST\", `/api/access-requests/${id}/deny`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      toast({\n        title: \"Access Denied\",\n        description: \"Access request has been denied\",\n      });\n    },\n  });\n\n  const revokeMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"POST\", `/api/access-requests/${id}/revoke`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      toast({\n        title: \"Access Revoked\",\n        description: \"Access has been revoked successfully\",\n      });\n    },\n  });\n\n  const filteredRequests = accessRequests.filter(request => \n    statusFilter === \"all\" || request.status === statusFilter\n  );\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge variant=\"outline\" className=\"bg-warning/10 text-warning border-warning\">Pending</Badge>;\n      case \"approved\":\n        return <Badge variant=\"outline\" className=\"bg-success/10 text-success border-success\">Approved</Badge>;\n      case \"denied\":\n        return <Badge variant=\"outline\" className=\"bg-destructive/10 text-destructive border-destructive\">Denied</Badge>;\n      case \"revoked\":\n        return <Badge variant=\"outline\" className=\"bg-secondary/10 text-secondary border-secondary\">Revoked</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase();\n  };\n\n  return (\n    <Card data-testid=\"card-access-requests\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Access Requests</CardTitle>\n          <div className=\"flex items-center space-x-3\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"approved\">Approved</SelectItem>\n                <SelectItem value=\"denied\">Denied</SelectItem>\n                <SelectItem value=\"revoked\">Revoked</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              data-testid=\"button-refresh-requests\"\n            >\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Refresh\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Requester</TableHead>\n              <TableHead>Data Requested</TableHead>\n              <TableHead>Purpose</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Date</TableHead>\n              <TableHead>Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {filteredRequests.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                  No access requests found\n                </TableCell>\n              </TableRow>\n            ) : (\n              filteredRequests.map((request) => (\n                <TableRow \n                  key={request.id} \n                  className=\"hover:bg-muted/50\"\n                  data-testid={`row-request-${request.id}`}\n                >\n                  <TableCell>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-muted rounded-full flex items-center justify-center\">\n                        <span className=\"text-xs font-medium text-muted-foreground\">\n                          {getInitials(request.requesterName)}\n                        </span>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-foreground\" data-testid={`text-requester-${request.id}`}>\n                          {request.requesterName}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">{request.requesterEmail}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div>\n                      <div className=\"text-sm text-foreground\" data-testid={`text-data-requested-${request.id}`}>\n                        {request.dataRequested}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Level {request.privacyLevel} data\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm text-foreground\" data-testid={`text-purpose-${request.id}`}>\n                      {request.purpose}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span data-testid={`badge-status-${request.id}`}>\n                      {getStatusBadge(request.status)}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm text-muted-foreground\" data-testid={`text-date-${request.id}`}>\n                      {request.requestDate \n                        ? formatDistanceToNow(new Date(request.requestDate), { addSuffix: true })\n                        : \"Unknown\"\n                      }\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      {request.status === \"pending\" && (\n                        <>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => approveMutation.mutate(request.id)}\n                            disabled={approveMutation.isPending}\n                            className=\"text-success hover:text-success hover:bg-success/10\"\n                            data-testid={`button-approve-${request.id}`}\n                          >\n                            <Check className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => denyMutation.mutate(request.id)}\n                            disabled={denyMutation.isPending}\n                            className=\"text-destructive hover:text-destructive hover:bg-destructive/10\"\n                            data-testid={`button-deny-${request.id}`}\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </Button>\n                        </>\n                      )}\n                      {request.status === \"approved\" && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => revokeMutation.mutate(request.id)}\n                          disabled={revokeMutation.isPending}\n                          className=\"text-destructive hover:text-destructive hover:bg-destructive/10\"\n                          data-testid={`button-revoke-${request.id}`}\n                        >\n                          <Ban className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-muted-foreground hover:text-foreground\"\n                        data-testid={`button-view-details-${request.id}`}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9853},"client/src/components/dashboard/header.tsx":{"content":"import { Search, Bell, Copy, Moon, Sun, LogOut, User as UserIcon } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { useLocation } from \"wouter\";\nimport logoImage from \"@assets/horizontal_1756043627119.png\";\nimport type { User } from \"@shared/schema\";\n\ninterface HeaderProps {\n  user?: User;\n  pendingRequestsCount?: number;\n}\n\nexport default function Header({ user, pendingRequestsCount = 0 }: HeaderProps) {\n  const { toast } = useToast();\n  const { theme, setTheme } = useTheme();\n  const [, setLocation] = useLocation();\n\n  const handleCopyDID = () => {\n    if (user?.didAddress) {\n      navigator.clipboard.writeText(user.didAddress);\n      toast({\n        title: \"DID Copied\",\n        description: \"DID address copied to clipboard\",\n      });\n    }\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem('idshield_session');\n    toast({\n      title: \"Logged Out\",\n      description: \"You have been successfully logged out\",\n    });\n    setLocation('/login');\n  };\n\n  const getInitials = (name: string = \"\") => {\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase();\n  };\n\n  return (\n    <header className=\"bg-card shadow-sm border-b border-border fixed top-0 left-0 right-0 z-50\">\n      <div className=\"flex items-center justify-between px-4 py-3\">\n        {/* Logo */}\n        <div className=\"flex items-center\">\n          <img \n            src={logoImage} \n            alt=\"ID Shield\" \n            className=\"h-8 w-auto\"\n            data-testid=\"logo-header\"\n          />\n        </div>\n\n        {/* Search Bar */}\n        <div className=\"flex-1 max-w-md mx-8\">\n          <div className=\"relative\">\n            <Input \n              type=\"search\" \n              placeholder=\"Search vault, proofs, logs...\" \n              className=\"pl-10\"\n              data-testid=\"input-search\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          </div>\n        </div>\n\n        {/* Right side */}\n        <div className=\"flex items-center space-x-4\">\n          {/* Theme Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n            data-testid=\"button-theme-toggle\"\n          >\n            <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n            <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n            <span className=\"sr-only\">Toggle theme</span>\n          </Button>\n\n          {/* Notifications */}\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"relative\"\n            onClick={() => setLocation('/access-requests')}\n            data-testid=\"button-notifications\"\n          >\n            <Bell className=\"h-5 w-5\" />\n            {pendingRequestsCount > 0 && (\n              <Badge variant=\"destructive\" className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs\">\n                {pendingRequestsCount}\n              </Badge>\n            )}\n          </Button>\n\n          {/* User Menu Dropdown */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                className=\"flex items-center space-x-3 h-auto p-2 hover:bg-accent rounded-lg\"\n                data-testid=\"button-user-menu\"\n              >\n                <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                  <span className=\"text-primary-foreground text-sm font-medium\" data-testid=\"text-user-initials\">\n                    {getInitials(user?.fullName)}\n                  </span>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium text-foreground\" data-testid=\"text-user-name\">\n                    {user?.fullName || \"Loading...\"}\n                  </p>\n                  <div className=\"flex items-center space-x-2\">\n                    <p className=\"text-xs font-mono text-muted-foreground\" data-testid=\"text-user-did\">\n                      {user?.didAddress || \"Loading...\"}\n                    </p>\n                    <span\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleCopyDID();\n                      }}\n                      className=\"h-4 w-4 p-0 cursor-pointer hover:opacity-70 transition-opacity\"\n                      data-testid=\"button-copy-did\"\n                    >\n                      <Copy className=\"h-3 w-3\" />\n                    </span>\n                  </div>\n                </div>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\" data-testid=\"dropdown-user-menu\">\n              <DropdownMenuLabel>My Account</DropdownMenuLabel>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem \n                onClick={() => setLocation('/profile')}\n                data-testid=\"menu-item-profile\"\n              >\n                <UserIcon className=\"mr-2 h-4 w-4\" />\n                Profile\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem \n                onClick={handleLogout}\n                data-testid=\"menu-item-logout\"\n              >\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                Log out\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":6076},"client/src/components/dashboard/profile-wallet-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Copy } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { User } from \"@shared/schema\";\n\ninterface ProfileWalletCardProps {\n  user?: User;\n}\n\nexport default function ProfileWalletCard({ user }: ProfileWalletCardProps) {\n  const { toast } = useToast();\n\n  const handleCopyDID = () => {\n    if (user?.didAddress) {\n      navigator.clipboard.writeText(user.didAddress);\n      toast({\n        title: \"DID Copied\",\n        description: \"DID address copied to clipboard\",\n      });\n    }\n  };\n\n  const getInitials = (name: string = \"\") => {\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase();\n  };\n\n  return (\n    <Card data-testid=\"card-profile-wallet\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-blue-600 rounded-xl flex items-center justify-center\">\n              <span className=\"text-white text-xl font-bold\" data-testid=\"text-user-avatar\">\n                {getInitials(user?.fullName)}\n              </span>\n            </div>\n            <div>\n              <h2 className=\"text-xl font-bold text-foreground\" data-testid=\"text-user-fullname\">\n                {user?.fullName || \"Loading...\"}\n              </h2>\n              <p className=\"text-muted-foreground\" data-testid=\"text-user-email\">\n                {user?.email || \"Loading...\"}\n              </p>\n              <div className=\"flex items-center space-x-2 mt-2\">\n                <Badge \n                  variant=\"outline\" \n                  className=\"text-success border-success\"\n                  data-testid=\"badge-wallet-status\"\n                >\n                  <span className=\"w-2 h-2 bg-success rounded-full mr-1\"></span>\n                  {user?.walletConnected ? \"Lace Wallet Connected\" : \"Wallet Disconnected\"}\n                </Badge>\n              </div>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-muted-foreground\">DID Address</p>\n            <div className=\"flex items-center space-x-2\">\n              <p className=\"text-sm font-mono text-foreground bg-muted px-3 py-1 rounded\" data-testid=\"text-did-address\">\n                {user?.didAddress || \"Loading...\"}\n              </p>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleCopyDID}\n                className=\"text-primary hover:text-primary/80\"\n                data-testid=\"button-copy-did-address\"\n              >\n                <Copy className=\"h-4 w-4 mr-1\" />\n                Copy\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2985},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tag, UserPlus, UserX, Download, ExternalLink, ChevronRight, QrCode } from \"lucide-react\";\nimport GrantAccessModal from \"@/components/modals/grant-access-modal\";\nimport GenerateProofModal from \"@/components/modals/generate-proof-modal\";\n\nexport default function QuickActions() {\n  const [grantAccessOpen, setGrantAccessOpen] = useState(false);\n  const [generateProofOpen, setGenerateProofOpen] = useState(false);\n\n  const actions = [\n    {\n      id: \"generate-proof\",\n      title: \"Generate ZK Proof\",\n      description: \"Create verifiable proof without revealing data\",\n      icon: Tag,\n      color: \"bg-primary hover:bg-primary/90\",\n      onClick: () => setGenerateProofOpen(true),\n    },\n    {\n      id: \"generate-qr-proof\",\n      title: \"Generate QR Proof\",\n      description: \"Create ZK proof with QR code for easy sharing\",\n      icon: QrCode,\n      color: \"bg-purple-600 hover:bg-purple-600/90\",\n      onClick: () => setGenerateProofOpen(true),\n    },\n    {\n      id: \"grant-access\",\n      title: \"Grant Access\",\n      description: \"Share specific data with trusted parties\",\n      icon: UserPlus,\n      color: \"bg-success hover:bg-success/90\",\n      onClick: () => setGrantAccessOpen(true),\n    },\n    {\n      id: \"revoke-access\",\n      title: \"Revoke Access\",\n      description: \"Remove permissions from entities\",\n      icon: UserX,\n      color: \"bg-destructive hover:bg-destructive/90\",\n      onClick: () => {},\n    },\n  ];\n\n  const utilities = [\n    { id: \"backup\", title: \"Backup\", icon: Download },\n    { id: \"export\", title: \"Export\", icon: ExternalLink },\n  ];\n\n  return (\n    <>\n      <Card data-testid=\"card-quick-actions\">\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Main Actions */}\n          <div className=\"space-y-4\">\n            {actions.map((action) => (\n              <Button\n                key={action.id}\n                variant=\"outline\"\n                className=\"w-full h-auto p-4 justify-between group hover:border-primary/50\"\n                onClick={action.onClick}\n                data-testid={`button-${action.id}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${action.color} group-hover:scale-105 transition-transform`}>\n                    <action.icon className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div className=\"text-left\">\n                    <p className=\"font-medium text-foreground\">{action.title}</p>\n                    <p className=\"text-sm text-muted-foreground\">{action.description}</p>\n                  </div>\n                </div>\n                <ChevronRight className=\"h-4 w-4 text-muted-foreground group-hover:text-primary transition-colors\" />\n              </Button>\n            ))}\n          </div>\n\n          {/* Utility Actions */}\n          <div className=\"pt-4 border-t border-border\">\n            <div className=\"grid grid-cols-2 gap-3\">\n              {utilities.map((utility) => (\n                <Button\n                  key={utility.id}\n                  variant=\"outline\"\n                  className=\"h-12 flex-col space-y-1\"\n                  data-testid={`button-${utility.id}`}\n                >\n                  <utility.icon className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm font-medium text-foreground\">{utility.title}</span>\n                </Button>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <GrantAccessModal open={grantAccessOpen} onOpenChange={setGrantAccessOpen} />\n      <GenerateProofModal open={generateProofOpen} onOpenChange={setGenerateProofOpen} />\n    </>\n  );\n}\n","size_bytes":4027},"client/src/components/dashboard/recent-activity.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, AlertTriangle, Key, X, ExternalLink, Clock, Shield } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { AuditLog } from \"@shared/schema\";\n\ninterface RecentActivityProps {\n  auditLogs: AuditLog[];\n}\n\nexport default function RecentActivity({ auditLogs }: RecentActivityProps) {\n  const getActivityIcon = (action: string) => {\n    switch (action) {\n      case \"access_granted\":\n        return <Check className=\"text-success\" />;\n      case \"access_request_received\":\n        return <AlertTriangle className=\"text-warning\" />;\n      case \"zk_proof_generated\":\n        return <Key className=\"text-primary\" />;\n      case \"access_denied\":\n      case \"access_revoked\":\n        return <X className=\"text-destructive\" />;\n      default:\n        return <Shield className=\"text-muted-foreground\" />;\n    }\n  };\n\n  const getActivityColor = (action: string) => {\n    switch (action) {\n      case \"access_granted\":\n        return \"bg-success\";\n      case \"access_request_received\":\n        return \"bg-warning\";\n      case \"zk_proof_generated\":\n        return \"bg-primary\";\n      case \"access_denied\":\n      case \"access_revoked\":\n        return \"bg-destructive\";\n      default:\n        return \"bg-muted-foreground\";\n    }\n  };\n\n  const formatDescription = (log: AuditLog) => {\n    const baseDescription = log.description;\n    if (log.entityName) {\n      return baseDescription.replace(log.entityName, \"\");\n    }\n    return baseDescription;\n  };\n\n  return (\n    <Card data-testid=\"card-recent-activity\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Recent Activity</CardTitle>\n          <Button \n            variant=\"ghost\" \n            className=\"text-primary hover:text-primary/80\"\n            data-testid=\"button-view-full-audit\"\n            onClick={() => window.location.href = \"/audit-log\"}\n          >\n            View Full Audit Log\n            <ExternalLink className=\"h-4 w-4 ml-2\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {auditLogs.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <Shield className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p>No recent activity to display</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {auditLogs.map((log) => (\n              <div \n                key={log.id} \n                className=\"flex items-start space-x-4 p-4 bg-muted/30 rounded-lg\"\n                data-testid={`activity-item-${log.id}`}\n              >\n                <div className={`w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 ${getActivityColor(log.action)}`}>\n                  {getActivityIcon(log.action)}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {formatDescription(log)}\n                    {log.entityName && (\n                      <span className=\"font-semibold\" data-testid={`entity-name-${log.id}`}>\n                        {log.entityName}\n                      </span>\n                    )}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\" data-testid={`description-${log.id}`}>\n                    {log.description}\n                  </p>\n                  <div className=\"flex items-center space-x-4 mt-2\">\n                    <span className=\"text-xs text-muted-foreground flex items-center\" data-testid={`timestamp-${log.id}`}>\n                      <Clock className=\"h-3 w-3 mr-1\" />\n                      {log.timestamp \n                        ? formatDistanceToNow(new Date(log.timestamp), { addSuffix: true })\n                        : \"Unknown time\"\n                      }\n                    </span>\n                    {log.privacyLevel && (\n                      <Badge \n                        variant=\"outline\" \n                        className=\"text-xs\"\n                        data-testid={`privacy-level-${log.id}`}\n                      >\n                        <Shield className=\"h-3 w-3 mr-1\" />\n                        Level {log.privacyLevel} data\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-muted-foreground hover:text-foreground\"\n                  data-testid={`button-view-audit-details-${log.id}`}\n                >\n                  <ExternalLink className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4924},"client/src/components/dashboard/shield-meter.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Shield, Check, Plus } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport type { User, VaultItem } from \"@shared/schema\";\n\ninterface ShieldMeterProps {\n  user?: User;\n  vaultItems?: VaultItem[];\n}\n\nconst privacyLevels = [\n  { level: 0, name: \"Absolute Confidential\", color: \"bg-green-100 text-green-600\" },\n  { level: 1, name: \"Controlled Sensitive\", color: \"bg-green-100 text-green-600\" },\n  { level: 2, name: \"Private Information\", color: \"bg-green-100 text-green-600\" },\n  { level: 3, name: \"Internal Information\", color: \"bg-yellow-100 text-yellow-600\" },\n  { level: 4, name: \"Controlled Public\", color: \"bg-orange-100 text-orange-600\" },\n  { level: 5, name: \"ZK Proof Access\", color: \"bg-red-100 text-red-600\" },\n  { level: 6, name: \"Ecosystem Apps\", color: \"bg-red-100 text-red-600\" },\n];\n\nexport default function ShieldMeter({ user, vaultItems = [] }: ShieldMeterProps) {\n  const currentLevel = user?.privacyLevel || 0;\n  const progressPercentage = (currentLevel / 6) * 100;\n  \n  const getLevelInfo = (level: number) => {\n    return privacyLevels.find(p => p.level === level) || privacyLevels[0];\n  };\n\n  const currentLevelInfo = getLevelInfo(currentLevel);\n\n  // Group vault items by category\n  const vaultCategories = [\n    { name: \"Identity Verification\", items: vaultItems.filter(item => item.category === \"ids\"), level: 4 },\n    { name: \"Health Records\", items: vaultItems.filter(item => item.category === \"health\"), level: 6 },\n    { name: \"Insurance Data\", items: vaultItems.filter(item => item.category === \"insurance\"), level: 5 },\n  ];\n\n  return (\n    <Card data-testid=\"card-shield-meter\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Shield className=\"h-5 w-5 text-primary\" />\n          <span>Privacy Shield Level</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Circular Progress */}\n        <div className=\"text-center\">\n          <div className=\"relative w-32 h-32 mx-auto mb-4\">\n            <svg className=\"w-32 h-32 transform -rotate-90\">\n              <circle \n                cx=\"64\" \n                cy=\"64\" \n                r=\"56\" \n                stroke=\"hsl(var(--muted))\" \n                strokeWidth=\"8\" \n                fill=\"none\"\n              />\n              <circle \n                cx=\"64\" \n                cy=\"64\" \n                r=\"56\" \n                stroke=\"hsl(var(--primary))\" \n                strokeWidth=\"8\" \n                fill=\"none\"\n                strokeDasharray=\"351.86\"\n                strokeDashoffset={351.86 - (351.86 * progressPercentage) / 100}\n                strokeLinecap=\"round\"\n                className=\"transition-all duration-500\"\n              />\n            </svg>\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <span className=\"text-3xl font-bold text-primary\" data-testid=\"text-privacy-level\">\n                  {currentLevel}\n                </span>\n                <p className=\"text-sm text-muted-foreground\">of 6</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge \n              className={cn(\"text-sm px-3 py-1\", currentLevelInfo.color)}\n              data-testid=\"badge-privacy-status\"\n            >\n              {currentLevelInfo.name}\n            </Badge>\n            <p className=\"text-sm text-muted-foreground\">\n              {currentLevel <= 2 ? \"Maximum security protection active\" : \"Consider upgrading to higher security levels\"}\n            </p>\n          </div>\n        </div>\n\n        {/* Privacy Categories */}\n        <div className=\"space-y-3\">\n          {vaultCategories.map((category) => (\n            <div \n              key={category.name} \n              className={cn(\n                \"flex items-center justify-between p-3 rounded-lg\",\n                category.items.length > 0 ? \"bg-muted\" : \"border-2 border-dashed border-muted\"\n              )}\n              data-testid={`privacy-category-${category.name.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className={cn(\n                  \"w-8 h-8 rounded-full flex items-center justify-center\",\n                  category.items.length > 0 ? \"bg-success\" : \"bg-muted-foreground\"\n                )}>\n                  {category.items.length > 0 ? (\n                    <Check className=\"text-success-foreground text-xs\" />\n                  ) : (\n                    <Plus className=\"text-muted-foreground text-xs\" />\n                  )}\n                </div>\n                <span className={cn(\n                  \"text-sm font-medium\",\n                  category.items.length > 0 ? \"text-foreground\" : \"text-muted-foreground\"\n                )}>\n                  {category.name}\n                </span>\n              </div>\n              <Badge \n                variant=\"outline\" \n                className=\"text-xs\"\n                data-testid={`badge-category-level-${category.name.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                {category.items.length > 0 ? `Level ${category.level}` : \"Not Set\"}\n              </Badge>\n            </div>\n          ))}\n        </div>\n\n        <Button \n          className=\"w-full\"\n          data-testid=\"button-manage-permissions\"\n        >\n          Manage Permissions\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5746},"client/src/components/dashboard/sidebar.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  BarChart3,\n  Layers,\n  Vault,\n  Key,\n  UserCheck,\n  ClipboardList,\n  Settings,\n  Heart,\n  Shield,\n  CreditCard,\n  Scan,\n  User\n} from \"lucide-react\";\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  // Get dashboard data to calculate pending requests and user type\n  const { data: dashboardData } = useQuery<{ accessRequests: any[], user: any }>({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  const pendingRequestsCount = dashboardData?.accessRequests?.filter(req => req.status === \"pending\").length || 0;\n  const isPolice = dashboardData?.user?.userType === \"police\";\n\n  const navigation = [\n    { name: \"Overview\", href: \"/dashboard\", icon: BarChart3, current: true },\n    ...(isPolice ? [{ name: \"Police Check\", href: \"/police-check\", icon: Scan }] : []),\n    { name: \"Profile\", href: \"/profile\", icon: User },\n    { name: \"Privacy Levels (0–6)\", href: \"/privacy-levels\", icon: Layers },\n    { \n      name: \"My Vault\", \n      icon: Vault, \n      children: [\n        { name: \"Health\", href: \"/vault/health\", icon: Heart },\n        { name: \"Insurance\", href: \"/vault/insurance\", icon: Shield },\n        { name: \"IDs\", href: \"/vault/ids\", icon: CreditCard },\n      ]\n    },\n    { name: \"ZK Proofs\", href: \"/zk-proofs\", icon: Key },\n    { name: \"Access Requests\", href: \"/access-requests\", icon: UserCheck, badge: pendingRequestsCount },\n    { name: \"Audit Log\", href: \"/audit-log\", icon: ClipboardList },\n    { name: \"Settings\", href: \"/settings\", icon: Settings },\n  ];\n\n  return (\n    <aside className=\"w-64 bg-sidebar border-r border-sidebar-border fixed left-0 top-16 bottom-0 overflow-y-auto\">\n      <nav className=\"p-4 space-y-2\">\n        {navigation.map((item) => {\n          const isActive = item.href === location || (item.href === \"/\" && location === \"/dashboard\");\n          \n          if (item.children) {\n            return (\n              <div key={item.name} className=\"pt-2\">\n                <div className=\"flex items-center space-x-3 px-3 py-2 text-sidebar-foreground text-sm font-medium\">\n                  <item.icon className=\"h-5 w-5\" />\n                  <span data-testid={`nav-group-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {item.name}\n                  </span>\n                </div>\n                <div className=\"ml-6 space-y-1\">\n                  {item.children.map((child) => (\n                    <a\n                      key={child.name}\n                      href={child.href}\n                      className={cn(\n                        \"flex items-center space-x-3 px-3 py-2 text-sm rounded-lg transition-colors\",\n                        \"text-sidebar-foreground hover:text-sidebar-accent-foreground hover:bg-sidebar-accent\"\n                      )}\n                      data-testid={`nav-link-${child.name.toLowerCase()}`}\n                    >\n                      <child.icon className=\"h-4 w-4\" />\n                      <span>{child.name}</span>\n                    </a>\n                  ))}\n                </div>\n              </div>\n            );\n          }\n\n          return (\n            <a\n              key={item.name}\n              href={item.href}\n              className={cn(\n                \"flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors\",\n                isActive\n                  ? \"bg-sidebar-primary text-sidebar-primary-foreground\"\n                  : \"text-sidebar-foreground hover:text-sidebar-accent-foreground hover:bg-sidebar-accent\"\n              )}\n              data-testid={`nav-link-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <item.icon className=\"h-5 w-5\" />\n              <span className=\"font-medium\">{item.name}</span>\n              {item.badge && item.badge > 0 && (\n                <Badge \n                  variant=\"destructive\" \n                  className=\"ml-auto\"\n                  data-testid={`badge-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  {item.badge}\n                </Badge>\n              )}\n            </a>\n          );\n        })}\n      </nav>\n    </aside>\n  );\n}\n","size_bytes":4295},"client/src/components/modals/generate-proof-modal.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Shield, Check, QrCode, Download } from \"lucide-react\";\nimport QRCode from \"qrcode\";\n\nconst generateProofSchema = z.object({\n  proofType: z.string().min(1, \"Proof type is required\"),\n  attributes: z.array(z.string()).min(1, \"At least one attribute is required\"),\n  proofResult: z.string().default(\"\"),\n});\n\ntype GenerateProofForm = z.infer<typeof generateProofSchema>;\n\ninterface GenerateProofModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst proofTypes = [\n  {\n    value: \"age_verification\",\n    label: \"Age Verification (18+)\",\n    attributes: [\"birth_date\", \"country\"],\n  },\n  {\n    value: \"income_range\",\n    label: \"Income Range Proof\",\n    attributes: [\"income_bracket\", \"employment_status\"],\n  },\n  {\n    value: \"insurance\",\n    label: \"Insurance Coverage Proof\",\n    attributes: [\"coverage_type\", \"provider\", \"policy_status\"],\n  },\n  {\n    value: \"residency\",\n    label: \"Residency Proof\",\n    attributes: [\"address\", \"country\", \"state\"],\n  },\n  {\n    value: \"education\",\n    label: \"Education Credential\",\n    attributes: [\"degree\", \"institution\", \"graduation_date\"],\n  },\n];\n\nconst attributeLabels: Record<string, string> = {\n  birth_date: \"Birth date (for age calculation)\",\n  country: \"Country of residence\",\n  income_bracket: \"Income bracket\",\n  employment_status: \"Employment status\",\n  coverage_type: \"Insurance coverage type\",\n  provider: \"Insurance provider\",\n  policy_status: \"Policy status\",\n  address: \"Address\",\n  state: \"State/Province\",\n  degree: \"Degree/Certification\",\n  institution: \"Educational institution\",\n  graduation_date: \"Graduation date\",\n};\n\nexport default function GenerateProofModal({ open, onOpenChange }: GenerateProofModalProps) {\n  const [selectedProofType, setSelectedProofType] = useState<string>(\"\");\n  const [selectedAttributes, setSelectedAttributes] = useState<string[]>([]);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generatedProof, setGeneratedProof] = useState<string>(\"\");\n  const [qrCodeData, setQrCodeData] = useState<string>(\"\");\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<GenerateProofForm>({\n    resolver: zodResolver(generateProofSchema),\n    defaultValues: {\n      proofType: \"\",\n      attributes: [],\n      proofResult: \"\",\n    },\n  });\n\n  const generateQRCode = async (proofData: string) => {\n    try {\n      if (canvasRef.current) {\n        await QRCode.toCanvas(canvasRef.current, proofData, {\n          width: 200,\n          margin: 2,\n          color: {\n            dark: '#000000',\n            light: '#FFFFFF'\n          }\n        });\n        \n        // Convert canvas to data URL for easier handling\n        const dataUrl = canvasRef.current.toDataURL();\n        setQrCodeData(dataUrl);\n      }\n    } catch (error) {\n      console.error('Error generating QR code:', error);\n    }\n  };\n\n  const generateProofMutation = useMutation({\n    mutationFn: (data: GenerateProofForm) => \n      apiRequest(\"POST\", \"/api/generate-proof\", data),\n    onSuccess: async (response) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      const mockProofResult = `zk_proof_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      setGeneratedProof(mockProofResult);\n      \n      // Generate QR code for the proof\n      await generateQRCode(mockProofResult);\n      \n      setIsGenerating(false);\n      \n      toast({\n        title: \"ZK Proof Generated\",\n        description: \"Your zero-knowledge proof and QR code have been created successfully\",\n      });\n    },\n    onError: () => {\n      setIsGenerating(false);\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate proof. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleProofTypeChange = (value: string) => {\n    setSelectedProofType(value);\n    setSelectedAttributes([]);\n    form.setValue(\"proofType\", value);\n    form.setValue(\"attributes\", []);\n  };\n\n  const handleAttributeChange = (attribute: string, checked: boolean) => {\n    let newAttributes;\n    if (checked) {\n      newAttributes = [...selectedAttributes, attribute];\n    } else {\n      newAttributes = selectedAttributes.filter(attr => attr !== attribute);\n    }\n    setSelectedAttributes(newAttributes);\n    form.setValue(\"attributes\", newAttributes);\n  };\n\n  const onSubmit = (data: GenerateProofForm) => {\n    setIsGenerating(true);\n    // Simulate proof generation delay\n    setTimeout(() => {\n      generateProofMutation.mutate({\n        ...data,\n        proofResult: `Generated proof for ${data.proofType}`,\n      });\n    }, 2000);\n  };\n\n  const downloadQRCode = () => {\n    if (qrCodeData) {\n      const link = document.createElement('a');\n      link.download = `zk-proof-qr-${Date.now()}.png`;\n      link.href = qrCodeData;\n      link.click();\n      \n      toast({\n        title: \"QR Code Downloaded\",\n        description: \"QR code has been saved to your downloads\",\n      });\n    }\n  };\n\n  const handleClose = () => {\n    onOpenChange(false);\n    form.reset();\n    setSelectedProofType(\"\");\n    setSelectedAttributes([]);\n    setGeneratedProof(\"\");\n    setQrCodeData(\"\");\n    setIsGenerating(false);\n  };\n\n  const currentProofType = proofTypes.find(type => type.value === selectedProofType);\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"modal-generate-proof\">\n        <DialogHeader>\n          <DialogTitle>Generate ZK Proof</DialogTitle>\n          <DialogDescription>\n            Create a zero-knowledge proof to verify information without revealing your actual data.\n          </DialogDescription>\n        </DialogHeader>\n\n        {!generatedProof ? (\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"proofType\">Proof Type</Label>\n              <Select \n                value={selectedProofType} \n                onValueChange={handleProofTypeChange}\n              >\n                <SelectTrigger data-testid=\"select-proof-type\">\n                  <SelectValue placeholder=\"Select proof type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {proofTypes.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {type.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {form.formState.errors.proofType && (\n                <p className=\"text-sm text-destructive\">\n                  {form.formState.errors.proofType.message}\n                </p>\n              )}\n            </div>\n\n            {currentProofType && (\n              <div className=\"space-y-2\">\n                <Label>Select Attributes</Label>\n                <div className=\"space-y-2\">\n                  {currentProofType.attributes.map((attribute) => (\n                    <div key={attribute} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={attribute}\n                        checked={selectedAttributes.includes(attribute)}\n                        onCheckedChange={(checked) => \n                          handleAttributeChange(attribute, checked as boolean)\n                        }\n                        data-testid={`checkbox-attribute-${attribute}`}\n                      />\n                      <Label htmlFor={attribute} className=\"text-sm\">\n                        {attributeLabels[attribute] || attribute}\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n                {form.formState.errors.attributes && (\n                  <p className=\"text-sm text-destructive\">\n                    {form.formState.errors.attributes.message}\n                  </p>\n                )}\n              </div>\n            )}\n\n            <Alert>\n              <Shield className=\"h-4 w-4\" />\n              <AlertDescription>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"font-medium\">Privacy Protected</span>\n                </div>\n                <p className=\"mt-1\">Only the proof result will be shared, not your actual data.</p>\n              </AlertDescription>\n            </Alert>\n\n            {isGenerating && (\n              <Alert>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n                <AlertDescription>\n                  <span className=\"font-medium\">Generating Proof...</span>\n                  <p className=\"mt-1\">This may take a few moments.</p>\n                </AlertDescription>\n              </Alert>\n            )}\n          </form>\n        ) : (\n          <div className=\"space-y-4\">\n            <Alert className=\"border-success bg-success/10\">\n              <Check className=\"h-4 w-4 text-success\" />\n              <AlertDescription>\n                <span className=\"font-medium text-success\">Proof Generated Successfully!</span>\n                <p className=\"mt-1\">Your zero-knowledge proof and QR code are ready to be shared.</p>\n              </AlertDescription>\n            </Alert>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Proof Result</Label>\n                <div className=\"p-3 bg-muted rounded-lg font-mono text-sm\" data-testid=\"text-proof-result\">\n                  {generatedProof}\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label>QR Code</Label>\n                <div className=\"flex flex-col items-center space-y-2\">\n                  <canvas \n                    ref={canvasRef} \n                    className=\"border rounded-lg bg-white\"\n                    data-testid=\"canvas-qr-code\"\n                  />\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={downloadQRCode}\n                    disabled={!qrCodeData}\n                    data-testid=\"button-download-qr\"\n                  >\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Download QR\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <DialogFooter>\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            onClick={handleClose}\n            data-testid=\"button-cancel-proof\"\n          >\n            {generatedProof ? \"Close\" : \"Cancel\"}\n          </Button>\n          {!generatedProof && (\n            <Button \n              onClick={form.handleSubmit(onSubmit)}\n              disabled={generateProofMutation.isPending || isGenerating || !selectedProofType || selectedAttributes.length === 0}\n              data-testid=\"button-generate-proof\"\n            >\n              {isGenerating ? \"Generating...\" : \"Generate Proof\"}\n            </Button>\n          )}\n          {generatedProof && (\n            <Button data-testid=\"button-copy-proof\">\n              Copy Proof\n            </Button>\n          )}\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12135},"client/src/components/modals/grant-access-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Info, Shield } from \"lucide-react\";\n\nconst grantAccessSchema = z.object({\n  requesterName: z.string().min(1, \"Requester name is required\"),\n  requesterEmail: z.string().email(\"Valid email is required\"),\n  dataRequested: z.string().min(1, \"Data scope is required\"),\n  purpose: z.string().min(1, \"Purpose is required\"),\n  privacyLevel: z.number().min(1).max(6),\n  ttl: z.string().min(1, \"Time to live is required\"),\n});\n\ntype GrantAccessForm = z.infer<typeof grantAccessSchema>;\n\ninterface GrantAccessModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst dataScopes = [\n  \"Identity Verification\",\n  \"Health Records\", \n  \"Insurance Information\",\n  \"Financial Data\",\n  \"Educational Credentials\",\n  \"Employment History\",\n];\n\nconst privacyLevels = [\n  { level: 1, name: \"Basic\", description: \"Public information only\" },\n  { level: 2, name: \"Standard\", description: \"Limited personal data\" },\n  { level: 3, name: \"Enhanced\", description: \"Detailed personal data\" },\n  { level: 4, name: \"High\", description: \"Sensitive information\" },\n  { level: 5, name: \"Maximum\", description: \"Very sensitive data\" },\n  { level: 6, name: \"Ultra Secure\", description: \"Highly confidential\" },\n];\n\nconst ttlOptions = [\n  { value: \"1h\", label: \"1 hour\" },\n  { value: \"24h\", label: \"24 hours\" },\n  { value: \"7d\", label: \"7 days\" },\n  { value: \"30d\", label: \"30 days\" },\n  { value: \"custom\", label: \"Custom\" },\n];\n\nexport default function GrantAccessModal({ open, onOpenChange }: GrantAccessModalProps) {\n  const [selectedPrivacyLevel, setSelectedPrivacyLevel] = useState(3);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<GrantAccessForm>({\n    resolver: zodResolver(grantAccessSchema),\n    defaultValues: {\n      requesterName: \"\",\n      requesterEmail: \"\",\n      dataRequested: \"\",\n      purpose: \"\",\n      privacyLevel: 3,\n      ttl: \"24h\",\n    },\n  });\n\n  const grantAccessMutation = useMutation({\n    mutationFn: (data: Omit<GrantAccessForm, \"ttl\">) => \n      apiRequest(\"POST\", \"/api/grant-access\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      toast({\n        title: \"Access Granted\",\n        description: \"Access has been granted successfully\",\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to grant access. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: GrantAccessForm) => {\n    const { ttl, ...requestData } = data;\n    grantAccessMutation.mutate(requestData);\n  };\n\n  const handleClose = () => {\n    onOpenChange(false);\n    form.reset();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"modal-grant-access\">\n        <DialogHeader>\n          <DialogTitle>Grant Access</DialogTitle>\n          <DialogDescription>\n            Grant access to your data with specific privacy controls and time limits.\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"requesterName\">Requester</Label>\n            <Input\n              id=\"requesterName\"\n              placeholder=\"Organization or individual\"\n              {...form.register(\"requesterName\")}\n              data-testid=\"input-requester-name\"\n            />\n            {form.formState.errors.requesterName && (\n              <p className=\"text-sm text-destructive\">\n                {form.formState.errors.requesterName.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"requesterEmail\">Email</Label>\n            <Input\n              id=\"requesterEmail\"\n              type=\"email\"\n              placeholder=\"contact@organization.com\"\n              {...form.register(\"requesterEmail\")}\n              data-testid=\"input-requester-email\"\n            />\n            {form.formState.errors.requesterEmail && (\n              <p className=\"text-sm text-destructive\">\n                {form.formState.errors.requesterEmail.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"dataRequested\">Data Scope</Label>\n            <Select \n              value={form.watch(\"dataRequested\")} \n              onValueChange={(value) => form.setValue(\"dataRequested\", value)}\n            >\n              <SelectTrigger data-testid=\"select-data-scope\">\n                <SelectValue placeholder=\"Select data scope\" />\n              </SelectTrigger>\n              <SelectContent>\n                {dataScopes.map((scope) => (\n                  <SelectItem key={scope} value={scope}>\n                    {scope}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.dataRequested && (\n              <p className=\"text-sm text-destructive\">\n                {form.formState.errors.dataRequested.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"purpose\">Purpose</Label>\n            <Input\n              id=\"purpose\"\n              placeholder=\"e.g., Account verification, Medical treatment\"\n              {...form.register(\"purpose\")}\n              data-testid=\"input-purpose\"\n            />\n            {form.formState.errors.purpose && (\n              <p className=\"text-sm text-destructive\">\n                {form.formState.errors.purpose.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Privacy Level</Label>\n            <div className=\"grid grid-cols-3 gap-2\">\n              {privacyLevels.slice(0, 6).map((level) => (\n                <Button\n                  key={level.level}\n                  type=\"button\"\n                  variant={selectedPrivacyLevel === level.level ? \"default\" : \"outline\"}\n                  className=\"p-3 h-auto flex-col\"\n                  onClick={() => {\n                    setSelectedPrivacyLevel(level.level);\n                    form.setValue(\"privacyLevel\", level.level);\n                  }}\n                  data-testid={`button-privacy-level-${level.level}`}\n                >\n                  <div className=\"text-sm font-medium\">Level {level.level}</div>\n                  <div className=\"text-xs text-muted-foreground\">{level.name}</div>\n                </Button>\n              ))}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {privacyLevels.find(l => l.level === selectedPrivacyLevel)?.description}\n            </p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"ttl\">Time to Live (TTL)</Label>\n            <Select \n              value={form.watch(\"ttl\")} \n              onValueChange={(value) => form.setValue(\"ttl\", value)}\n            >\n              <SelectTrigger data-testid=\"select-ttl\">\n                <SelectValue placeholder=\"Select duration\" />\n              </SelectTrigger>\n              <SelectContent>\n                {ttlOptions.map((option) => (\n                  <SelectItem key={option.value} value={option.value}>\n                    {option.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Alert>\n            <Info className=\"h-4 w-4\" />\n            <AlertDescription>\n              <div className=\"flex items-center space-x-2\">\n                <Shield className=\"h-4 w-4 text-primary\" />\n                <span className=\"font-medium\">Sign with Lace Wallet</span>\n              </div>\n              <p className=\"mt-1\">This action requires your digital signature to authorize access.</p>\n            </AlertDescription>\n          </Alert>\n        </form>\n\n        <DialogFooter>\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            onClick={handleClose}\n            data-testid=\"button-cancel-grant\"\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={form.handleSubmit(onSubmit)}\n            disabled={grantAccessMutation.isPending}\n            data-testid=\"button-sign-and-grant\"\n          >\n            {grantAccessMutation.isPending ? \"Signing...\" : \"Sign & Grant Access\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9426},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/access-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/dashboard/header\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\nimport { \n  UserCheck,\n  Clock,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  Building,\n  Mail,\n  FileText,\n  Calendar,\n  Shield\n} from \"lucide-react\";\nimport type { User, AccessRequest } from \"@shared/schema\";\n\ninterface DashboardData {\n  user: User;\n  accessRequests: AccessRequest[];\n}\n\nexport default function AccessRequests() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [processingRequestId, setProcessingRequestId] = useState<string | null>(null);\n\n  const { data: dashboardData, isLoading } = useQuery<DashboardData>({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  const approveRequestMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      return apiRequest(\"POST\", `/api/access-requests/${requestId}/approve`);\n    },\n    onMutate: (requestId) => {\n      setProcessingRequestId(requestId);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Request Approved\",\n        description: \"Access request has been approved successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      setProcessingRequestId(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Approval Failed\",\n        description: error.message || \"Failed to approve access request\",\n        variant: \"destructive\",\n      });\n      setProcessingRequestId(null);\n    },\n  });\n\n  const denyRequestMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      return apiRequest(\"POST\", `/api/access-requests/${requestId}/deny`);\n    },\n    onMutate: (requestId) => {\n      setProcessingRequestId(requestId);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Request Denied\",\n        description: \"Access request has been denied.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      setProcessingRequestId(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Denial Failed\",\n        description: error.message || \"Failed to deny access request\",\n        variant: \"destructive\",\n      });\n      setProcessingRequestId(null);\n    },\n  });\n\n  const getStatusBadge = (status: string | null) => {\n    switch (status) {\n      case \"pending\":\n        return (\n          <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n            <Clock className=\"w-3 h-3\" />\n            <span>Pending</span>\n          </Badge>\n        );\n      case \"approved\":\n        return (\n          <Badge variant=\"default\" className=\"flex items-center space-x-1 bg-green-600 hover:bg-green-700\">\n            <CheckCircle className=\"w-3 h-3\" />\n            <span>Approved</span>\n          </Badge>\n        );\n      case \"denied\":\n        return (\n          <Badge variant=\"destructive\" className=\"flex items-center space-x-1\">\n            <XCircle className=\"w-3 h-3\" />\n            <span>Denied</span>\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"outline\" className=\"flex items-center space-x-1\">\n            <AlertCircle className=\"w-3 h-3\" />\n            <span>Unknown</span>\n          </Badge>\n        );\n    }\n  };\n\n  const getPrivacyLevelColor = (level: number) => {\n    if (level <= 2) return \"text-green-600\";\n    if (level <= 4) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const formatDate = (date: Date | string | null) => {\n    if (!date) return \"N/A\";\n    return new Date(date).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const user = dashboardData?.user;\n  const accessRequests = dashboardData?.accessRequests || [];\n  const pendingRequests = accessRequests.filter(req => req.status === \"pending\");\n  const processedRequests = accessRequests.filter(req => req.status !== \"pending\");\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header user={user} pendingRequestsCount={pendingRequests.length} />\n        <div className=\"flex pt-16\">\n          <Sidebar />\n          <main className=\"flex-1 ml-64 p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-muted rounded w-64\"></div>\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <div className=\"h-32 bg-muted rounded\"></div>\n                <div className=\"h-32 bg-muted rounded\"></div>\n                <div className=\"h-32 bg-muted rounded\"></div>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"h-64 bg-muted rounded\"></div>\n                <div className=\"h-64 bg-muted rounded\"></div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header user={user} pendingRequestsCount={pendingRequests.length} />\n      \n      <div className=\"flex pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 ml-64 p-6 space-y-6\">\n          {/* Page Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"title-access-requests\">Access Requests</h1>\n              <p className=\"text-muted-foreground\">\n                Manage who can access your personal data and for what purpose\n              </p>\n            </div>\n            <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n              <Shield className=\"w-4 h-4\" />\n              <span>Privacy Level {user?.privacyLevel || 0}</span>\n            </Badge>\n          </div>\n\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card data-testid=\"card-total-requests\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Requests</CardTitle>\n                <FileText className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{accessRequests.length}</div>\n                <p className=\"text-xs text-muted-foreground\">All time requests</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-pending-requests\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n                <Clock className=\"h-4 w-4 text-yellow-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-yellow-600\">{pendingRequests.length}</div>\n                <p className=\"text-xs text-muted-foreground\">Awaiting your review</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-processed-requests\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Processed</CardTitle>\n                <UserCheck className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">{processedRequests.length}</div>\n                <p className=\"text-xs text-muted-foreground\">Approved or denied</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Pending Requests */}\n          {pendingRequests.length > 0 && (\n            <Card data-testid=\"card-pending-section\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Clock className=\"w-5 h-5 text-yellow-600\" />\n                  <span>Pending Requests</span>\n                  <Badge variant=\"secondary\">{pendingRequests.length}</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {pendingRequests.map((request) => (\n                  <div \n                    key={request.id} \n                    className=\"border rounded-lg p-4 space-y-4\"\n                    data-testid={`request-pending-${request.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Building className=\"w-4 h-4 text-muted-foreground\" />\n                            <span className=\"font-semibold\" data-testid={`text-requester-${request.id}`}>\n                              {request.requesterName}\n                            </span>\n                          </div>\n                          {getStatusBadge(request.status)}\n                          <Badge \n                            variant=\"outline\" \n                            className={`flex items-center space-x-1 ${getPrivacyLevelColor(request.privacyLevel)}`}\n                          >\n                            <Shield className=\"w-3 h-3\" />\n                            <span>Level {request.privacyLevel}</span>\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                            <span>{request.requesterEmail}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                            <span>{formatDate(request.requestDate)}</span>\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <p className=\"text-sm\">\n                            <strong>Data Requested:</strong> {request.dataRequested}\n                          </p>\n                          <p className=\"text-sm\">\n                            <strong>Purpose:</strong> {request.purpose}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"flex justify-end space-x-3\">\n                      <Button\n                        variant=\"destructive\"\n                        onClick={() => denyRequestMutation.mutate(request.id)}\n                        disabled={processingRequestId === request.id}\n                        data-testid={`button-deny-${request.id}`}\n                      >\n                        <XCircle className=\"w-4 h-4 mr-2\" />\n                        {processingRequestId === request.id ? \"Processing...\" : \"Deny\"}\n                      </Button>\n                      <Button\n                        onClick={() => approveRequestMutation.mutate(request.id)}\n                        disabled={processingRequestId === request.id}\n                        data-testid={`button-approve-${request.id}`}\n                      >\n                        <CheckCircle className=\"w-4 h-4 mr-2\" />\n                        {processingRequestId === request.id ? \"Processing...\" : \"Approve\"}\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Request History */}\n          <Card data-testid=\"card-request-history\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <UserCheck className=\"w-5 h-5\" />\n                <span>Request History</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {accessRequests.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <UserCheck className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Access Requests</h3>\n                  <p className=\"text-muted-foreground\">\n                    You don't have any access requests yet. When organizations request access to your data, they'll appear here.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {accessRequests.map((request) => (\n                    <div \n                      key={request.id}\n                      className=\"border rounded-lg p-4\"\n                      data-testid={`request-history-${request.id}`}\n                    >\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Building className=\"w-4 h-4 text-muted-foreground\" />\n                            <span className=\"font-semibold\">{request.requesterName}</span>\n                          </div>\n                          {getStatusBadge(request.status)}\n                          <Badge \n                            variant=\"outline\" \n                            className={`flex items-center space-x-1 ${getPrivacyLevelColor(request.privacyLevel)}`}\n                          >\n                            <Shield className=\"w-3 h-3\" />\n                            <span>Level {request.privacyLevel}</span>\n                          </Badge>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm mb-3\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                          <span>{request.requesterEmail}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                          <span>Requested: {formatDate(request.requestDate)}</span>\n                        </div>\n                        {request.responseDate && (\n                          <div className=\"flex items-center space-x-2\">\n                            <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                            <span>Responded: {formatDate(request.responseDate)}</span>\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"text-sm space-y-1\">\n                        <p><strong>Data Requested:</strong> {request.dataRequested}</p>\n                        <p><strong>Purpose:</strong> {request.purpose}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":15706},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/dashboard/header\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\nimport { \n  User,\n  Mail,\n  Phone,\n  MapPin,\n  Calendar,\n  Edit,\n  Save,\n  X,\n  Shield\n} from \"lucide-react\";\nimport type { User as UserType } from \"@shared/schema\";\n\nconst profileSchema = z.object({\n  fullName: z.string().min(2, \"Name must be at least 2 characters\").max(50, \"Name too long\"),\n  email: z.string().email(\"Invalid email address\").optional().or(z.literal(\"\")),\n  phone: z.string().min(10, \"Phone must be at least 10 digits\").max(20, \"Phone too long\").optional().or(z.literal(\"\")),\n  location: z.string().max(100, \"Location too long\").optional().or(z.literal(\"\")),\n  bio: z.string().max(500, \"Bio too long\").optional().or(z.literal(\"\")),\n});\n\ntype ProfileFormData = z.infer<typeof profileSchema>;\n\nexport default function Profile() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n\n  const { data: dashboardData, isLoading } = useQuery<{ user: UserType; accessRequests: any[] }>({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  const pendingRequests = dashboardData?.accessRequests?.filter(req => req.status === \"pending\") || [];\n\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      fullName: dashboardData?.user?.fullName || \"\",\n      email: dashboardData?.user?.email || \"\",\n      phone: dashboardData?.user?.phone || \"\",\n      location: dashboardData?.user?.location || \"\",\n      bio: dashboardData?.user?.bio || \"\",\n    },\n  });\n\n  // Reset form when data loads\n  useState(() => {\n    if (dashboardData?.user) {\n      form.reset({\n        fullName: dashboardData.user.fullName || \"\",\n        email: dashboardData.user.email || \"\",\n        phone: dashboardData.user.phone || \"\",\n        location: dashboardData.user.location || \"\",\n        bio: dashboardData.user.bio || \"\",\n      });\n    }\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileFormData) => {\n      return apiRequest(\"PATCH\", \"/api/profile\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been successfully updated.\",\n      });\n      setIsEditing(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = (data: ProfileFormData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const handleCancel = () => {\n    form.reset();\n    setIsEditing(false);\n  };\n\n  const getInitials = (name: string = \"\") => {\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase();\n  };\n\n  const user = dashboardData?.user;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header user={user} pendingRequestsCount={pendingRequests.length} />\n        <div className=\"flex pt-16\">\n          <Sidebar />\n          <main className=\"flex-1 ml-64 p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-muted rounded w-48\"></div>\n              <div className=\"h-64 bg-muted rounded\"></div>\n              <div className=\"h-48 bg-muted rounded\"></div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header user={user} pendingRequestsCount={pendingRequests.length} />\n      \n      <div className=\"flex pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 ml-64 p-6 space-y-6\">\n          {/* Page Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"title-profile\">Profile Settings</h1>\n              <p className=\"text-muted-foreground\">\n                Manage your personal information and account preferences\n              </p>\n            </div>\n            <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n              <Shield className=\"w-4 h-4\" />\n              <span>Privacy Level {user?.privacyLevel || 0}</span>\n            </Badge>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Profile Overview */}\n            <Card className=\"lg:col-span-1\" data-testid=\"card-profile-overview\">\n              <CardHeader className=\"text-center pb-4\">\n                <Avatar className=\"w-24 h-24 mx-auto mb-4\">\n                  <AvatarImage src={user?.profilePicture || undefined} alt={user?.fullName || undefined} />\n                  <AvatarFallback className=\"text-xl\">\n                    {getInitials(user?.fullName)}\n                  </AvatarFallback>\n                </Avatar>\n                <CardTitle className=\"text-xl\" data-testid=\"text-profile-name\">\n                  {user?.fullName || \"Anonymous User\"}\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground font-mono\" data-testid=\"text-profile-did\">\n                  {user?.didAddress}\n                </p>\n              </CardHeader>\n              <Separator />\n              <CardContent className=\"pt-4\">\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"truncate\" data-testid=\"text-profile-email\">\n                      {user?.email || \"Not set\"}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                    <span data-testid=\"text-profile-phone\">\n                      {user?.phone || \"Not set\"}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n                    <span data-testid=\"text-profile-location\">\n                      {user?.location || \"Not set\"}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                    <span>\n                      Joined {new Date(user?.createdAt || Date.now()).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Profile Edit Form */}\n            <Card className=\"lg:col-span-2\" data-testid=\"card-profile-edit\">\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"w-5 h-5\" />\n                  <span>Personal Information</span>\n                </CardTitle>\n                {!isEditing ? (\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setIsEditing(true)}\n                    data-testid=\"button-edit-profile\"\n                  >\n                    <Edit className=\"w-4 h-4 mr-2\" />\n                    Edit Profile\n                  </Button>\n                ) : (\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={handleCancel}\n                      disabled={updateProfileMutation.isPending}\n                      data-testid=\"button-cancel-edit\"\n                    >\n                      <X className=\"w-4 h-4 mr-2\" />\n                      Cancel\n                    </Button>\n                    <Button\n                      onClick={form.handleSubmit(handleSave)}\n                      disabled={updateProfileMutation.isPending}\n                      data-testid=\"button-save-profile\"\n                    >\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                    </Button>\n                  </div>\n                )}\n              </CardHeader>\n              \n              <CardContent className=\"space-y-6\">\n                <form onSubmit={form.handleSubmit(handleSave)} className=\"space-y-4\">\n                  {/* Full Name */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"fullName\">Full Name *</Label>\n                    <Input\n                      id=\"fullName\"\n                      {...form.register(\"fullName\")}\n                      disabled={!isEditing}\n                      data-testid=\"input-full-name\"\n                    />\n                    {form.formState.errors.fullName && (\n                      <p className=\"text-sm text-destructive\">\n                        {form.formState.errors.fullName.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Email */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      {...form.register(\"email\")}\n                      disabled={!isEditing}\n                      data-testid=\"input-email\"\n                    />\n                    {form.formState.errors.email && (\n                      <p className=\"text-sm text-destructive\">\n                        {form.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Phone */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      {...form.register(\"phone\")}\n                      disabled={!isEditing}\n                      placeholder=\"+1 (555) 123-4567\"\n                      data-testid=\"input-phone\"\n                    />\n                    {form.formState.errors.phone && (\n                      <p className=\"text-sm text-destructive\">\n                        {form.formState.errors.phone.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Location */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"location\">Location</Label>\n                    <Input\n                      id=\"location\"\n                      {...form.register(\"location\")}\n                      disabled={!isEditing}\n                      placeholder=\"City, Country\"\n                      data-testid=\"input-location\"\n                    />\n                    {form.formState.errors.location && (\n                      <p className=\"text-sm text-destructive\">\n                        {form.formState.errors.location.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Bio */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"bio\">Bio</Label>\n                    <textarea\n                      id=\"bio\"\n                      {...form.register(\"bio\")}\n                      disabled={!isEditing}\n                      rows={3}\n                      className=\"w-full px-3 py-2 border border-input rounded-md text-sm placeholder:text-muted-foreground disabled:opacity-50 disabled:cursor-not-allowed resize-none\"\n                      placeholder=\"Tell us about yourself...\"\n                      data-testid=\"input-bio\"\n                    />\n                    {form.formState.errors.bio && (\n                      <p className=\"text-sm text-destructive\">\n                        {form.formState.errors.bio.message}\n                      </p>\n                    )}\n                  </div>\n                </form>\n\n                {!isEditing && (\n                  <div className=\"pt-4 border-t\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      <strong>Note:</strong> Changes to your profile will be recorded in the audit log for security purposes.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":13322},"server/database-storage.ts":{"content":"import { users, vaultItems, accessRequests, auditLogs, zkProofs } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport type { \n  User, \n  InsertUser, \n  VaultItem, \n  InsertVaultItem,\n  AccessRequest,\n  InsertAccessRequest,\n  AuditLog,\n  InsertAuditLog,\n  ZKProof,\n  InsertZKProof\n} from \"@shared/schema\";\nimport { IStorage } from \"./storage\";\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    \n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    return user;\n  }\n\n  // Vault Items\n  async getVaultItems(userId: string): Promise<VaultItem[]> {\n    return await db.select().from(vaultItems).where(eq(vaultItems.userId, userId));\n  }\n\n  async getVaultItemsByCategory(userId: string, category: string): Promise<VaultItem[]> {\n    return await db\n      .select()\n      .from(vaultItems)\n      .where(eq(vaultItems.userId, userId))\n      .where(eq(vaultItems.category, category));\n  }\n\n  async createVaultItem(insertItem: InsertVaultItem): Promise<VaultItem> {\n    const [item] = await db\n      .insert(vaultItems)\n      .values(insertItem)\n      .returning();\n    return item;\n  }\n\n  // Access Requests\n  async getAccessRequests(userId: string): Promise<AccessRequest[]> {\n    return await db\n      .select()\n      .from(accessRequests)\n      .where(eq(accessRequests.userId, userId))\n      .orderBy(accessRequests.requestDate);\n  }\n\n  async createAccessRequest(insertRequest: InsertAccessRequest): Promise<AccessRequest> {\n    const [request] = await db\n      .insert(accessRequests)\n      .values(insertRequest)\n      .returning();\n    return request;\n  }\n\n  async updateAccessRequestStatus(id: string, status: string, responseDate?: Date): Promise<AccessRequest> {\n    const [request] = await db\n      .update(accessRequests)\n      .set({ \n        status, \n        responseDate: responseDate || new Date() \n      })\n      .where(eq(accessRequests.id, id))\n      .returning();\n    \n    if (!request) {\n      throw new Error(\"Access request not found\");\n    }\n    return request;\n  }\n\n  // Audit Logs\n  async getAuditLogs(userId: string, limit: number = 10): Promise<AuditLog[]> {\n    return await db\n      .select()\n      .from(auditLogs)\n      .where(eq(auditLogs.userId, userId))\n      .orderBy(auditLogs.timestamp)\n      .limit(limit);\n  }\n\n  async createAuditLog(insertLog: InsertAuditLog): Promise<AuditLog> {\n    const [log] = await db\n      .insert(auditLogs)\n      .values(insertLog)\n      .returning();\n    return log;\n  }\n\n  // ZK Proofs\n  async getZKProofs(userId: string): Promise<ZKProof[]> {\n    return await db\n      .select()\n      .from(zkProofs)\n      .where(eq(zkProofs.userId, userId))\n      .orderBy(zkProofs.createdAt);\n  }\n\n  async createZKProof(insertProof: InsertZKProof): Promise<ZKProof> {\n    const [proof] = await db\n      .insert(zkProofs)\n      .values(insertProof)\n      .returning();\n    return proof;\n  }\n}","size_bytes":3626},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/DocumentUploader.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Upload, \n  Camera, \n  FileText,\n  Plus,\n  X\n} from \"lucide-react\";\n\ninterface DocumentUploaderProps {\n  category: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface DocumentFormData {\n  name: string;\n  privacyLevel: number;\n  documentType: string;\n  description: string;\n}\n\nexport default function DocumentUploader({ category, isOpen, onClose }: DocumentUploaderProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [uploadedFileUrl, setUploadedFileUrl] = useState<string>(\"\");\n  const [formData, setFormData] = useState<DocumentFormData>({\n    name: \"\",\n    privacyLevel: 5,\n    documentType: \"\",\n    description: \"\",\n  });\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isScanning, setIsScanning] = useState(false);\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n\n  const saveDocumentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/vault-items\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Document Saved\",\n        description: \"Document has been added to your vault successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      handleClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Save Failed\",\n        description: error.message || \"Failed to save document\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClose = () => {\n    setUploadedFileUrl(\"\");\n    setFormData({\n      name: \"\",\n      privacyLevel: 5,\n      documentType: \"\",\n      description: \"\",\n    });\n    setIsScanning(false);\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n    onClose();\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file size (10MB limit)\n    if (file.size > 10485760) {\n      toast({\n        title: \"File Too Large\",\n        description: \"Please select a file smaller than 10MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/objects/upload\");\n      \n      const uploadResponse = await fetch(response.uploadURL, {\n        method: \"PUT\",\n        body: file,\n        headers: {\n          \"Content-Type\": file.type,\n        },\n      });\n      \n      if (uploadResponse.ok) {\n        setUploadedFileUrl(response.uploadURL);\n        toast({\n          title: \"Upload Complete\",\n          description: \"Document uploaded successfully. Now add details.\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Upload Failed\",\n        description: \"Failed to upload document. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const startScanning = async () => {\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: { facingMode: \"environment\" }\n      });\n      setStream(mediaStream);\n      setIsScanning(true);\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n      }\n    } catch (error) {\n      toast({\n        title: \"Camera Access Denied\",\n        description: \"Unable to access camera. Please use file upload instead.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const captureDocument = async () => {\n    if (!videoRef.current || !canvasRef.current) return;\n    \n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    \n    if (!ctx) return;\n\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    ctx.drawImage(video, 0, 0);\n    \n    canvas.toBlob(async (blob) => {\n      if (!blob) return;\n      \n      setIsUploading(true);\n      try {\n        const response = await apiRequest(\"POST\", \"/api/objects/upload\");\n        const uploadResponse = await fetch(response.uploadURL, {\n          method: \"PUT\",\n          body: blob,\n          headers: {\n            \"Content-Type\": \"image/jpeg\",\n          },\n        });\n        \n        if (uploadResponse.ok) {\n          setUploadedFileUrl(response.uploadURL);\n          setIsScanning(false);\n          if (stream) {\n            stream.getTracks().forEach(track => track.stop());\n            setStream(null);\n          }\n          toast({\n            title: \"Document Captured\",\n            description: \"Document scanned successfully. Now add details.\",\n          });\n        }\n      } catch (error) {\n        toast({\n          title: \"Upload Failed\",\n          description: \"Failed to upload scanned document.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsUploading(false);\n      }\n    }, \"image/jpeg\", 0.9);\n  };\n\n  const handleSaveDocument = async () => {\n    if (!uploadedFileUrl || !formData.name) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please upload a document and fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const documentData = {\n      category,\n      name: formData.name,\n      privacyLevel: formData.privacyLevel,\n      data: {\n        type: formData.documentType,\n        description: formData.description,\n        fileUrl: uploadedFileUrl,\n        uploadedAt: new Date().toISOString(),\n      },\n    };\n\n    saveDocumentMutation.mutate(documentData);\n  };\n\n  const getDocumentTypes = () => {\n    switch (category) {\n      case \"health\":\n        return [\n          { value: \"medical_records\", label: \"Medical Records\" },\n          { value: \"prescription\", label: \"Prescription\" },\n          { value: \"test_results\", label: \"Test Results\" },\n          { value: \"insurance_card\", label: \"Insurance Card\" },\n          { value: \"vaccination\", label: \"Vaccination Record\" },\n        ];\n      case \"insurance\":\n        return [\n          { value: \"policy_document\", label: \"Policy Document\" },\n          { value: \"insurance_card\", label: \"Insurance Card\" },\n          { value: \"claim_form\", label: \"Claim Form\" },\n          { value: \"coverage_summary\", label: \"Coverage Summary\" },\n        ];\n      case \"ids\":\n        return [\n          { value: \"drivers_license\", label: \"Driver's License\" },\n          { value: \"passport\", label: \"Passport\" },\n          { value: \"national_id\", label: \"National ID\" },\n          { value: \"birth_certificate\", label: \"Birth Certificate\" },\n          { value: \"social_security\", label: \"Social Security Card\" },\n        ];\n      default:\n        return [\n          { value: \"document\", label: \"Document\" },\n          { value: \"certificate\", label: \"Certificate\" },\n          { value: \"form\", label: \"Form\" },\n        ];\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Upload className=\"h-5 w-5\" />\n            <span>Upload Document</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Upload Section */}\n          {!uploadedFileUrl && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  onClick={() => setIsScanning(false)}\n                  variant={!isScanning ? \"default\" : \"outline\"}\n                  className=\"flex items-center space-x-2\"\n                  disabled={isUploading}\n                >\n                  <FileText className=\"h-4 w-4\" />\n                  <span>Upload File</span>\n                </Button>\n                <Button\n                  onClick={startScanning}\n                  variant={isScanning ? \"default\" : \"outline\"}\n                  className=\"flex items-center space-x-2\"\n                  disabled={isUploading}\n                >\n                  <Camera className=\"h-4 w-4\" />\n                  <span>Scan Document</span>\n                </Button>\n              </div>\n\n              {!isScanning ? (\n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center\">\n                  <div className=\"space-y-4\">\n                    <FileText className=\"h-16 w-16 mx-auto text-gray-400\" />\n                    <div>\n                      <h3 className=\"text-lg font-medium\">Upload Document</h3>\n                      <p className=\"text-muted-foreground\">\n                        Select a file to upload (PDF, DOC, JPG, PNG - Max 10MB)\n                      </p>\n                    </div>\n                    <div>\n                      <input\n                        ref={fileInputRef}\n                        type=\"file\"\n                        accept=\".jpg,.jpeg,.png,.pdf,.doc,.docx\"\n                        onChange={handleFileUpload}\n                        className=\"hidden\"\n                      />\n                      <Button\n                        onClick={() => fileInputRef.current?.click()}\n                        disabled={isUploading}\n                        className=\"flex items-center space-x-2\"\n                      >\n                        <Upload className=\"h-4 w-4\" />\n                        <span>{isUploading ? \"Uploading...\" : \"Choose File\"}</span>\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <div className=\"relative\">\n                    <video\n                      ref={videoRef}\n                      autoPlay\n                      playsInline\n                      className=\"w-full max-w-md mx-auto rounded-lg border\"\n                    />\n                    <canvas ref={canvasRef} className=\"hidden\" />\n                  </div>\n                  <div className=\"flex justify-center space-x-4\">\n                    <Button \n                      onClick={captureDocument} \n                      disabled={isUploading}\n                      className=\"flex items-center space-x-2\"\n                    >\n                      <Camera className=\"h-4 w-4\" />\n                      <span>{isUploading ? \"Processing...\" : \"Capture\"}</span>\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => {\n                        setIsScanning(false);\n                        if (stream) {\n                          stream.getTracks().forEach(track => track.stop());\n                          setStream(null);\n                        }\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Document Details Form */}\n          {uploadedFileUrl && (\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                <p className=\"text-sm text-green-700 dark:text-green-300 flex items-center\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Document uploaded successfully! Now add the details.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Document Name *</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Enter document name\"\n                    data-testid=\"input-document-name\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"documentType\">Document Type *</Label>\n                  <Select \n                    value={formData.documentType} \n                    onValueChange={(value) => setFormData(prev => ({ ...prev, documentType: value }))}\n                  >\n                    <SelectTrigger data-testid=\"select-document-type\">\n                      <SelectValue placeholder=\"Select document type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {getDocumentTypes().map((type) => (\n                        <SelectItem key={type.value} value={type.value}>\n                          {type.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"privacyLevel\">Privacy Level</Label>\n                  <Select \n                    value={formData.privacyLevel.toString()} \n                    onValueChange={(value) => setFormData(prev => ({ ...prev, privacyLevel: parseInt(value) }))}\n                  >\n                    <SelectTrigger data-testid=\"select-privacy-level\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"3\">Level 3 - Enhanced</SelectItem>\n                      <SelectItem value=\"4\">Level 4 - High</SelectItem>\n                      <SelectItem value=\"5\">Level 5 - Maximum (Recommended)</SelectItem>\n                      <SelectItem value=\"6\">Level 6 - Ultra Secure</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description (Optional)</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"Add any additional notes about this document...\"\n                  className=\"min-h-[80px]\"\n                  data-testid=\"textarea-description\"\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-3\">\n                <Button variant=\"outline\" onClick={handleClose}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleSaveDocument} \n                  disabled={saveDocumentMutation.isPending}\n                  data-testid=\"button-save-document\"\n                >\n                  {saveDocumentMutation.isPending ? \"Saving...\" : \"Save Document\"}\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":15608},"client/src/pages/audit-log.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport Header from \"@/components/dashboard/header\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\nimport { \n  Check, \n  AlertTriangle, \n  Key, \n  X, \n  Clock, \n  Shield,\n  Search,\n  Filter,\n  Download,\n  Calendar\n} from \"lucide-react\";\nimport { formatDistanceToNow, format } from \"date-fns\";\nimport { useState } from \"react\";\nimport type { User, AuditLog } from \"@shared/schema\";\n\ninterface DashboardData {\n  user: User;\n  auditLogs: AuditLog[];\n  accessRequests: any[];\n}\n\nexport default function AuditLogPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterAction, setFilterAction] = useState(\"all\");\n  const [filterPrivacyLevel, setFilterPrivacyLevel] = useState(\"all\");\n\n  const { data: dashboardData, isLoading } = useQuery<DashboardData>({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  const pendingRequests = dashboardData?.accessRequests?.filter(req => req.status === \"pending\") || [];\n\n  const getActivityIcon = (action: string) => {\n    switch (action) {\n      case \"access_granted\":\n        return <Check className=\"h-5 w-5 text-green-600\" />;\n      case \"access_request_received\":\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />;\n      case \"zk_proof_generated\":\n        return <Key className=\"h-5 w-5 text-blue-600\" />;\n      case \"access_denied\":\n      case \"access_revoked\":\n        return <X className=\"h-5 w-5 text-red-600\" />;\n      case \"profile_updated\":\n        return <Shield className=\"h-5 w-5 text-purple-600\" />;\n      case \"privacy_level_updated\":\n        return <Shield className=\"h-5 w-5 text-indigo-600\" />;\n      default:\n        return <Shield className=\"h-5 w-5 text-gray-600\" />;\n    }\n  };\n\n  const getActivityColor = (action: string) => {\n    switch (action) {\n      case \"access_granted\":\n        return \"bg-green-100 dark:bg-green-900/20\";\n      case \"access_request_received\":\n        return \"bg-yellow-100 dark:bg-yellow-900/20\";\n      case \"zk_proof_generated\":\n        return \"bg-blue-100 dark:bg-blue-900/20\";\n      case \"access_denied\":\n      case \"access_revoked\":\n        return \"bg-red-100 dark:bg-red-900/20\";\n      case \"profile_updated\":\n        return \"bg-purple-100 dark:bg-purple-900/20\";\n      case \"privacy_level_updated\":\n        return \"bg-indigo-100 dark:bg-indigo-900/20\";\n      default:\n        return \"bg-gray-100 dark:bg-gray-900/20\";\n    }\n  };\n\n  const getActionBadgeColor = (action: string) => {\n    switch (action) {\n      case \"access_granted\":\n        return \"bg-green-500\";\n      case \"access_request_received\":\n        return \"bg-yellow-500\";\n      case \"zk_proof_generated\":\n        return \"bg-blue-500\";\n      case \"access_denied\":\n      case \"access_revoked\":\n        return \"bg-red-500\";\n      case \"profile_updated\":\n        return \"bg-purple-500\";\n      case \"privacy_level_updated\":\n        return \"bg-indigo-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  const formatActionName = (action: string) => {\n    return action\n      .split('_')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  };\n\n  const filteredLogs = dashboardData?.auditLogs?.filter(log => {\n    const matchesSearch = log.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (log.entityName && log.entityName.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesAction = filterAction === \"all\" || log.action === filterAction;\n    const matchesPrivacyLevel = filterPrivacyLevel === \"all\" || \n                                log.privacyLevel?.toString() === filterPrivacyLevel;\n    \n    return matchesSearch && matchesAction && matchesPrivacyLevel;\n  }) || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header user={undefined} pendingRequestsCount={0} />\n        <div className=\"flex pt-16\">\n          <Sidebar />\n          <main className=\"flex-1 ml-64 p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-muted rounded w-64\"></div>\n              <div className=\"h-32 bg-muted rounded\"></div>\n              <div className=\"space-y-4\">\n                <div className=\"h-16 bg-muted rounded\"></div>\n                <div className=\"h-16 bg-muted rounded\"></div>\n                <div className=\"h-16 bg-muted rounded\"></div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header user={dashboardData?.user} pendingRequestsCount={pendingRequests.length} />\n      \n      <div className=\"flex pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 ml-64 p-6 space-y-6\">\n          {/* Page Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"title-audit-log\">Complete Audit Log</h1>\n              <p className=\"text-muted-foreground\">\n                Comprehensive log of all activity and data interactions\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                <Shield className=\"w-4 h-4\" />\n                <span>Privacy Level {dashboardData?.user?.privacyLevel || 0}</span>\n              </Badge>\n              <Button \n                variant=\"outline\" \n                className=\"flex items-center space-x-2\"\n                data-testid=\"button-export-audit-log\"\n              >\n                <Download className=\"h-4 w-4\" />\n                <span>Export</span>\n              </Button>\n            </div>\n          </div>\n\n          {/* Filters and Search */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Filter className=\"h-5 w-5\" />\n                <span>Filter & Search</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search logs...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-9\"\n                    data-testid=\"input-search-logs\"\n                  />\n                </div>\n                <Select value={filterAction} onValueChange={setFilterAction}>\n                  <SelectTrigger data-testid=\"select-filter-action\">\n                    <SelectValue placeholder=\"All Actions\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Actions</SelectItem>\n                    <SelectItem value=\"access_granted\">Access Granted</SelectItem>\n                    <SelectItem value=\"access_denied\">Access Denied</SelectItem>\n                    <SelectItem value=\"access_revoked\">Access Revoked</SelectItem>\n                    <SelectItem value=\"access_request_received\">Request Received</SelectItem>\n                    <SelectItem value=\"zk_proof_generated\">ZK Proof Generated</SelectItem>\n                    <SelectItem value=\"profile_updated\">Profile Updated</SelectItem>\n                    <SelectItem value=\"privacy_level_updated\">Privacy Level Updated</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Select value={filterPrivacyLevel} onValueChange={setFilterPrivacyLevel}>\n                  <SelectTrigger data-testid=\"select-filter-privacy\">\n                    <SelectValue placeholder=\"All Privacy Levels\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Levels</SelectItem>\n                    <SelectItem value=\"0\">Level 0</SelectItem>\n                    <SelectItem value=\"1\">Level 1</SelectItem>\n                    <SelectItem value=\"2\">Level 2</SelectItem>\n                    <SelectItem value=\"3\">Level 3</SelectItem>\n                    <SelectItem value=\"4\">Level 4</SelectItem>\n                    <SelectItem value=\"5\">Level 5</SelectItem>\n                    <SelectItem value=\"6\">Level 6</SelectItem>\n                  </SelectContent>\n                </Select>\n                <div className=\"text-sm text-muted-foreground flex items-center\">\n                  <span data-testid=\"text-results-count\">\n                    {filteredLogs.length} of {dashboardData?.auditLogs?.length || 0} entries\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Audit Log Entries */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Clock className=\"h-5 w-5\" />\n                <span>Activity Timeline</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {filteredLogs.length === 0 ? (\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  <Shield className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No audit entries found</h3>\n                  <p>Try adjusting your filters or search terms</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {filteredLogs.map((log, index) => (\n                    <div key={log.id}>\n                      <div \n                        className={`p-6 rounded-lg border ${getActivityColor(log.action)}`}\n                        data-testid={`audit-entry-${log.id}`}\n                      >\n                        <div className=\"flex items-start space-x-4\">\n                          <div className={`w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0 ${getActionBadgeColor(log.action)}`}>\n                            {getActivityIcon(log.action)}\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <Badge \n                                variant=\"outline\" \n                                className=\"text-xs font-medium\"\n                                data-testid={`action-badge-${log.id}`}\n                              >\n                                {formatActionName(log.action)}\n                              </Badge>\n                              <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                                <span className=\"flex items-center\" data-testid={`timestamp-${log.id}`}>\n                                  <Calendar className=\"h-3 w-3 mr-1\" />\n                                  {log.timestamp \n                                    ? format(new Date(log.timestamp), \"MMM dd, yyyy 'at' HH:mm\")\n                                    : \"Unknown time\"\n                                  }\n                                </span>\n                                <span className=\"flex items-center\" data-testid={`relative-time-${log.id}`}>\n                                  <Clock className=\"h-3 w-3 mr-1\" />\n                                  {log.timestamp \n                                    ? formatDistanceToNow(new Date(log.timestamp), { addSuffix: true })\n                                    : \"Unknown\"\n                                  }\n                                </span>\n                              </div>\n                            </div>\n                            <h3 className=\"font-medium text-foreground mb-1\" data-testid={`description-${log.id}`}>\n                              {log.description}\n                            </h3>\n                            {log.entityName && (\n                              <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`entity-${log.id}`}>\n                                Entity: <span className=\"font-medium\">{log.entityName}</span>\n                              </p>\n                            )}\n                            <div className=\"flex items-center space-x-4\">\n                              {log.privacyLevel && (\n                                <Badge \n                                  variant=\"secondary\" \n                                  className=\"text-xs\"\n                                  data-testid={`privacy-badge-${log.id}`}\n                                >\n                                  <Shield className=\"h-3 w-3 mr-1\" />\n                                  Privacy Level {log.privacyLevel}\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      {index < filteredLogs.length - 1 && (\n                        <Separator className=\"my-2\" />\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":13705},"client/src/pages/privacy-levels.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport Header from \"@/components/dashboard/header\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\nimport { \n  Shield, \n  Lock, \n  Eye, \n  EyeOff, \n  Globe, \n  Users, \n  UserCheck, \n  ShieldCheck,\n  ShieldAlert,\n  AlertTriangle,\n  CheckCircle,\n  Info\n} from \"lucide-react\";\nimport type { User, VaultItem } from \"@shared/schema\";\n\ninterface DashboardData {\n  user: User;\n  vaultItems: VaultItem[];\n  accessRequests: any[];\n}\n\nexport default function PrivacyLevels() {\n  const { data: dashboardData, isLoading } = useQuery<DashboardData>({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  const pendingRequests = dashboardData?.accessRequests?.filter(req => req.status === \"pending\") || [];\n  const user = dashboardData?.user;\n  const vaultItems = dashboardData?.vaultItems || [];\n\n  const privacyLevels = [\n    {\n      level: 0,\n      name: \"Absolute Confidential\",\n      icon: ShieldAlert,\n      color: \"text-green-800\",\n      bgColor: \"bg-green-100 dark:bg-green-900/20\",\n      description: \"Most sensitive user data. Only you can access.\",\n      access: \"User only - never shared with third parties or applications\",\n      examples: [\"Private keys\", \"Complete medical history\", \"Raw biometric data\"],\n      risks: [\"Maximum security\", \"Always encrypted\", \"Zero sharing\"],\n      dataCount: vaultItems.filter(item => item.privacyLevel === 0).length\n    },\n    {\n      level: 1,\n      name: \"Controlled Sensitive\",\n      icon: ShieldCheck,\n      color: \"text-green-600\", \n      bgColor: \"bg-green-100 dark:bg-green-900/20\",\n      description: \"Very sensitive data with temporary sharing and explicit consent\",\n      access: \"Short-term permissions only (e.g., 24h to doctor), always audited\",\n      examples: [\"Lab results\", \"Financial details\", \"Specific medical diagnoses\"],\n      risks: [\"High security\", \"Temporary access only\", \"Full audit trail\"],\n      dataCount: vaultItems.filter(item => item.privacyLevel === 1).length\n    },\n    {\n      level: 2,\n      name: \"Private Information\",\n      icon: Lock,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-100 dark:bg-green-900/20\", \n      description: \"Private data shared with trusted institutions under contracts\",\n      access: \"Trusted institutions with user permissions and contracts\",\n      examples: [\"Address\", \"Phone\", \"Academic/work history\"],\n      risks: [\"Good privacy\", \"Granular control\", \"Full traceability\"],\n      dataCount: vaultItems.filter(item => item.privacyLevel === 2).length\n    },\n    {\n      level: 3,\n      name: \"Internal Information\",\n      icon: UserCheck,\n      color: \"text-yellow-600\",\n      bgColor: \"bg-yellow-100 dark:bg-yellow-900/20\",\n      description: \"Internal organizational data with privacy agreements\",\n      access: \"Authorized organizations under privacy agreements\",\n      examples: [\"Insurance usage reports\", \"Internal evaluations\", \"Company notes\"],\n      risks: [\"Moderate privacy\", \"Organizational access\", \"Privacy agreements\"],\n      dataCount: vaultItems.filter(item => item.privacyLevel === 3).length\n    },\n    {\n      level: 4,\n      name: \"Controlled Public\",\n      icon: Users,\n      color: \"text-orange-600\", \n      bgColor: \"bg-orange-100 dark:bg-orange-900/20\",\n      description: \"User-controlled public or partial sharing\",\n      access: \"User defines what to show and to whom in specific contexts\",\n      examples: [\"Professional profile\", \"Public certifications\", \"Social aliases\"],\n      risks: [\"User-controlled exposure\", \"Context-specific sharing\", \"Managed visibility\"],\n      dataCount: vaultItems.filter(item => item.privacyLevel === 4).length\n    },\n    {\n      level: 5,\n      name: \"ZK Proof Access\",\n      icon: Eye,\n      color: \"text-red-600\",\n      bgColor: \"bg-red-100 dark:bg-red-900/20\", \n      description: \"Zero-knowledge proofs that verify without revealing actual data\",\n      access: \"Cryptographic proofs verify claims without exposing data\",\n      examples: [\"Prove age >18\", \"Prove insurance is active\", \"Income range verification\"],\n      risks: [\"Data remains private\", \"Only proof verification\", \"No data exposure\"],\n      dataCount: vaultItems.filter(item => item.privacyLevel === 5).length\n    },\n    {\n      level: 6,\n      name: \"Ecosystem Apps\",\n      icon: Globe,\n      color: \"text-red-600\",\n      bgColor: \"bg-red-100 dark:bg-red-900/20\",\n      description: \"Third-party applications built on IDShield with user control\", \n      access: \"External apps and services under absolute user control\",\n      examples: [\"Hospital apps reading medical records\", \"Insurance company systems\", \"Third-party integrations\"],\n      risks: [\"External access\", \"User-controlled permissions\", \"Potential monetization\"],\n      dataCount: vaultItems.filter(item => item.privacyLevel === 6).length\n    }\n  ];\n\n  const currentLevel = privacyLevels.find(level => level.level === user?.privacyLevel) || privacyLevels[4];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header user={undefined} pendingRequestsCount={0} />\n        <div className=\"flex pt-16\">\n          <Sidebar />\n          <main className=\"flex-1 ml-64 p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-muted rounded w-64\"></div>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"h-96 bg-muted rounded\"></div>\n                <div className=\"h-96 bg-muted rounded\"></div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header user={user} pendingRequestsCount={pendingRequests.length} />\n      \n      <div className=\"flex pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 ml-64 p-6 space-y-6\">\n          {/* Page Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"title-privacy-levels\">Privacy Levels (0–6)</h1>\n              <p className=\"text-muted-foreground\">\n                Understand and manage your data privacy levels\n              </p>\n            </div>\n            <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n              <currentLevel.icon className=\"w-4 h-4\" />\n              <span>Current: Level {user?.privacyLevel || 4}</span>\n            </Badge>\n          </div>\n\n          {/* Current Privacy Level Overview */}\n          <Card data-testid=\"card-current-level\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <currentLevel.icon className={`h-6 w-6 ${currentLevel.color}`} />\n                <span>Your Current Privacy Level: {currentLevel.name}</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <p className=\"text-lg font-medium mb-2\">{currentLevel.description}</p>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      <strong>Access:</strong> {currentLevel.access}\n                    </p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium mb-2 flex items-center\">\n                      <Info className=\"h-4 w-4 mr-2\" />\n                      Data at This Level:\n                    </h4>\n                    <div className=\"text-sm text-muted-foreground\">\n                      <span className=\"font-bold text-2xl text-foreground\">{currentLevel.dataCount}</span> vault items\n                    </div>\n                  </div>\n                </div>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Examples:</h4>\n                    <ul className=\"text-sm text-muted-foreground space-y-1\">\n                      {currentLevel.examples.map((example, index) => (\n                        <li key={index} className=\"flex items-center\">\n                          <CheckCircle className=\"h-3 w-3 mr-2 text-green-600\" />\n                          {example}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n              <Progress value={(user?.privacyLevel || 4) * 100 / 6} className=\"mt-6\" />\n            </CardContent>\n          </Card>\n\n          {/* All Privacy Levels */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {privacyLevels.map((level) => {\n              const isCurrentLevel = level.level === user?.privacyLevel;\n              \n              return (\n                <Card \n                  key={level.level} \n                  className={`${isCurrentLevel ? 'ring-2 ring-primary' : ''} ${level.bgColor}`}\n                  data-testid={`card-level-${level.level}`}\n                >\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <level.icon className={`h-5 w-5 ${level.color}`} />\n                        <span>Level {level.level}: {level.name}</span>\n                      </div>\n                      {isCurrentLevel && (\n                        <Badge variant=\"default\" className=\"text-xs\">\n                          CURRENT\n                        </Badge>\n                      )}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <p className=\"text-sm\">{level.description}</p>\n                    \n                    <div>\n                      <h5 className=\"text-xs font-medium uppercase tracking-wide text-muted-foreground mb-2\">\n                        Data Count\n                      </h5>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-lg font-bold\">{level.dataCount}</span>\n                        <span className=\"text-sm text-muted-foreground\">items</span>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h5 className=\"text-xs font-medium uppercase tracking-wide text-muted-foreground mb-2\">\n                        Access Control\n                      </h5>\n                      <p className=\"text-xs text-muted-foreground\">{level.access}</p>\n                    </div>\n\n                    <div>\n                      <h5 className=\"text-xs font-medium uppercase tracking-wide text-muted-foreground mb-2\">\n                        Protection Level\n                      </h5>\n                      <div className=\"flex items-center space-y-1\">\n                        {level.risks.map((risk, index) => (\n                          <span key={index} className=\"text-xs text-muted-foreground\">\n                            {risk}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          {/* Privacy Tips */}\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Privacy Tip:</strong> Lower privacy levels (0-2) provide maximum protection for sensitive data. \n              Level 0 offers absolute confidentiality, while higher levels (4-6) enable more sharing and functionality.\n            </AlertDescription>\n          </Alert>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":12018},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/dashboard/header\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\nimport { \n  Settings as SettingsIcon,\n  Shield,\n  Bell,\n  Lock,\n  Eye,\n  Database,\n  Trash2,\n  Download,\n  Upload,\n  AlertTriangle,\n  CheckCircle,\n  Save\n} from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\ninterface DashboardData {\n  user: User;\n  accessRequests: any[];\n}\n\nconst settingsSchema = z.object({\n  emailNotifications: z.boolean(),\n  pushNotifications: z.boolean(),\n  securityAlerts: z.boolean(),\n  privacyLevel: z.number().min(0).max(6),\n  twoFactorAuth: z.boolean(),\n  dataRetention: z.enum([\"30_days\", \"90_days\", \"1_year\", \"forever\"]),\n  autoLogout: z.enum([\"15_min\", \"1_hour\", \"4_hours\", \"never\"]),\n});\n\ntype SettingsFormData = z.infer<typeof settingsSchema>;\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { data: dashboardData, isLoading: dataLoading } = useQuery<DashboardData>({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  const pendingRequests = dashboardData?.accessRequests?.filter(req => req.status === \"pending\") || [];\n  const user = dashboardData?.user;\n\n  const form = useForm<SettingsFormData>({\n    resolver: zodResolver(settingsSchema),\n    defaultValues: {\n      emailNotifications: true,\n      pushNotifications: true,\n      securityAlerts: true,\n      privacyLevel: user?.privacyLevel || 4,\n      twoFactorAuth: false,\n      dataRetention: \"1_year\",\n      autoLogout: \"1_hour\",\n    },\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (data: SettingsFormData) => {\n      return apiRequest(\"PATCH\", \"/api/settings\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings Updated\",\n        description: \"Your preferences have been saved successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = (data: SettingsFormData) => {\n    setIsLoading(true);\n    updateSettingsMutation.mutate(data);\n    setTimeout(() => setIsLoading(false), 1000);\n  };\n\n  const handleExportData = () => {\n    toast({\n      title: \"Data Export Started\",\n      description: \"Your data export will be ready shortly and sent to your email.\",\n    });\n  };\n\n  const handleDeleteAccount = () => {\n    toast({\n      title: \"Account Deletion\",\n      description: \"This action requires additional verification. Check your email for next steps.\",\n      variant: \"destructive\",\n    });\n  };\n\n  if (dataLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header user={user} pendingRequestsCount={pendingRequests.length} />\n        <div className=\"flex pt-16\">\n          <Sidebar />\n          <main className=\"flex-1 ml-64 p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-muted rounded w-48\"></div>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"h-96 bg-muted rounded\"></div>\n                <div className=\"h-96 bg-muted rounded\"></div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header user={user} pendingRequestsCount={pendingRequests.length} />\n      \n      <div className=\"flex pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 ml-64 p-6 space-y-6\">\n          {/* Page Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"title-settings\">Settings</h1>\n              <p className=\"text-muted-foreground\">\n                Manage your account preferences and privacy settings\n              </p>\n            </div>\n            <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n              <Shield className=\"w-4 h-4\" />\n              <span>Privacy Level {user?.privacyLevel || 0}</span>\n            </Badge>\n          </div>\n\n          <form onSubmit={form.handleSubmit(handleSave)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Privacy & Security */}\n              <Card data-testid=\"card-privacy-security\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Lock className=\"h-5 w-5\" />\n                    <span>Privacy & Security</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-2\">\n                    <Label>Privacy Level (0-6)</Label>\n                    <Select \n                      value={form.watch(\"privacyLevel\").toString()} \n                      onValueChange={(value) => form.setValue(\"privacyLevel\", parseInt(value))}\n                    >\n                      <SelectTrigger data-testid=\"select-privacy-level\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"0\">Level 0 - Public</SelectItem>\n                        <SelectItem value=\"1\">Level 1 - Basic</SelectItem>\n                        <SelectItem value=\"2\">Level 2 - Standard</SelectItem>\n                        <SelectItem value=\"3\">Level 3 - Enhanced</SelectItem>\n                        <SelectItem value=\"4\">Level 4 - High</SelectItem>\n                        <SelectItem value=\"5\">Level 5 - Maximum</SelectItem>\n                        <SelectItem value=\"6\">Level 6 - Ultra Secure</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Higher levels provide more data protection but may limit functionality\n                    </p>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Two-Factor Authentication</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Add an extra layer of security\n                      </p>\n                    </div>\n                    <Switch \n                      checked={form.watch(\"twoFactorAuth\")}\n                      onCheckedChange={(checked) => form.setValue(\"twoFactorAuth\", checked)}\n                      data-testid=\"switch-2fa\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>Auto Logout</Label>\n                    <Select \n                      value={form.watch(\"autoLogout\")} \n                      onValueChange={(value: any) => form.setValue(\"autoLogout\", value)}\n                    >\n                      <SelectTrigger data-testid=\"select-auto-logout\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"15_min\">15 minutes</SelectItem>\n                        <SelectItem value=\"1_hour\">1 hour</SelectItem>\n                        <SelectItem value=\"4_hours\">4 hours</SelectItem>\n                        <SelectItem value=\"never\">Never</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Notifications */}\n              <Card data-testid=\"card-notifications\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Bell className=\"h-5 w-5\" />\n                    <span>Notifications</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Email Notifications</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Receive updates via email\n                      </p>\n                    </div>\n                    <Switch \n                      checked={form.watch(\"emailNotifications\")}\n                      onCheckedChange={(checked) => form.setValue(\"emailNotifications\", checked)}\n                      data-testid=\"switch-email-notifications\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Push Notifications</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Browser and mobile alerts\n                      </p>\n                    </div>\n                    <Switch \n                      checked={form.watch(\"pushNotifications\")}\n                      onCheckedChange={(checked) => form.setValue(\"pushNotifications\", checked)}\n                      data-testid=\"switch-push-notifications\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Security Alerts</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Critical security notifications\n                      </p>\n                    </div>\n                    <Switch \n                      checked={form.watch(\"securityAlerts\")}\n                      onCheckedChange={(checked) => form.setValue(\"securityAlerts\", checked)}\n                      data-testid=\"switch-security-alerts\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Data Management */}\n            <Card data-testid=\"card-data-management\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Database className=\"h-5 w-5\" />\n                  <span>Data Management</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label>Data Retention Period</Label>\n                    <Select \n                      value={form.watch(\"dataRetention\")} \n                      onValueChange={(value: any) => form.setValue(\"dataRetention\", value)}\n                    >\n                      <SelectTrigger data-testid=\"select-data-retention\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"30_days\">30 days</SelectItem>\n                        <SelectItem value=\"90_days\">90 days</SelectItem>\n                        <SelectItem value=\"1_year\">1 year</SelectItem>\n                        <SelectItem value=\"forever\">Forever</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <p className=\"text-xs text-muted-foreground\">\n                      How long to keep your audit logs and activity data\n                    </p>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={handleExportData}\n                      className=\"w-full flex items-center space-x-2\"\n                      data-testid=\"button-export-data\"\n                    >\n                      <Download className=\"h-4 w-4\" />\n                      <span>Export My Data</span>\n                    </Button>\n                    \n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      className=\"w-full flex items-center space-x-2\"\n                      data-testid=\"button-import-data\"\n                    >\n                      <Upload className=\"h-4 w-4\" />\n                      <span>Import Data</span>\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Account Actions */}\n            <Card data-testid=\"card-account-actions\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <AlertTriangle className=\"h-5 w-5 text-destructive\" />\n                  <span>Danger Zone</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Alert>\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    These actions are permanent and cannot be undone. Please proceed with caution.\n                  </AlertDescription>\n                </Alert>\n                \n                <div className=\"mt-6\">\n                  <Button \n                    type=\"button\" \n                    variant=\"destructive\" \n                    onClick={handleDeleteAccount}\n                    className=\"flex items-center space-x-2\"\n                    data-testid=\"button-delete-account\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                    <span>Delete Account</span>\n                  </Button>\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    This will permanently delete your account and all associated data\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Save Button */}\n            <div className=\"flex justify-end\">\n              <Button \n                type=\"submit\" \n                disabled={isLoading || updateSettingsMutation.isPending}\n                className=\"flex items-center space-x-2\"\n                data-testid=\"button-save-settings\"\n              >\n                {isLoading ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    <span>Saving...</span>\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4\" />\n                    <span>Save Settings</span>\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":15717},"client/src/pages/vault/health.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport DocumentUploader from \"@/components/DocumentUploader\";\nimport CreateMedicalFormDialog from \"@/components/CreateMedicalFormDialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport Header from \"@/components/dashboard/header\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\nimport { \n  Heart, \n  Shield, \n  Plus, \n  FileText, \n  Pill, \n  Activity,\n  AlertTriangle,\n  Lock,\n  Eye,\n  Calendar,\n  User\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { User as UserType, VaultItem } from \"@shared/schema\";\n\ninterface DashboardData {\n  user: UserType;\n  vaultItems: VaultItem[];\n  accessRequests: any[];\n}\n\nexport default function HealthVault() {\n  const [isUploadOpen, setIsUploadOpen] = useState(false);\n  const [isMedicalFormOpen, setIsMedicalFormOpen] = useState(false);\n  const [selectedAppointment, setSelectedAppointment] = useState<VaultItem | null>(null);\n  \n  const { data: dashboardData, isLoading, refetch } = useQuery<DashboardData>({\n    queryKey: [\"/api/dashboard\"],\n    refetchInterval: 5000, // Refresh every 5 seconds to show new medical forms\n  });\n\n  const pendingRequests = dashboardData?.accessRequests?.filter(req => req.status === \"pending\") || [];\n  const user = dashboardData?.user;\n  const healthItems = dashboardData?.vaultItems?.filter(item => item.category === \"health\") || [];\n\n  const getHealthIcon = (type: string) => {\n    switch (type) {\n      case \"medical_records\":\n        return <FileText className=\"h-5 w-5\" />;\n      case \"medications\":\n        return <Pill className=\"h-5 w-5\" />;\n      case \"vital_signs\":\n        return <Activity className=\"h-5 w-5\" />;\n      case \"medical_appointment\":\n        return <Calendar className=\"h-5 w-5\" />;\n      default:\n        return <Heart className=\"h-5 w-5\" />;\n    }\n  };\n\n  const getPrivacyBadgeColor = (level: number) => {\n    if (level <= 2) return \"bg-green-500\"; // Maximum security (0-2)\n    if (level <= 4) return \"bg-yellow-500\"; // Medium security (3-4)\n    return \"bg-red-500\"; // Lower security (5-6)\n  };\n\n  const getHealthTypeLabel = (type: string) => {\n    switch (type) {\n      case \"medical_records\":\n        return \"Medical Records\";\n      case \"medications\":\n        return \"Medications\";\n      case \"vital_signs\":\n        return \"Vital Signs\";\n      case \"medical_appointment\":\n        return \"Medical Appointment\";\n      default:\n        return \"Health Data\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header user={undefined} pendingRequestsCount={0} />\n        <div className=\"flex pt-16\">\n          <Sidebar />\n          <main className=\"flex-1 ml-64 p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-muted rounded w-48\"></div>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"h-64 bg-muted rounded\"></div>\n                <div className=\"h-64 bg-muted rounded\"></div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header user={user} pendingRequestsCount={pendingRequests.length} />\n      \n      <div className=\"flex pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 ml-64 p-6 space-y-6\">\n          {/* Page Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold flex items-center space-x-2\" data-testid=\"title-health-vault\">\n                <Heart className=\"h-8 w-8 text-red-500\" />\n                <span>Health Vault</span>\n              </h1>\n              <p className=\"text-muted-foreground\">\n                Secure storage for your medical records and health data\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                <Shield className=\"w-4 h-4\" />\n                <span>Privacy Level {user?.privacyLevel || 0}</span>\n              </Badge>\n              <div className=\"flex items-center space-x-2\">\n                <Button \n                  onClick={() => setIsUploadOpen(true)}\n                  variant=\"outline\"\n                  className=\"flex items-center space-x-2\" \n                  data-testid=\"button-upload-document\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  <span>Upload Document</span>\n                </Button>\n                <Button \n                  onClick={() => setIsMedicalFormOpen(true)}\n                  className=\"flex items-center space-x-2\" \n                  data-testid=\"button-create-medical-form\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  <span>Create Medical Form</span>\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Health Data Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card data-testid=\"card-total-health-items\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Health Items</CardTitle>\n                <Heart className=\"h-4 w-4 text-red-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{healthItems.length}</div>\n                <p className=\"text-xs text-muted-foreground\">Secure medical records</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-high-security-items\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">High Security Items</CardTitle>\n                <Lock className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {healthItems.filter(item => item.privacyLevel <= 2).length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Level 0-2 protection</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-recent-updates\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Recent Updates</CardTitle>\n                <Calendar className=\"h-4 w-4 text-blue-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {healthItems.filter(item => {\n                    const weekAgo = new Date();\n                    weekAgo.setDate(weekAgo.getDate() - 7);\n                    return new Date(item.createdAt) > weekAgo;\n                  }).length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">This week</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Health Items List */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <FileText className=\"h-5 w-5\" />\n                <span>Your Health Records</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {healthItems.length === 0 ? (\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  <Heart className=\"h-16 w-16 mx-auto mb-4 opacity-50 text-red-500\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No Health Records Yet</h3>\n                  <p className=\"mb-4\">Start building your secure health vault</p>\n                  <div className=\"flex flex-col sm:flex-row items-center space-y-2 sm:space-y-0 sm:space-x-4\">\n                    <Button \n                      onClick={() => setIsUploadOpen(true)}\n                      variant=\"outline\"\n                      className=\"flex items-center space-x-2\" \n                      data-testid=\"button-upload-first-document\"\n                    >\n                      <Plus className=\"h-4 w-4\" />\n                      <span>Upload Document</span>\n                    </Button>\n                    <Button \n                      onClick={() => setIsMedicalFormOpen(true)}\n                      className=\"flex items-center space-x-2\" \n                      data-testid=\"button-create-first-medical-form\"\n                    >\n                      <Plus className=\"h-4 w-4\" />\n                      <span>Create Medical Form</span>\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {healthItems.map((item, index) => (\n                    <div key={item.id}>\n                      <div \n                        className=\"flex items-start space-x-4 p-4 border rounded-lg hover:bg-muted/50 transition-colors cursor-pointer\" \n                        onClick={() => setSelectedAppointment(item)}\n                      >\n                        <div className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                          item.data?.type === \"medical_records\" ? \"bg-blue-100 dark:bg-blue-900/20 text-blue-600\" :\n                          item.data?.type === \"medications\" ? \"bg-green-100 dark:bg-green-900/20 text-green-600\" :\n                          \"bg-red-100 dark:bg-red-900/20 text-red-600\"\n                        }`}>\n                          {getHealthIcon(item.data?.type as string)}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h3 className=\"font-medium text-foreground\" data-testid={`health-item-name-${item.id}`}>\n                              {item.name}\n                            </h3>\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge \n                                variant=\"outline\" \n                                className=\"text-xs\"\n                                data-testid={`health-item-type-${item.id}`}\n                              >\n                                {getHealthTypeLabel(item.data?.type as string)}\n                              </Badge>\n                              <Badge \n                                className={`text-xs text-white ${getPrivacyBadgeColor(item.privacyLevel)}`}\n                                data-testid={`health-item-privacy-${item.id}`}\n                              >\n                                <Shield className=\"h-3 w-3 mr-1\" />\n                                Level {item.privacyLevel}\n                              </Badge>\n                            </div>\n                          </div>\n                          \n                          {/* Health Data Details */}\n                          {item.data && (\n                            <div className=\"text-sm text-muted-foreground mb-2\" data-testid={`health-item-details-${item.id}`}>\n                              {item.data.type === \"medical_records\" && item.data.allergies && (\n                                <div>Allergies: {Array.isArray(item.data.allergies) ? item.data.allergies.join(\", \") : item.data.allergies}</div>\n                              )}\n                              {item.data.type === \"medical_records\" && item.data.conditions && (\n                                <div>Conditions: {Array.isArray(item.data.conditions) ? item.data.conditions.length : 1} recorded</div>\n                              )}\n                              {item.data.provider && (\n                                <div>Provider: {item.data.provider}</div>\n                              )}\n                            </div>\n                          )}\n                          \n                          <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                            <span className=\"flex items-center\" data-testid={`health-item-date-${item.id}`}>\n                              <Calendar className=\"h-3 w-3 mr-1\" />\n                              {format(new Date(item.createdAt!), \"MMM dd, yyyy\")}\n                            </span>\n                            <span className=\"flex items-center\">\n                              <Eye className=\"h-3 w-3 mr-1\" />\n                              {item.privacyLevel === 0 ? \"Absolute Confidential\" :\n                               item.privacyLevel === 1 ? \"Controlled Sensitive\" :\n                               item.privacyLevel === 2 ? \"Private Information\" :\n                               item.privacyLevel === 3 ? \"Internal Information\" :\n                               item.privacyLevel === 4 ? \"Controlled Public\" :\n                               item.privacyLevel === 5 ? \"ZK Proof Access\" :\n                               \"Ecosystem Apps\"}\n                            </span>\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-muted-foreground hover:text-foreground\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            setSelectedAppointment(item);\n                          }}\n                          data-testid={`button-view-health-details-${item.id}`}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      {index < healthItems.length - 1 && <Separator className=\"my-2\" />}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Security Notice */}\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>High Security Zone:</strong> Health records are automatically encrypted at Privacy Level 0 \n              (Absolute Confidential) for maximum protection. Medical data can only be accessed by you, \n              with temporary sharing requiring explicit consent and ZK proofs for verification.\n            </AlertDescription>\n          </Alert>\n\n          {/* Document Uploader */}\n          <DocumentUploader \n            category=\"health\"\n            isOpen={isUploadOpen}\n            onClose={() => setIsUploadOpen(false)}\n          />\n\n          {/* Medical Form Creator */}\n          <CreateMedicalFormDialog\n            isOpen={isMedicalFormOpen}\n            onClose={() => setIsMedicalFormOpen(false)}\n            userId={user?.id || \"\"}\n            patientName={user?.fullName || \"\"}\n          />\n\n          {/* Appointment Details Dialog */}\n          <Dialog open={!!selectedAppointment} onOpenChange={() => setSelectedAppointment(null)}>\n            <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-6 w-6 text-blue-600\" />\n                  <span>{selectedAppointment?.name}</span>\n                </DialogTitle>\n                <DialogDescription>\n                  Complete medical appointment details\n                </DialogDescription>\n              </DialogHeader>\n              \n              {selectedAppointment?.data?.type === \"medical_appointment\" && (\n                <div className=\"space-y-6\">\n                  {/* Doctor Information */}\n                  <div className=\"bg-muted/50 rounded-lg p-4\">\n                    <h3 className=\"font-semibold text-lg mb-3 flex items-center\">\n                      <User className=\"h-5 w-5 mr-2\" />\n                      Doctor Information\n                    </h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Doctor Name</p>\n                        <p className=\"text-base\">{selectedAppointment.data.doctorName}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Appointment Type</p>\n                        <p className=\"text-base\">{selectedAppointment.data.appointmentType}</p>\n                      </div>\n                      <div className=\"col-span-1 md:col-span-2\">\n                        <p className=\"text-sm font-medium text-muted-foreground\">Doctor Wallet Address</p>\n                        <p className=\"text-sm font-mono text-muted-foreground break-all\">\n                          {selectedAppointment.data.doctorWalletAddress}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Completed On</p>\n                        <p className=\"text-base\">\n                          {format(new Date(selectedAppointment.data.completedAt), \"PPp\")}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Medical Information */}\n                  {selectedAppointment.data.formData && (\n                    <div className=\"bg-muted/50 rounded-lg p-4\">\n                      <h3 className=\"font-semibold text-lg mb-3 flex items-center\">\n                        <FileText className=\"h-5 w-5 mr-2\" />\n                        Medical Information\n                      </h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground mb-2\">Diagnosis</p>\n                          <p className=\"text-base\">{selectedAppointment.data.formData.diagnosis || \"Not provided\"}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground mb-2\">Symptoms</p>\n                          <p className=\"text-base\">{selectedAppointment.data.formData.symptoms || \"Not provided\"}</p>\n                        </div>\n                        <div className=\"md:col-span-2\">\n                          <p className=\"text-sm font-medium text-muted-foreground mb-2\">Treatment Plan</p>\n                          <p className=\"text-base\">{selectedAppointment.data.formData.treatment || \"Not provided\"}</p>\n                        </div>\n                        <div className=\"md:col-span-2\">\n                          <p className=\"text-sm font-medium text-muted-foreground mb-2\">Medications</p>\n                          <p className=\"text-base\">{selectedAppointment.data.formData.medications || \"None prescribed\"}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground mb-2\">Follow-up Required</p>\n                          <Badge variant={selectedAppointment.data.formData.followUpRequired === \"yes\" ? \"destructive\" : \"secondary\"}>\n                            {selectedAppointment.data.formData.followUpRequired === \"yes\" ? \"Yes\" : \"No\"}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Vital Signs */}\n                  {selectedAppointment.data.formData?.vitalSigns && (\n                    <div className=\"bg-muted/50 rounded-lg p-4\">\n                      <h3 className=\"font-semibold text-lg mb-3 flex items-center\">\n                        <Activity className=\"h-5 w-5 mr-2\" />\n                        Vital Signs\n                      </h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                        {selectedAppointment.data.formData.vitalSigns.bloodPressure && (\n                          <div>\n                            <p className=\"text-sm font-medium text-muted-foreground\">Blood Pressure</p>\n                            <p className=\"text-base\">{selectedAppointment.data.formData.vitalSigns.bloodPressure}</p>\n                          </div>\n                        )}\n                        {selectedAppointment.data.formData.vitalSigns.heartRate && (\n                          <div>\n                            <p className=\"text-sm font-medium text-muted-foreground\">Heart Rate</p>\n                            <p className=\"text-base\">{selectedAppointment.data.formData.vitalSigns.heartRate}</p>\n                          </div>\n                        )}\n                        {selectedAppointment.data.formData.vitalSigns.temperature && (\n                          <div>\n                            <p className=\"text-sm font-medium text-muted-foreground\">Temperature</p>\n                            <p className=\"text-base\">{selectedAppointment.data.formData.vitalSigns.temperature}</p>\n                          </div>\n                        )}\n                        {selectedAppointment.data.formData.vitalSigns.weight && (\n                          <div>\n                            <p className=\"text-sm font-medium text-muted-foreground\">Weight</p>\n                            <p className=\"text-base\">{selectedAppointment.data.formData.vitalSigns.weight}</p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Additional Notes */}\n                  {selectedAppointment.data.formData?.notes && (\n                    <div className=\"bg-muted/50 rounded-lg p-4\">\n                      <h3 className=\"font-semibold text-lg mb-3 flex items-center\">\n                        <FileText className=\"h-5 w-5 mr-2\" />\n                        Additional Notes\n                      </h3>\n                      <p className=\"text-base\">{selectedAppointment.data.formData.notes}</p>\n                    </div>\n                  )}\n\n                  {/* Privacy Information */}\n                  <div className=\"bg-muted/50 rounded-lg p-4\">\n                    <h3 className=\"font-semibold text-lg mb-3 flex items-center\">\n                      <Shield className=\"h-5 w-5 mr-2\" />\n                      Privacy & Security\n                    </h3>\n                    <div className=\"flex items-center space-x-4\">\n                      <Badge className={`${getPrivacyBadgeColor(selectedAppointment.privacyLevel)} text-white`}>\n                        <Shield className=\"h-3 w-3 mr-1\" />\n                        Privacy Level {selectedAppointment.privacyLevel}\n                      </Badge>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {selectedAppointment.privacyLevel === 0 ? \"Absolute Confidential - Most Sensitive Data\" :\n                         selectedAppointment.privacyLevel === 1 ? \"Controlled Sensitive - Temporary Sharing Only\" :\n                         selectedAppointment.privacyLevel === 2 ? \"Private Information - Trusted Institutions Only\" :\n                         selectedAppointment.privacyLevel === 3 ? \"Internal Information - Organizational Use\" :\n                         selectedAppointment.privacyLevel === 4 ? \"Controlled Public - User Controlled Sharing\" :\n                         selectedAppointment.privacyLevel === 5 ? \"ZK Proof Access - Cryptographic Verification\" :\n                         \"Ecosystem Applications - Third Party APIs\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </DialogContent>\n          </Dialog>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":24364},"client/src/pages/vault/ids.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport DocumentUploader from \"@/components/DocumentUploader\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport Header from \"@/components/dashboard/header\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\nimport { \n  CreditCard, \n  Shield, \n  Plus, \n  FileText, \n  Car,\n  Plane,\n  IdCard,\n  AlertTriangle,\n  Lock,\n  Eye,\n  Calendar,\n  CheckCircle,\n  Flag\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { User, VaultItem } from \"@shared/schema\";\n\ninterface DashboardData {\n  user: User;\n  vaultItems: VaultItem[];\n  accessRequests: any[];\n}\n\nexport default function IDsVault() {\n  const [isUploadOpen, setIsUploadOpen] = useState(false);\n  \n  const { data: dashboardData, isLoading } = useQuery<DashboardData>({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  const pendingRequests = dashboardData?.accessRequests?.filter(req => req.status === \"pending\") || [];\n  const user = dashboardData?.user;\n  const idItems = dashboardData?.vaultItems?.filter(item => item.category === \"ids\") || [];\n\n  const getIDIcon = (type: string) => {\n    switch (type) {\n      case \"drivers_license\":\n        return <Car className=\"h-5 w-5\" />;\n      case \"passport\":\n        return <Plane className=\"h-5 w-5\" />;\n      case \"national_id\":\n        return <IdCard className=\"h-5 w-5\" />;\n      case \"voter_id\":\n        return <Flag className=\"h-5 w-5\" />;\n      default:\n        return <CreditCard className=\"h-5 w-5\" />;\n    }\n  };\n\n  const getPrivacyBadgeColor = (level: number) => {\n    if (level <= 2) return \"bg-red-500\";\n    if (level <= 4) return \"bg-yellow-500\"; \n    return \"bg-green-500\";\n  };\n\n  const getIDTypeLabel = (type: string) => {\n    switch (type) {\n      case \"drivers_license\":\n        return \"Driver's License\";\n      case \"passport\":\n        return \"Passport\";\n      case \"national_id\":\n        return \"National ID\";\n      case \"voter_id\":\n        return \"Voter ID\";\n      default:\n        return \"Identity Document\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case \"valid\":\n      case \"active\":\n        return \"text-green-600\";\n      case \"expired\":\n        return \"text-red-600\";\n      case \"pending\":\n        return \"text-yellow-600\";\n      default:\n        return \"text-muted-foreground\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header user={undefined} pendingRequestsCount={0} />\n        <div className=\"flex pt-16\">\n          <Sidebar />\n          <main className=\"flex-1 ml-64 p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-muted rounded w-48\"></div>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"h-64 bg-muted rounded\"></div>\n                <div className=\"h-64 bg-muted rounded\"></div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header user={user} pendingRequestsCount={pendingRequests.length} />\n      \n      <div className=\"flex pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 ml-64 p-6 space-y-6\">\n          {/* Page Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold flex items-center space-x-2\" data-testid=\"title-ids-vault\">\n                <CreditCard className=\"h-8 w-8 text-purple-500\" />\n                <span>Identity Documents</span>\n              </h1>\n              <p className=\"text-muted-foreground\">\n                Securely store your official identification documents\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                <Shield className=\"w-4 h-4\" />\n                <span>Privacy Level {user?.privacyLevel || 0}</span>\n              </Badge>\n              <Button \n                onClick={() => setIsUploadOpen(true)}\n                className=\"flex items-center space-x-2\" \n                data-testid=\"button-add-id\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                <span>Upload ID Document</span>\n              </Button>\n            </div>\n          </div>\n\n          {/* IDs Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card data-testid=\"card-total-ids\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total IDs</CardTitle>\n                <FileText className=\"h-4 w-4 text-purple-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{idItems.length}</div>\n                <p className=\"text-xs text-muted-foreground\">Identity documents</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-valid-ids\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Valid IDs</CardTitle>\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {idItems.filter(item => item.data?.status !== \"expired\").length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Currently valid</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-high-security-ids\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">High Security</CardTitle>\n                <Lock className=\"h-4 w-4 text-purple-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {idItems.filter(item => item.privacyLevel >= 4).length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Level 4+ protection</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-document-types\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Document Types</CardTitle>\n                <IdCard className=\"h-4 w-4 text-blue-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {new Set(idItems.map(item => item.data?.type)).size}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Different types</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* ID Documents List */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <IdCard className=\"h-5 w-5\" />\n                <span>Your Identity Documents</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {idItems.length === 0 ? (\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  <CreditCard className=\"h-16 w-16 mx-auto mb-4 opacity-50 text-purple-500\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No ID Documents Yet</h3>\n                  <p className=\"mb-4\">Add your identity documents for secure storage</p>\n                  <Button \n                    onClick={() => setIsUploadOpen(true)}\n                    className=\"flex items-center space-x-2\" \n                    data-testid=\"button-add-first-id\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                    <span>Upload Your First ID Document</span>\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {idItems.map((item, index) => (\n                    <div key={item.id}>\n                      <div className=\"flex items-start space-x-4 p-4 border rounded-lg hover:bg-muted/50 transition-colors\">\n                        <div className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                          item.data?.type === \"drivers_license\" ? \"bg-blue-100 dark:bg-blue-900/20 text-blue-600\" :\n                          item.data?.type === \"passport\" ? \"bg-green-100 dark:bg-green-900/20 text-green-600\" :\n                          item.data?.type === \"national_id\" ? \"bg-purple-100 dark:bg-purple-900/20 text-purple-600\" :\n                          \"bg-red-100 dark:bg-red-900/20 text-red-600\"\n                        }`}>\n                          {getIDIcon(item.data?.type as string)}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h3 className=\"font-medium text-foreground\" data-testid={`id-item-name-${item.id}`}>\n                              {item.name}\n                            </h3>\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge \n                                variant=\"outline\" \n                                className=\"text-xs\"\n                                data-testid={`id-item-type-${item.id}`}\n                              >\n                                {getIDTypeLabel(item.data?.type as string)}\n                              </Badge>\n                              <Badge \n                                className={`text-xs text-white ${getPrivacyBadgeColor(item.privacyLevel)}`}\n                                data-testid={`id-item-privacy-${item.id}`}\n                              >\n                                <Shield className=\"h-3 w-3 mr-1\" />\n                                Level {item.privacyLevel}\n                              </Badge>\n                            </div>\n                          </div>\n                          \n                          {/* ID Details */}\n                          {item.data && (\n                            <div className=\"space-y-1 text-sm text-muted-foreground mb-2\" data-testid={`id-item-details-${item.id}`}>\n                              {item.data.state && (\n                                <div>\n                                  <span className=\"font-medium\">State/Region:</span> {item.data.state}\n                                </div>\n                              )}\n                              {item.data.country && (\n                                <div>\n                                  <span className=\"font-medium\">Country:</span> {item.data.country}\n                                </div>\n                              )}\n                              {item.data.documentNumber && (\n                                <div>\n                                  <span className=\"font-medium\">Document #:</span> ****{item.data.documentNumber.slice(-4)}\n                                </div>\n                              )}\n                              {item.data.expiryDate && (\n                                <div>\n                                  <span className=\"font-medium\">Expires:</span> {format(new Date(item.data.expiryDate), \"MMM dd, yyyy\")}\n                                </div>\n                              )}\n                              {item.data.status && (\n                                <div>\n                                  <span className=\"font-medium\">Status:</span> \n                                  <span className={`ml-1 ${getStatusColor(item.data.status)}`}>\n                                    {item.data.status.charAt(0).toUpperCase() + item.data.status.slice(1)}\n                                  </span>\n                                </div>\n                              )}\n                            </div>\n                          )}\n                          \n                          <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                            <span className=\"flex items-center\" data-testid={`id-item-date-${item.id}`}>\n                              <Calendar className=\"h-3 w-3 mr-1\" />\n                              Added {format(new Date(item.createdAt), \"MMM dd, yyyy\")}\n                            </span>\n                            <span className=\"flex items-center\">\n                              <Eye className=\"h-3 w-3 mr-1\" />\n                              {item.privacyLevel >= 4 ? \"Secure Access\" : \"Standard Access\"}\n                            </span>\n                            {item.data?.verified && (\n                              <span className=\"flex items-center text-green-600\">\n                                <CheckCircle className=\"h-3 w-3 mr-1\" />\n                                Verified\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-muted-foreground hover:text-foreground\"\n                          data-testid={`button-view-id-details-${item.id}`}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      {index < idItems.length - 1 && <Separator className=\"my-2\" />}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Security Notice */}\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Critical Security:</strong> Identity documents are highly sensitive and should use \n              maximum privacy levels (Level 4-6). These documents can be used for identity verification \n              via zero-knowledge proofs without exposing the actual document details.\n            </AlertDescription>\n          </Alert>\n\n          {/* Document Uploader */}\n          <DocumentUploader \n            category=\"ids\"\n            isOpen={isUploadOpen}\n            onClose={() => setIsUploadOpen(false)}\n          />\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":14872},"client/src/pages/vault/insurance.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport DocumentUploader from \"@/components/DocumentUploader\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport Header from \"@/components/dashboard/header\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\nimport { \n  Shield, \n  Plus, \n  FileText, \n  Car,\n  Home,\n  Heart,\n  AlertTriangle,\n  Lock,\n  Eye,\n  Calendar,\n  DollarSign,\n  CheckCircle\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { User, VaultItem } from \"@shared/schema\";\n\ninterface DashboardData {\n  user: User;\n  vaultItems: VaultItem[];\n  accessRequests: any[];\n}\n\nexport default function InsuranceVault() {\n  const [isUploadOpen, setIsUploadOpen] = useState(false);\n  \n  const { data: dashboardData, isLoading } = useQuery<DashboardData>({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  const pendingRequests = dashboardData?.accessRequests?.filter(req => req.status === \"pending\") || [];\n  const user = dashboardData?.user;\n  const insuranceItems = dashboardData?.vaultItems?.filter(item => item.category === \"insurance\") || [];\n\n  const getInsuranceIcon = (type: string) => {\n    switch (type) {\n      case \"health_insurance\":\n        return <Heart className=\"h-5 w-5\" />;\n      case \"auto_insurance\": \n        return <Car className=\"h-5 w-5\" />;\n      case \"home_insurance\":\n        return <Home className=\"h-5 w-5\" />;\n      default:\n        return <Shield className=\"h-5 w-5\" />;\n    }\n  };\n\n  const getPrivacyBadgeColor = (level: number) => {\n    if (level <= 2) return \"bg-red-500\";\n    if (level <= 4) return \"bg-yellow-500\";\n    return \"bg-green-500\";\n  };\n\n  const getInsuranceTypeLabel = (type: string) => {\n    switch (type) {\n      case \"health_insurance\":\n        return \"Health Insurance\";\n      case \"auto_insurance\":\n        return \"Auto Insurance\";\n      case \"home_insurance\":\n        return \"Home Insurance\";\n      default:\n        return \"Insurance Policy\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case \"active\":\n        return \"text-green-600\";\n      case \"expired\":\n        return \"text-red-600\";\n      case \"pending\":\n        return \"text-yellow-600\";\n      default:\n        return \"text-muted-foreground\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header user={undefined} pendingRequestsCount={0} />\n        <div className=\"flex pt-16\">\n          <Sidebar />\n          <main className=\"flex-1 ml-64 p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-muted rounded w-48\"></div>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"h-64 bg-muted rounded\"></div>\n                <div className=\"h-64 bg-muted rounded\"></div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header user={user} pendingRequestsCount={pendingRequests.length} />\n      \n      <div className=\"flex pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 ml-64 p-6 space-y-6\">\n          {/* Page Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold flex items-center space-x-2\" data-testid=\"title-insurance-vault\">\n                <Shield className=\"h-8 w-8 text-blue-500\" />\n                <span>Insurance Vault</span>\n              </h1>\n              <p className=\"text-muted-foreground\">\n                Manage your insurance policies and coverage information\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                <Shield className=\"w-4 h-4\" />\n                <span>Privacy Level {user?.privacyLevel || 0}</span>\n              </Badge>\n              <Button \n                onClick={() => setIsUploadOpen(true)}\n                className=\"flex items-center space-x-2\" \n                data-testid=\"button-add-insurance\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                <span>Upload Policy Document</span>\n              </Button>\n            </div>\n          </div>\n\n          {/* Insurance Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card data-testid=\"card-total-policies\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Policies</CardTitle>\n                <FileText className=\"h-4 w-4 text-blue-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{insuranceItems.length}</div>\n                <p className=\"text-xs text-muted-foreground\">Active coverage</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-active-policies\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Active Policies</CardTitle>\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {insuranceItems.filter(item => item.data?.status === \"active\").length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Currently covered</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-high-security\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">High Security</CardTitle>\n                <Lock className=\"h-4 w-4 text-purple-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {insuranceItems.filter(item => item.privacyLevel >= 5).length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Level 5-6 protection</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-total-coverage\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Coverage Types</CardTitle>\n                <DollarSign className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {new Set(insuranceItems.map(item => item.data?.type)).size}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Different types</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Insurance Policies List */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Shield className=\"h-5 w-5\" />\n                <span>Your Insurance Policies</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {insuranceItems.length === 0 ? (\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  <Shield className=\"h-16 w-16 mx-auto mb-4 opacity-50 text-blue-500\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No Insurance Policies Yet</h3>\n                  <p className=\"mb-4\">Add your insurance policies to keep them secure</p>\n                  <Button \n                    onClick={() => setIsUploadOpen(true)}\n                    className=\"flex items-center space-x-2\" \n                    data-testid=\"button-add-first-insurance\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                    <span>Upload Your First Policy</span>\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {insuranceItems.map((item, index) => (\n                    <div key={item.id}>\n                      <div className=\"flex items-start space-x-4 p-4 border rounded-lg hover:bg-muted/50 transition-colors\">\n                        <div className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                          item.data?.type === \"health_insurance\" ? \"bg-red-100 dark:bg-red-900/20 text-red-600\" :\n                          item.data?.type === \"auto_insurance\" ? \"bg-blue-100 dark:bg-blue-900/20 text-blue-600\" :\n                          item.data?.type === \"home_insurance\" ? \"bg-green-100 dark:bg-green-900/20 text-green-600\" :\n                          \"bg-purple-100 dark:bg-purple-900/20 text-purple-600\"\n                        }`}>\n                          {getInsuranceIcon(item.data?.type as string)}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h3 className=\"font-medium text-foreground\" data-testid={`insurance-item-name-${item.id}`}>\n                              {item.name}\n                            </h3>\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge \n                                variant=\"outline\" \n                                className=\"text-xs\"\n                                data-testid={`insurance-item-type-${item.id}`}\n                              >\n                                {getInsuranceTypeLabel(item.data?.type as string)}\n                              </Badge>\n                              <Badge \n                                className={`text-xs text-white ${getPrivacyBadgeColor(item.privacyLevel)}`}\n                                data-testid={`insurance-item-privacy-${item.id}`}\n                              >\n                                <Shield className=\"h-3 w-3 mr-1\" />\n                                Level {item.privacyLevel}\n                              </Badge>\n                            </div>\n                          </div>\n                          \n                          {/* Insurance Details */}\n                          {item.data && (\n                            <div className=\"space-y-1 text-sm text-muted-foreground mb-2\" data-testid={`insurance-item-details-${item.id}`}>\n                              {item.data?.provider && (\n                                <div>\n                                  <span className=\"font-medium\">Provider:</span> {item.data.provider}\n                                </div>\n                              )}\n                              {item.data?.policyNumber && (\n                                <div>\n                                  <span className=\"font-medium\">Policy:</span> {item.data.policyNumber}\n                                </div>\n                              )}\n                              {item.data?.coverage && (\n                                <div>\n                                  <span className=\"font-medium\">Coverage:</span> ${item.data.coverage.toLocaleString()}\n                                </div>\n                              )}\n                              {item.data?.status && (\n                                <div>\n                                  <span className=\"font-medium\">Status:</span> \n                                  <span className={`ml-1 ${getStatusColor(item.data.status)}`}>\n                                    {item.data.status.charAt(0).toUpperCase() + item.data.status.slice(1)}\n                                  </span>\n                                </div>\n                              )}\n                            </div>\n                          )}\n                          \n                          <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                            <span className=\"flex items-center\" data-testid={`insurance-item-date-${item.id}`}>\n                              <Calendar className=\"h-3 w-3 mr-1\" />\n                              Added {format(new Date(item.createdAt!), \"MMM dd, yyyy\")}\n                            </span>\n                            <span className=\"flex items-center\">\n                              <Eye className=\"h-3 w-3 mr-1\" />\n                              {item.privacyLevel >= 5 ? \"ZK Proof Required\" : \"Standard Access\"}\n                            </span>\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-muted-foreground hover:text-foreground\"\n                          data-testid={`button-view-insurance-details-${item.id}`}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      {index < insuranceItems.length - 1 && <Separator className=\"my-2\" />}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Security Notice */}\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Insurance Protection:</strong> Insurance policies contain sensitive financial information.\n              Higher privacy levels (Level 4+) are recommended to protect against identity theft and fraud.\n              Police verification requires Level 5+ with zero-knowledge proofs.\n            </AlertDescription>\n          </Alert>\n\n          {/* Document Uploader */}\n          <DocumentUploader \n            category=\"insurance\"\n            isOpen={isUploadOpen}\n            onClose={() => setIsUploadOpen(false)}\n          />\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":14343},"client/src/pages/zk-proofs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/dashboard/header\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\nimport { \n  Key, \n  Shield, \n  Plus, \n  Share,\n  QrCode,\n  Copy,\n  CheckCircle,\n  Clock,\n  AlertTriangle,\n  Lock,\n  Eye,\n  Calendar,\n  Users,\n  FileText,\n  Heart,\n  Car,\n  Building\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { User, ZKProof } from \"@shared/schema\";\n\ninterface DashboardData {\n  user: User;\n  zkProofs: ZKProof[];\n  accessRequests: any[];\n  vaultItems: any[];\n}\n\nconst zkProofSchema = z.object({\n  proofType: z.enum([\"age_verification\", \"income_verification\", \"identity_verification\", \"medical_verification\", \"insurance_verification\", \"police_verification\"]),\n  attributes: z.object({\n    minAge: z.number().optional(),\n    minIncome: z.number().optional(), \n    citizenship: z.string().optional(),\n    // Medical verification specific fields\n    medicalConditions: z.array(z.string()).optional(),\n    allergies: z.array(z.string()).optional(),\n    bloodType: z.string().optional(),\n    medications: z.array(z.string()).optional(),\n    chronicConditions: z.array(z.string()).optional(),\n    // Other fields\n    insuranceType: z.string().optional(),\n    insuranceStatus: z.string().optional(),\n    badgeNumber: z.string().optional(),\n    expiresInDays: z.number().optional(),\n  }).optional(),\n  recipientName: z.string().min(2, \"Recipient name required\"),\n  purpose: z.string().min(10, \"Purpose must be at least 10 characters\"),\n});\n\ntype ZKProofFormData = z.infer<typeof zkProofSchema>;\n\n// Helper function to generate proof results\nfunction generateProofResult(proofType: string, attributes: any): string {\n  switch (proofType) {\n    case \"age_verification\":\n      return `User is over ${attributes.minAge || 18} years old`;\n    case \"income_verification\":\n      return `User's income is above $${attributes.minIncome?.toLocaleString() || '50,000'} annually`;\n    case \"identity_verification\":\n      return `User is a verified citizen of ${attributes.citizenship || 'the United States'}`;\n    case \"medical_verification\":\n      const medicalInfo = [];\n      if (attributes.medicalConditions?.length > 0) {\n        medicalInfo.push(`Medical conditions: ${attributes.medicalConditions.join(', ')}`);\n      }\n      if (attributes.chronicConditions?.length > 0) {\n        medicalInfo.push(`Chronic conditions: ${attributes.chronicConditions.join(', ')}`);\n      }\n      if (attributes.allergies?.length > 0) {\n        medicalInfo.push(`Allergies: ${attributes.allergies.join(', ')}`);\n      }\n      if (attributes.bloodType) {\n        medicalInfo.push(`Blood type: ${attributes.bloodType}`);\n      }\n      if (attributes.medications?.length > 0) {\n        medicalInfo.push(`Medications: ${attributes.medications.join(', ')}`);\n      }\n      return medicalInfo.length > 0 \n        ? `Medical verification confirmed: ${medicalInfo.join(' | ')}`\n        : 'General medical status verified';\n    case \"insurance_verification\":\n      return `User has ${attributes.insuranceStatus || 'active'} ${attributes.insuranceType || 'health'} insurance coverage`;\n    case \"police_verification\":\n      return `Verified law enforcement officer with badge #${attributes.badgeNumber || 'CLASSIFIED'}`;\n    default:\n      return \"Identity claim has been cryptographically verified\";\n  }\n}\n\nexport default function ZKProofs() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isCreating, setIsCreating] = useState(false);\n  const [selectedProofType, setSelectedProofType] = useState<string>(\"\");\n  const [createdProof, setCreatedProof] = useState<any>(null);\n  const [selectedExpiration, setSelectedExpiration] = useState<number>(30);\n\n  const { data: dashboardData, isLoading } = useQuery<DashboardData>({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  const pendingRequests = dashboardData?.accessRequests?.filter(req => req.status === \"pending\") || [];\n  const user = dashboardData?.user;\n  const zkProofs = dashboardData?.zkProofs || [];\n\n  const form = useForm<ZKProofFormData>({\n    resolver: zodResolver(zkProofSchema),\n    defaultValues: {\n      recipientName: \"\",\n      purpose: \"\",\n      attributes: {},\n    },\n  });\n\n  const createProofMutation = useMutation({\n    mutationFn: async (data: ZKProofFormData) => {\n      // Generate proof result based on proof type and attributes\n      const proofResult = generateProofResult(data.proofType, data.attributes || {});\n      \n      const response = await apiRequest(\"POST\", \"/api/generate-proof\", {\n        ...data,\n        proofResult,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCreatedProof(data);\n      toast({\n        title: \"ZK Proof Created\",\n        description: \"Your zero-knowledge proof has been generated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      form.reset();\n      setIsCreating(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Creation Failed\", \n        description: error.message || \"Failed to create ZK proof\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: ZKProofFormData) => {\n    createProofMutation.mutate(data);\n  };\n\n  const getProofIcon = (type: string) => {\n    switch (type) {\n      case \"age_verification\":\n        return <Users className=\"h-5 w-5\" />;\n      case \"income_verification\":\n        return <Building className=\"h-5 w-5\" />;\n      case \"identity_verification\":\n        return <Key className=\"h-5 w-5\" />;\n      case \"medical_verification\":\n        return <Heart className=\"h-5 w-5\" />;\n      case \"insurance_verification\":\n        return <Shield className=\"h-5 w-5\" />;\n      case \"police_verification\":\n        return <Car className=\"h-5 w-5\" />;\n      default:\n        return <Lock className=\"h-5 w-5\" />;\n    }\n  };\n\n  const getProofTypeLabel = (type: string) => {\n    switch (type) {\n      case \"age_verification\":\n        return \"Age Verification\";\n      case \"income_verification\":\n        return \"Income Verification\";\n      case \"identity_verification\":\n        return \"Identity Verification\";\n      case \"medical_verification\":\n        return \"Medical Verification\";\n      case \"insurance_verification\":\n        return \"Insurance Verification\";\n      case \"police_verification\":\n        return \"Police Verification\";\n      default:\n        return \"Unknown Proof\";\n    }\n  };\n\n  const getProofPrivacyLevel = (type: string) => {\n    switch (type) {\n      case \"medical_verification\":\n        return 6;\n      case \"police_verification\":\n      case \"insurance_verification\":\n        return 5;\n      case \"income_verification\":\n        return 4;\n      case \"identity_verification\":\n        return 3;\n      case \"age_verification\":\n        return 2;\n      default:\n        return 3;\n    }\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied\",\n        description: \"Proof details copied to clipboard\",\n      });\n    } catch (err) {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Could not copy to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header user={undefined} pendingRequestsCount={0} />\n        <div className=\"flex pt-16\">\n          <Sidebar />\n          <main className=\"flex-1 ml-64 p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-muted rounded w-48\"></div>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"h-64 bg-muted rounded\"></div>\n                <div className=\"h-64 bg-muted rounded\"></div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header user={user} pendingRequestsCount={pendingRequests.length} />\n      \n      <div className=\"flex pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 ml-64 p-6 space-y-6\">\n          {/* Page Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold flex items-center space-x-2\" data-testid=\"title-zk-proofs\">\n                <Key className=\"h-8 w-8 text-purple-500\" />\n                <span>Zero-Knowledge Proofs</span>\n              </h1>\n              <p className=\"text-muted-foreground\">\n                Create and manage cryptographic proofs without revealing sensitive data\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                <Shield className=\"w-4 h-4\" />\n                <span>Privacy Level {user?.privacyLevel || 0}</span>\n              </Badge>\n              <Button \n                onClick={() => setIsCreating(true)}\n                className=\"flex items-center space-x-2\" \n                data-testid=\"button-create-zk-proof\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                <span>Create ZK Proof</span>\n              </Button>\n            </div>\n          </div>\n\n          {/* ZK Proofs Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card data-testid=\"card-total-proofs\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Proofs</CardTitle>\n                <Key className=\"h-4 w-4 text-purple-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{zkProofs.length}</div>\n                <p className=\"text-xs text-muted-foreground\">Generated proofs</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-medical-proofs\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Medical Proofs</CardTitle>\n                <Heart className=\"h-4 w-4 text-red-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {zkProofs.filter(proof => proof.proofType === \"medical_verification\").length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Level 6 security</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-police-proofs\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Police Proofs</CardTitle>\n                <Car className=\"h-4 w-4 text-blue-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {zkProofs.filter(proof => proof.proofType === \"police_verification\").length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Level 5 security</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-recent-proofs\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">This Week</CardTitle>\n                <Clock className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {zkProofs.filter(proof => {\n                    if (!proof.createdAt) return false;\n                    const weekAgo = new Date();\n                    weekAgo.setDate(weekAgo.getDate() - 7);\n                    return new Date(proof.createdAt) > weekAgo;\n                  }).length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Recent activity</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Show Created Proof with Shareable Link */}\n          {createdProof && (\n            <Card data-testid=\"card-created-proof\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                  <span>ZK Proof Created Successfully!</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"bg-muted/50 p-4 rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">Shareable Link</h4>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      value={`${window.location.origin}/verify-proof/${createdProof.id}`}\n                      readOnly\n                      className=\"font-mono text-sm\"\n                      data-testid=\"input-shareable-link\"\n                    />\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(`${window.location.origin}/verify-proof/${createdProof.id}`)}\n                      data-testid=\"button-copy-link\"\n                    >\n                      <Copy className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    Share this link to allow verification of your proof without revealing the underlying data.\n                  </p>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    onClick={() => setCreatedProof(null)}\n                    variant=\"outline\"\n                    data-testid=\"button-close-created-proof\"\n                  >\n                    Done\n                  </Button>\n                  <Button\n                    onClick={() => setIsCreating(true)}\n                    variant=\"ghost\"\n                    data-testid=\"button-create-another-proof\"\n                  >\n                    Create Another Proof\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Create ZK Proof Form */}\n          {isCreating && !createdProof && (\n            <Card data-testid=\"card-create-zk-proof\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Plus className=\"h-5 w-5\" />\n                  <span>Create New ZK Proof</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"proofType\">Proof Type</Label>\n                      <Select \n                        value={form.watch(\"proofType\")} \n                        onValueChange={(value: any) => {\n                          form.setValue(\"proofType\", value);\n                          setSelectedProofType(value);\n                        }}\n                      >\n                        <SelectTrigger data-testid=\"select-proof-type\">\n                          <SelectValue placeholder=\"Select proof type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"age_verification\">Age Verification (Level 2)</SelectItem>\n                          <SelectItem value=\"income_verification\">Income Verification (Level 4)</SelectItem>\n                          <SelectItem value=\"identity_verification\">Identity Verification (Level 3)</SelectItem>\n                          <SelectItem value=\"medical_verification\">Medical Verification (Level 6)</SelectItem>\n                          <SelectItem value=\"insurance_verification\">Insurance Verification (Level 5)</SelectItem>\n                          <SelectItem value=\"police_verification\">Police Verification (Level 5)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"recipientName\">Recipient Name</Label>\n                      <Input\n                        {...form.register(\"recipientName\")}\n                        placeholder=\"Who will receive this proof?\"\n                        data-testid=\"input-recipient-name\"\n                      />\n                      {form.formState.errors.recipientName && (\n                        <p className=\"text-sm text-destructive\">{form.formState.errors.recipientName.message}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Dynamic Attributes Based on Proof Type */}\n                  {selectedProofType && (\n                    <div className=\"space-y-4\">\n                      <h4 className=\"font-medium\">Proof Parameters</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {selectedProofType === \"age_verification\" && (\n                          <div className=\"space-y-2\">\n                            <Label>Minimum Age</Label>\n                            <Input\n                              type=\"number\"\n                              placeholder=\"18\"\n                              onChange={(e) => form.setValue(\"attributes.minAge\", parseInt(e.target.value))}\n                              data-testid=\"input-min-age\"\n                            />\n                          </div>\n                        )}\n                        {selectedProofType === \"income_verification\" && (\n                          <div className=\"space-y-2\">\n                            <Label>Minimum Annual Income ($)</Label>\n                            <Input\n                              type=\"number\"\n                              placeholder=\"50000\"\n                              onChange={(e) => form.setValue(\"attributes.minIncome\", parseInt(e.target.value))}\n                              data-testid=\"input-min-income\"\n                            />\n                          </div>\n                        )}\n                        {selectedProofType === \"identity_verification\" && (\n                          <div className=\"space-y-2\">\n                            <Label>Citizenship</Label>\n                            <Input\n                              placeholder=\"US, CA, UK, etc.\"\n                              onChange={(e) => form.setValue(\"attributes.citizenship\", e.target.value)}\n                              data-testid=\"input-citizenship\"\n                            />\n                          </div>\n                        )}\n                        {selectedProofType === \"medical_verification\" && (\n                          <div className=\"col-span-2 space-y-4\">\n                            <h5 className=\"font-medium text-sm text-muted-foreground\">Medical Information to Verify</h5>\n                            \n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              {/* Medical Conditions */}\n                              <div className=\"space-y-2\">\n                                <Label>Medical Conditions</Label>\n                                <Input\n                                  placeholder=\"e.g., diabetes, hypertension (comma-separated)\"\n                                  onChange={(e) => {\n                                    const conditions = e.target.value.split(',').map(c => c.trim()).filter(c => c);\n                                    form.setValue(\"attributes.medicalConditions\", conditions);\n                                  }}\n                                  data-testid=\"input-medical-conditions\"\n                                />\n                                <p className=\"text-xs text-muted-foreground\">Separate multiple conditions with commas</p>\n                              </div>\n\n                              {/* Chronic Conditions */}\n                              <div className=\"space-y-2\">\n                                <Label>Chronic Conditions</Label>\n                                <Input\n                                  placeholder=\"e.g., asthma, arthritis (comma-separated)\"\n                                  onChange={(e) => {\n                                    const conditions = e.target.value.split(',').map(c => c.trim()).filter(c => c);\n                                    form.setValue(\"attributes.chronicConditions\", conditions);\n                                  }}\n                                  data-testid=\"input-chronic-conditions\"\n                                />\n                              </div>\n\n                              {/* Allergies */}\n                              <div className=\"space-y-2\">\n                                <Label>Allergies</Label>\n                                <Input\n                                  placeholder=\"e.g., penicillin, nuts, pollen (comma-separated)\"\n                                  onChange={(e) => {\n                                    const allergies = e.target.value.split(',').map(a => a.trim()).filter(a => a);\n                                    form.setValue(\"attributes.allergies\", allergies);\n                                  }}\n                                  data-testid=\"input-allergies\"\n                                />\n                              </div>\n\n                              {/* Blood Type */}\n                              <div className=\"space-y-2\">\n                                <Label>Blood Type</Label>\n                                <Select onValueChange={(value) => form.setValue(\"attributes.bloodType\", value)}>\n                                  <SelectTrigger data-testid=\"select-blood-type\">\n                                    <SelectValue placeholder=\"Select blood type\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"A+\">A+</SelectItem>\n                                    <SelectItem value=\"A-\">A-</SelectItem>\n                                    <SelectItem value=\"B+\">B+</SelectItem>\n                                    <SelectItem value=\"B-\">B-</SelectItem>\n                                    <SelectItem value=\"AB+\">AB+</SelectItem>\n                                    <SelectItem value=\"AB-\">AB-</SelectItem>\n                                    <SelectItem value=\"O+\">O+</SelectItem>\n                                    <SelectItem value=\"O-\">O-</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </div>\n\n                              {/* Medications */}\n                              <div className=\"space-y-2 md:col-span-2\">\n                                <Label>Current Medications</Label>\n                                <Input\n                                  placeholder=\"e.g., metformin, lisinopril, ibuprofen (comma-separated)\"\n                                  onChange={(e) => {\n                                    const medications = e.target.value.split(',').map(m => m.trim()).filter(m => m);\n                                    form.setValue(\"attributes.medications\", medications);\n                                  }}\n                                  data-testid=\"input-medications\"\n                                />\n                                <p className=\"text-xs text-muted-foreground\">Include prescription and over-the-counter medications</p>\n                              </div>\n                            </div>\n                            \n                            <Alert>\n                              <Heart className=\"h-4 w-4\" />\n                              <AlertDescription>\n                                Only selected medical information will be cryptographically verified. Your actual medical data remains private and secure.\n                              </AlertDescription>\n                            </Alert>\n                          </div>\n                        )}\n                        {selectedProofType === \"insurance_verification\" && (\n                          <>\n                            <div className=\"space-y-2\">\n                              <Label>Insurance Type</Label>\n                              <Select onValueChange={(value) => form.setValue(\"attributes.insuranceType\", value)}>\n                                <SelectTrigger data-testid=\"select-insurance-type\">\n                                  <SelectValue placeholder=\"Select insurance type\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"health\">Health Insurance</SelectItem>\n                                  <SelectItem value=\"auto\">Auto Insurance</SelectItem>\n                                  <SelectItem value=\"home\">Home Insurance</SelectItem>\n                                  <SelectItem value=\"life\">Life Insurance</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label>Insurance Status</Label>\n                              <Select onValueChange={(value) => form.setValue(\"attributes.insuranceStatus\", value)}>\n                                <SelectTrigger data-testid=\"select-insurance-status\">\n                                  <SelectValue placeholder=\"Select status\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"active\">Active Coverage</SelectItem>\n                                  <SelectItem value=\"pending\">Pending Approval</SelectItem>\n                                  <SelectItem value=\"expired\">Recently Expired</SelectItem>\n                                  <SelectItem value=\"suspended\">Temporarily Suspended</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                          </>\n                        )}\n                        {selectedProofType === \"police_verification\" && (\n                          <div className=\"space-y-2\">\n                            <Label>Badge Number</Label>\n                            <Input\n                              placeholder=\"Officer badge number\"\n                              onChange={(e) => form.setValue(\"attributes.badgeNumber\", e.target.value)}\n                              data-testid=\"input-badge-number\"\n                            />\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Universal Expiration Setting */}\n                      <div className=\"space-y-2\">\n                        <Label>Proof Expiration</Label>\n                        <Select \n                          value={selectedExpiration.toString()} \n                          onValueChange={(value) => {\n                            const days = parseInt(value);\n                            setSelectedExpiration(days);\n                            form.setValue(\"attributes.expiresInDays\", days);\n                          }}\n                        >\n                          <SelectTrigger data-testid=\"select-expiration\">\n                            <SelectValue placeholder=\"Select expiration\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"1\">1 Day (Emergency)</SelectItem>\n                            <SelectItem value=\"7\">1 Week (Short-term)</SelectItem>\n                            <SelectItem value=\"30\">30 Days (Standard)</SelectItem>\n                            <SelectItem value=\"90\">90 Days (Extended)</SelectItem>\n                            <SelectItem value=\"365\">1 Year (Long-term)</SelectItem>\n                            <SelectItem value=\"0\">No Expiration</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {selectedExpiration === 0 ? \"Proof will not expire automatically\" : `Proof will expire after ${selectedExpiration} day(s)`}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"purpose\">Purpose</Label>\n                    <Textarea\n                      {...form.register(\"purpose\")}\n                      placeholder=\"Explain why this proof is needed...\"\n                      className=\"min-h-[100px]\"\n                      data-testid=\"textarea-purpose\"\n                    />\n                    {form.formState.errors.purpose && (\n                      <p className=\"text-sm text-destructive\">{form.formState.errors.purpose.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <Button \n                      type=\"submit\" \n                      disabled={createProofMutation.isPending}\n                      data-testid=\"button-submit-zk-proof\"\n                    >\n                      {createProofMutation.isPending ? \"Creating...\" : \"Create ZK Proof\"}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => {\n                        setIsCreating(false);\n                        form.reset();\n                      }}\n                      data-testid=\"button-cancel-zk-proof\"\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* ZK Proofs List */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <FileText className=\"h-5 w-5\" />\n                <span>Your ZK Proofs</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {zkProofs.length === 0 ? (\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  <Key className=\"h-16 w-16 mx-auto mb-4 opacity-50 text-purple-500\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No ZK Proofs Yet</h3>\n                  <p className=\"mb-4\">Create your first zero-knowledge proof to share data privately</p>\n                  <Button \n                    onClick={() => setIsCreating(true)}\n                    className=\"flex items-center space-x-2\"\n                    data-testid=\"button-create-first-zk-proof\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                    <span>Create Your First ZK Proof</span>\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {zkProofs.map((proof, index) => {\n                    const privacyLevel = getProofPrivacyLevel(proof.proofType);\n                    \n                    return (\n                      <div key={proof.id}>\n                        <div className=\"flex items-start space-x-4 p-4 border rounded-lg hover:bg-muted/50 transition-colors\">\n                          <div className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                            proof.proofType === \"medical_verification\" ? \"bg-red-100 dark:bg-red-900/20 text-red-600\" :\n                            proof.proofType === \"police_verification\" ? \"bg-blue-100 dark:bg-blue-900/20 text-blue-600\" :\n                            proof.proofType === \"insurance_verification\" ? \"bg-green-100 dark:bg-green-900/20 text-green-600\" :\n                            \"bg-purple-100 dark:bg-purple-900/20 text-purple-600\"\n                          }`}>\n                            {getProofIcon(proof.proofType)}\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h3 className=\"font-medium text-foreground\" data-testid={`proof-type-${proof.id}`}>\n                                {getProofTypeLabel(proof.proofType)}\n                              </h3>\n                              <div className=\"flex items-center space-x-2\">\n                                <Badge \n                                  variant=\"outline\" \n                                  className=\"text-xs\"\n                                  data-testid={`proof-status-${proof.id}`}\n                                >\n                                  <CheckCircle className=\"h-3 w-3 mr-1\" />\n                                  Generated\n                                </Badge>\n                                <Badge \n                                  className=\"text-xs text-white bg-purple-500\"\n                                  data-testid={`proof-privacy-${proof.id}`}\n                                >\n                                  <Shield className=\"h-3 w-3 mr-1\" />\n                                  Level {privacyLevel}\n                                </Badge>\n                              </div>\n                            </div>\n                            \n                            <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`proof-result-${proof.id}`}>\n                              {proof.proofResult}\n                            </p>\n                            \n                            <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                              <span className=\"flex items-center\" data-testid={`proof-date-${proof.id}`}>\n                                <Calendar className=\"h-3 w-3 mr-1\" />\n                                {proof.createdAt ? format(new Date(proof.createdAt), \"MMM dd, yyyy 'at' HH:mm\") : \"Date unavailable\"}\n                              </span>\n                              <span className=\"flex items-center\">\n                                <QrCode className=\"h-3 w-3 mr-1\" />\n                                QR Code Available\n                              </span>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => copyToClipboard(`${window.location.origin}/verify-proof/${proof.id}`)}\n                              className=\"text-muted-foreground hover:text-foreground\"\n                              data-testid={`button-copy-proof-${proof.id}`}\n                              title=\"Copy verification link\"\n                            >\n                              <Copy className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => window.open(`/verify-proof/${proof.id}`, '_blank')}\n                              className=\"text-muted-foreground hover:text-foreground\"\n                              data-testid={`button-share-proof-${proof.id}`}\n                              title=\"Open verification link\"\n                            >\n                              <Share className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                        {index < zkProofs.length - 1 && <Separator className=\"my-2\" />}\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* ZK Proof Info */}\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Zero-Knowledge Proofs:</strong> These proofs allow you to verify claims about your data \n              (like age, income, or medical status) without revealing the actual data. Medical proofs use Level 6 \n              security, while police verification uses Level 5 for maximum privacy and authenticity.\n            </AlertDescription>\n          </Alert>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":37801},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `private, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":5934},"client/src/components/CreateMedicalFormDialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Calendar,\n  Copy,\n  Link2,\n  CheckCircle,\n  Clock,\n  Stethoscope,\n  Share\n} from \"lucide-react\";\n\ninterface CreateMedicalFormDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  userId: string;\n  patientName: string;\n}\n\ninterface FormData {\n  patientName: string;\n  appointmentType: string;\n  expiresIn: number; // hours\n}\n\nexport default function CreateMedicalFormDialog({ \n  isOpen, \n  onClose, \n  userId, \n  patientName \n}: CreateMedicalFormDialogProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [formData, setFormData] = useState<FormData>({\n    patientName,\n    appointmentType: \"\",\n    expiresIn: 24,\n  });\n  const [createdToken, setCreatedToken] = useState<string>(\"\");\n  const [shareableLink, setShareableLink] = useState<string>(\"\");\n\n  const createFormMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/medical-form-tokens\", data);\n      return response.json();\n    },\n    onSuccess: (response: any) => {\n      console.log(\"Form creation response:\", response);\n      if (response.token) {\n        const token = response.token;\n        const link = `${window.location.origin}/medical-form/${token}`;\n        setCreatedToken(token);\n        setShareableLink(link);\n        \n        toast({\n          title: \"Medical Form Created\",\n          description: \"Your shareable medical form link is ready!\",\n        });\n      } else {\n        console.error(\"No token in response:\", response);\n        toast({\n          title: \"Creation Failed\",\n          description: \"Server didn't return a valid token\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Creation Failed\",\n        description: error.message || \"Failed to create medical form\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateForm = async () => {\n    if (!formData.appointmentType) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select an appointment type.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const tokenData = {\n      token: crypto.randomUUID().replace(/-/g, ''),\n      userId,\n      patientName: formData.patientName,\n      appointmentType: formData.appointmentType,\n      expiresAt: new Date(Date.now() + formData.expiresIn * 60 * 60 * 1000).toISOString(),\n    };\n\n    createFormMutation.mutate(tokenData);\n  };\n\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(shareableLink);\n      toast({\n        title: \"Copied!\",\n        description: \"Medical form link copied to clipboard.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Failed to copy link to clipboard.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleClose = () => {\n    setFormData({\n      patientName,\n      appointmentType: \"\",\n      expiresIn: 24,\n    });\n    setCreatedToken(\"\");\n    setShareableLink(\"\");\n    onClose();\n  };\n\n  const appointmentTypes = [\n    { value: \"general_consultation\", label: \"General Consultation\" },\n    { value: \"specialist_visit\", label: \"Specialist Visit\" },\n    { value: \"annual_checkup\", label: \"Annual Checkup\" },\n    { value: \"follow_up\", label: \"Follow-up Appointment\" },\n    { value: \"diagnostic_test\", label: \"Diagnostic Test\" },\n    { value: \"vaccination\", label: \"Vaccination\" },\n    { value: \"mental_health\", label: \"Mental Health Consultation\" },\n    { value: \"emergency_visit\", label: \"Emergency Visit\" },\n  ];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-lg\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Stethoscope className=\"h-5 w-5\" />\n            <span>Create Medical Form</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {!createdToken ? (\n            <>\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                  <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                    Create a secure form that doctors can access with their Lace wallet to record your \n                    medical appointment data directly into your health vault.\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"patientName\">Patient Name</Label>\n                  <Input\n                    id=\"patientName\"\n                    value={formData.patientName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, patientName: e.target.value }))}\n                    placeholder=\"Patient name\"\n                    data-testid=\"input-patient-name\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"appointmentType\">Appointment Type *</Label>\n                  <Select \n                    value={formData.appointmentType} \n                    onValueChange={(value) => setFormData(prev => ({ ...prev, appointmentType: value }))}\n                  >\n                    <SelectTrigger data-testid=\"select-appointment-type\">\n                      <SelectValue placeholder=\"Select appointment type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {appointmentTypes.map((type) => (\n                        <SelectItem key={type.value} value={type.value}>\n                          {type.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"expiresIn\">Link Expiration</Label>\n                  <Select \n                    value={formData.expiresIn.toString()} \n                    onValueChange={(value) => setFormData(prev => ({ ...prev, expiresIn: parseInt(value) }))}\n                  >\n                    <SelectTrigger data-testid=\"select-expiration\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1\">1 hour</SelectItem>\n                      <SelectItem value=\"6\">6 hours</SelectItem>\n                      <SelectItem value=\"24\">24 hours (Recommended)</SelectItem>\n                      <SelectItem value=\"72\">3 days</SelectItem>\n                      <SelectItem value=\"168\">1 week</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-3\">\n                <Button variant=\"outline\" onClick={handleClose}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleCreateForm} \n                  disabled={createFormMutation.isPending}\n                  data-testid=\"button-create-form\"\n                >\n                  {createFormMutation.isPending ? \"Creating...\" : \"Create Form\"}\n                </Button>\n              </div>\n            </>\n          ) : (\n            <div className=\"space-y-4\">\n              <div className=\"text-center py-6\">\n                <CheckCircle className=\"h-16 w-16 mx-auto mb-4 text-green-500\" />\n                <h3 className=\"text-lg font-medium mb-2\">Medical Form Created!</h3>\n                <p className=\"text-muted-foreground\">\n                  Share this link with your doctor\n                </p>\n              </div>\n\n              <Card className=\"bg-gray-50 dark:bg-gray-900\">\n                <CardContent className=\"p-4\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm text-muted-foreground\">Appointment</span>\n                      </div>\n                      <span className=\"text-sm font-medium\">\n                        {appointmentTypes.find(t => t.value === formData.appointmentType)?.label}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm text-muted-foreground\">Expires in</span>\n                      </div>\n                      <span className=\"text-sm font-medium\">{formData.expiresIn} hours</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"space-y-2\">\n                <Label>Shareable Link</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <Input\n                    value={shareableLink}\n                    readOnly\n                    className=\"font-mono text-xs\"\n                    data-testid=\"shareable-link\"\n                  />\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={copyToClipboard}\n                    data-testid=\"button-copy-link\"\n                  >\n                    <Copy className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"p-3 bg-amber-50 dark:bg-amber-900/20 rounded-lg\">\n                <p className=\"text-sm text-amber-700 dark:text-amber-300 flex items-center\">\n                  <Share className=\"h-4 w-4 mr-2\" />\n                  The doctor will need their Lace wallet to authenticate and complete the form.\n                </p>\n              </div>\n\n              <div className=\"flex justify-end\">\n                <Button onClick={handleClose} data-testid=\"button-done\">\n                  Done\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10862},"client/src/pages/medical-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Wallet,\n  Stethoscope,\n  Shield,\n  Calendar,\n  User,\n  CheckCircle,\n  AlertCircle,\n  Clock,\n  FileText\n} from \"lucide-react\";\n\ninterface LaceAPI {\n  enable(): Promise<any>;\n  getNetworkId(): Promise<number>;\n  getUsedAddresses(): Promise<string[]>;\n  getUnusedAddresses(): Promise<string[]>;\n  signData(address: string, payload: string): Promise<{ signature: string; key: string }>;\n}\n\ninterface MedicalFormData {\n  diagnosis: string;\n  symptoms: string;\n  treatment: string;\n  medications: string;\n  followUpRequired: string;\n  notes: string;\n  vitalSigns: {\n    bloodPressure: string;\n    heartRate: string;\n    temperature: string;\n    weight: string;\n  };\n}\n\nexport default function MedicalForm() {\n  const [match, params] = useRoute(\"/medical-form/:token\");\n  const { toast } = useToast();\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [doctorAddress, setDoctorAddress] = useState<string>(\"\");\n  const [doctorName, setDoctorName] = useState<string>(\"\");\n  const [formCompleted, setFormCompleted] = useState(false);\n  const [formData, setFormData] = useState<MedicalFormData>({\n    diagnosis: \"\",\n    symptoms: \"\",\n    treatment: \"\",\n    medications: \"\",\n    followUpRequired: \"no\",\n    notes: \"\",\n    vitalSigns: {\n      bloodPressure: \"\",\n      heartRate: \"\",\n      temperature: \"\",\n      weight: \"\",\n    },\n  });\n\n  const { data: formToken, isLoading, error } = useQuery({\n    queryKey: [\"/api/medical-form\", params?.token],\n    queryFn: () => apiRequest(\"GET\", `/api/medical-form/${params?.token}`),\n    enabled: !!params?.token,\n  }) as { data: any; isLoading: boolean; error: any };\n\n  const submitFormMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", `/api/medical-form/${params?.token}/complete`, data);\n    },\n    onSuccess: () => {\n      setFormCompleted(true);\n      toast({\n        title: \"Form Submitted\",\n        description: \"Medical data has been securely saved to the patient's vault.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Submission Failed\",\n        description: error.message || \"Failed to submit medical form\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const connectWallet = async () => {\n    try {\n      if (!(window as any).cardano?.lace) {\n        throw new Error('Lace wallet not found. Please install the Lace extension.');\n      }\n\n      const laceApi: LaceAPI = await (window as any).cardano.lace.enable();\n      const usedAddresses = await laceApi.getUsedAddresses();\n      const unusedAddresses = await laceApi.getUnusedAddresses();\n      \n      // Try used addresses first, then unused addresses\n      const walletAddress = usedAddresses[0] || unusedAddresses[0];\n      \n      if (!walletAddress) {\n        throw new Error('No wallet addresses found. Make sure your Lace wallet has at least one address.');\n      }\n\n      setDoctorAddress(walletAddress);\n      setWalletConnected(true);\n      \n      toast({\n        title: \"Wallet Connected\",\n        description: \"Lace wallet connected successfully.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Connection Failed\",\n        description: error.message || \"Failed to connect to Lace wallet\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSubmitForm = async () => {\n    if (!walletConnected || !doctorName.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please connect your wallet and enter your name.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.diagnosis.trim() || !formData.symptoms.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in the required medical fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const submissionData = {\n      doctorWalletAddress: doctorAddress,\n      doctorName: doctorName.trim(),\n      formData,\n    };\n\n    submitFormMutation.mutate(submissionData);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p>Loading medical form...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"max-w-md\">\n          <CardContent className=\"p-6 text-center space-y-4\">\n            <AlertCircle className=\"h-16 w-16 mx-auto text-red-500\" />\n            <h2 className=\"text-xl font-semibold\">Form Not Available</h2>\n            <p className=\"text-muted-foreground\">\n              This medical form may have expired or been already completed.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (formCompleted) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"max-w-md\">\n          <CardContent className=\"p-6 text-center space-y-4\">\n            <CheckCircle className=\"h-16 w-16 mx-auto text-green-500\" />\n            <h2 className=\"text-xl font-semibold\">Form Completed</h2>\n            <p className=\"text-muted-foreground\">\n              Medical data has been securely saved to {formToken?.patientName}'s health vault.\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              The patient will have full control over this data and can generate \n              zero-knowledge proofs for verification when needed.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <Shield className=\"h-8 w-8 text-primary\" />\n            <h1 className=\"text-2xl font-bold\">IDShield Medical Form</h1>\n          </div>\n          <p className=\"text-muted-foreground\">\n            Secure medical data entry for {formToken?.patientName}\n          </p>\n        </div>\n\n        {/* Form Info Card */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-5 w-5\" />\n              <span>Appointment Details</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"flex items-center space-x-2\">\n                <User className=\"h-4 w-4 text-muted-foreground\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Patient</p>\n                  <p className=\"font-medium\">{formToken?.patientName}</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Stethoscope className=\"h-4 w-4 text-muted-foreground\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Type</p>\n                  <p className=\"font-medium\">\n                    {formToken?.appointmentType?.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Expires</p>\n                  <p className=\"font-medium\">\n                    {formToken?.expiresAt ? new Date(formToken.expiresAt).toLocaleDateString() : 'N/A'}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Wallet Connection */}\n        {!walletConnected ? (\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center space-y-4\">\n                <Wallet className=\"h-16 w-16 mx-auto text-primary\" />\n                <h3 className=\"text-lg font-medium\">Connect Your Lace Wallet</h3>\n                <p className=\"text-muted-foreground\">\n                  You need to authenticate with your Lace wallet to access this medical form.\n                </p>\n                <Button onClick={connectWallet} data-testid=\"button-connect-wallet\">\n                  <Wallet className=\"h-4 w-4 mr-2\" />\n                  Connect Lace Wallet\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <>\n            <Alert className=\"mb-6\">\n              <CheckCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Wallet connected successfully. You can now complete the medical form.\n              </AlertDescription>\n            </Alert>\n\n            {/* Doctor Information */}\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle>Doctor Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"doctorName\">Your Name *</Label>\n                  <Input\n                    id=\"doctorName\"\n                    value={doctorName}\n                    onChange={(e) => setDoctorName(e.target.value)}\n                    placeholder=\"Dr. Jane Smith\"\n                    data-testid=\"input-doctor-name\"\n                  />\n                </div>\n                <div>\n                  <Label>Wallet Address</Label>\n                  <Input\n                    value={doctorAddress}\n                    readOnly\n                    className=\"font-mono text-xs bg-muted\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Medical Form */}\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <FileText className=\"h-5 w-5\" />\n                  <span>Medical Information</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"diagnosis\">Primary Diagnosis *</Label>\n                    <Input\n                      id=\"diagnosis\"\n                      value={formData.diagnosis}\n                      onChange={(e) => setFormData(prev => ({ ...prev, diagnosis: e.target.value }))}\n                      placeholder=\"Enter primary diagnosis\"\n                      data-testid=\"input-diagnosis\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"followUp\">Follow-up Required</Label>\n                    <Select \n                      value={formData.followUpRequired} \n                      onValueChange={(value) => setFormData(prev => ({ ...prev, followUpRequired: value }))}\n                    >\n                      <SelectTrigger data-testid=\"select-follow-up\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"no\">No</SelectItem>\n                        <SelectItem value=\"yes\">Yes</SelectItem>\n                        <SelectItem value=\"urgent\">Urgent</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"symptoms\">Symptoms *</Label>\n                  <Textarea\n                    id=\"symptoms\"\n                    value={formData.symptoms}\n                    onChange={(e) => setFormData(prev => ({ ...prev, symptoms: e.target.value }))}\n                    placeholder=\"Describe symptoms presented by the patient\"\n                    className=\"min-h-[80px]\"\n                    data-testid=\"textarea-symptoms\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"treatment\">Treatment Provided</Label>\n                  <Textarea\n                    id=\"treatment\"\n                    value={formData.treatment}\n                    onChange={(e) => setFormData(prev => ({ ...prev, treatment: e.target.value }))}\n                    placeholder=\"Describe treatment provided\"\n                    className=\"min-h-[80px]\"\n                    data-testid=\"textarea-treatment\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"medications\">Medications Prescribed</Label>\n                  <Textarea\n                    id=\"medications\"\n                    value={formData.medications}\n                    onChange={(e) => setFormData(prev => ({ ...prev, medications: e.target.value }))}\n                    placeholder=\"List medications prescribed with dosage\"\n                    className=\"min-h-[60px]\"\n                    data-testid=\"textarea-medications\"\n                  />\n                </div>\n\n                {/* Vital Signs */}\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-medium mb-3\">Vital Signs (Optional)</h4>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <div>\n                      <Label htmlFor=\"bloodPressure\">Blood Pressure</Label>\n                      <Input\n                        id=\"bloodPressure\"\n                        value={formData.vitalSigns.bloodPressure}\n                        onChange={(e) => setFormData(prev => ({ \n                          ...prev, \n                          vitalSigns: { ...prev.vitalSigns, bloodPressure: e.target.value }\n                        }))}\n                        placeholder=\"120/80\"\n                        data-testid=\"input-blood-pressure\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"heartRate\">Heart Rate</Label>\n                      <Input\n                        id=\"heartRate\"\n                        value={formData.vitalSigns.heartRate}\n                        onChange={(e) => setFormData(prev => ({ \n                          ...prev, \n                          vitalSigns: { ...prev.vitalSigns, heartRate: e.target.value }\n                        }))}\n                        placeholder=\"72 bpm\"\n                        data-testid=\"input-heart-rate\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"temperature\">Temperature</Label>\n                      <Input\n                        id=\"temperature\"\n                        value={formData.vitalSigns.temperature}\n                        onChange={(e) => setFormData(prev => ({ \n                          ...prev, \n                          vitalSigns: { ...prev.vitalSigns, temperature: e.target.value }\n                        }))}\n                        placeholder=\"98.6°F\"\n                        data-testid=\"input-temperature\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"weight\">Weight</Label>\n                      <Input\n                        id=\"weight\"\n                        value={formData.vitalSigns.weight}\n                        onChange={(e) => setFormData(prev => ({ \n                          ...prev, \n                          vitalSigns: { ...prev.vitalSigns, weight: e.target.value }\n                        }))}\n                        placeholder=\"150 lbs\"\n                        data-testid=\"input-weight\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"notes\">Additional Notes</Label>\n                  <Textarea\n                    id=\"notes\"\n                    value={formData.notes}\n                    onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                    placeholder=\"Any additional observations or notes\"\n                    className=\"min-h-[80px]\"\n                    data-testid=\"textarea-notes\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Submit Button */}\n            <div className=\"flex justify-center\">\n              <Button \n                onClick={handleSubmitForm}\n                disabled={submitFormMutation.isPending}\n                size=\"lg\"\n                data-testid=\"button-submit-form\"\n              >\n                {submitFormMutation.isPending ? \"Submitting...\" : \"Submit Medical Form\"}\n              </Button>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":17679},"client/src/pages/verify-proof.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  CheckCircle, \n  Clock, \n  Shield, \n  User, \n  Calendar,\n  AlertTriangle,\n  Key,\n  Users,\n  Building,\n  Heart,\n  Car,\n  Lock\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface VerificationData {\n  valid: boolean;\n  proof?: {\n    id: string;\n    proofType: string;\n    proofResult: string;\n    createdAt: string;\n    attributes?: any;\n  };\n  error?: string;\n}\n\nexport default function VerifyProof() {\n  const params = useParams();\n  const proofId = params.id;\n\n  const { data: verification, isLoading } = useQuery<VerificationData>({\n    queryKey: [\"/api/verify-proof\", proofId],\n    queryFn: async () => {\n      const response = await fetch(`/api/verify-proof/${proofId}`);\n      if (!response.ok) {\n        throw new Error(\"Failed to verify proof\");\n      }\n      return response.json();\n    },\n    enabled: !!proofId,\n  });\n\n  const getProofIcon = (type: string) => {\n    switch (type) {\n      case \"age_verification\":\n        return <Users className=\"h-6 w-6\" />;\n      case \"income_verification\":\n        return <Building className=\"h-6 w-6\" />;\n      case \"identity_verification\":\n        return <Key className=\"h-6 w-6\" />;\n      case \"medical_verification\":\n        return <Heart className=\"h-6 w-6\" />;\n      case \"insurance_verification\":\n        return <Shield className=\"h-6 w-6\" />;\n      case \"police_verification\":\n        return <Car className=\"h-6 w-6\" />;\n      default:\n        return <Lock className=\"h-6 w-6\" />;\n    }\n  };\n\n  const getProofTypeLabel = (type: string) => {\n    switch (type) {\n      case \"age_verification\":\n        return \"Age Verification\";\n      case \"income_verification\":\n        return \"Income Verification\";\n      case \"identity_verification\":\n        return \"Identity Verification\";\n      case \"medical_verification\":\n        return \"Medical Verification\";\n      case \"insurance_verification\":\n        return \"Insurance Verification\";\n      case \"police_verification\":\n        return \"Police Verification\";\n      default:\n        return \"Unknown Proof\";\n    }\n  };\n\n  const getPrivacyLevelBadge = (type: string) => {\n    const levels = {\n      medical_verification: { level: 0, name: \"Absolute Confidential\" },\n      police_verification: { level: 1, name: \"Controlled Sensitive\" },\n      insurance_verification: { level: 2, name: \"Private Information\" },\n      income_verification: { level: 3, name: \"Internal Information\" },\n      identity_verification: { level: 4, name: \"Controlled Public\" },\n      age_verification: { level: 5, name: \"ZK Proof Access\" },\n    };\n    return levels[type as keyof typeof levels] || { level: 3, name: \"Internal Information\" };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-6\">\n        <Card className=\"w-full max-w-2xl\">\n          <CardContent className=\"p-8\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-muted rounded w-64 mx-auto\"></div>\n              <div className=\"h-4 bg-muted rounded w-48 mx-auto\"></div>\n              <div className=\"h-32 bg-muted rounded\"></div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!verification || !verification.valid) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-6\">\n        <Card className=\"w-full max-w-2xl\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"flex items-center justify-center space-x-2 text-destructive\">\n              <AlertTriangle className=\"h-6 w-6\" />\n              <span>Proof Verification Failed</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                {verification?.error || \"Invalid or expired proof. Please check the link and try again.\"}\n              </AlertDescription>\n            </Alert>\n            <div className=\"text-center\">\n              <Button onClick={() => window.history.back()}>Go Back</Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const proof = verification.proof!;\n  const privacyInfo = getPrivacyLevelBadge(proof.proofType);\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-6\">\n      <Card className=\"w-full max-w-2xl glow-card\" data-testid=\"card-proof-verification\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"flex items-center justify-center space-x-2 text-green-600\">\n            <CheckCircle className=\"h-6 w-6\" />\n            <span>Proof Verified Successfully</span>\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            This zero-knowledge proof has been cryptographically verified\n          </p>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {/* Proof Type */}\n          <div className=\"flex items-center justify-center space-x-4 p-6 bg-muted/50 rounded-lg\">\n            <div className={`w-16 h-16 rounded-full flex items-center justify-center ${\n              proof.proofType === \"medical_verification\" ? \"bg-red-100 dark:bg-red-900/20 text-red-600\" :\n              proof.proofType === \"police_verification\" ? \"bg-blue-100 dark:bg-blue-900/20 text-blue-600\" :\n              proof.proofType === \"insurance_verification\" ? \"bg-green-100 dark:bg-green-900/20 text-green-600\" :\n              \"bg-purple-100 dark:bg-purple-900/20 text-purple-600\"\n            }`}>\n              {getProofIcon(proof.proofType)}\n            </div>\n            <div>\n              <h3 className=\"text-xl font-semibold\" data-testid=\"proof-type\">\n                {getProofTypeLabel(proof.proofType)}\n              </h3>\n              <div className=\"flex items-center space-x-2 mt-1\">\n                <Badge variant=\"outline\" className=\"bg-green-100 text-green-600\">\n                  <CheckCircle className=\"h-3 w-3 mr-1\" />\n                  Verified\n                </Badge>\n                <Badge className=\"bg-purple-600 text-white\">\n                  <Shield className=\"h-3 w-3 mr-1\" />\n                  Level {privacyInfo.level} - {privacyInfo.name}\n                </Badge>\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Proof Result */}\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium flex items-center space-x-2\">\n              <Key className=\"h-4 w-4\" />\n              <span>Verification Result</span>\n            </h4>\n            <div className=\"bg-green-50 dark:bg-green-900/10 p-4 rounded-lg border border-green-200 dark:border-green-800\">\n              <p className=\"text-green-800 dark:text-green-200\" data-testid=\"proof-result\">\n                ✓ {proof.proofResult}\n              </p>\n            </div>\n          </div>\n\n          {/* Proof Details */}\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium flex items-center space-x-2\">\n              <User className=\"h-4 w-4\" />\n              <span>Proof Information</span>\n            </h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"text-muted-foreground\">Proof ID:</span>\n                <p className=\"font-mono text-xs break-all\" data-testid=\"proof-id\">{proof.id}</p>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground flex items-center space-x-1\">\n                  <Calendar className=\"h-3 w-3\" />\n                  <span>Generated:</span>\n                </span>\n                <p data-testid=\"proof-date\">\n                  {format(new Date(proof.createdAt), \"MMM dd, yyyy 'at' HH:mm\")}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Expiration Info */}\n          {proof.attributes?.expiresInDays && proof.attributes.expiresInDays > 0 && (\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium flex items-center space-x-2\">\n                <Clock className=\"h-4 w-4\" />\n                <span>Expiration</span>\n              </h4>\n              <Alert>\n                <Clock className=\"h-4 w-4\" />\n                <AlertDescription>\n                  This proof will expire {proof.attributes.expiresInDays} days after generation.\n                </AlertDescription>\n              </Alert>\n            </div>\n          )}\n\n          {/* Security Notice */}\n          <Alert>\n            <Shield className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Privacy Protected:</strong> This verification confirms the claim without revealing \n              any underlying personal data. The proof was generated using zero-knowledge cryptography.\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"text-center pt-4\">\n            <Button onClick={() => window.history.back()} data-testid=\"button-go-back\">\n              Go Back\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9542},"client/src/components/onboarding-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  User, \n  Mail, \n  Phone, \n  MapPin, \n  FileText, \n  Shield, \n  UserCheck,\n  Sparkles\n} from \"lucide-react\";\n\nconst onboardingSchema = z.object({\n  fullName: z.string().min(2, \"Name must be at least 2 characters\").max(50, \"Name too long\"),\n  email: z.string().email(\"Invalid email address\").optional().or(z.literal(\"\")),\n  phone: z.string().min(10, \"Phone must be at least 10 digits\").max(20, \"Phone too long\").optional().or(z.literal(\"\")),\n  location: z.string().max(100, \"Location too long\").optional().or(z.literal(\"\")),\n  bio: z.string().max(500, \"Bio too long\").optional().or(z.literal(\"\")),\n  userType: z.enum([\"citizen\", \"police\"]).default(\"citizen\"),\n});\n\ntype OnboardingFormData = z.infer<typeof onboardingSchema>;\n\ninterface OnboardingModalProps {\n  open: boolean;\n  onComplete: () => void;\n  user: any;\n}\n\nexport default function OnboardingModal({ open, onComplete, user }: OnboardingModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [currentStep, setCurrentStep] = useState(1);\n  const totalSteps = 3;\n\n  const form = useForm<OnboardingFormData>({\n    resolver: zodResolver(onboardingSchema),\n    defaultValues: {\n      fullName: user?.fullName || \"\",\n      email: user?.email || \"\",\n      phone: user?.phone || \"\",\n      location: user?.location || \"\",\n      bio: user?.bio || \"\",\n      userType: user?.userType || \"citizen\",\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: OnboardingFormData) => {\n      const response = await apiRequest(\"PATCH\", \"/api/profile\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Welcome to IDShield!\",\n        description: \"Your profile has been set up successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      onComplete();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Setup Failed\",\n        description: error.message || \"Failed to set up profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: OnboardingFormData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const nextStep = () => {\n    if (currentStep < totalSteps) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const renderStep = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center space-y-2\">\n              <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-purple-500 to-blue-600 rounded-full flex items-center justify-center\">\n                <Sparkles className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold\">Welcome to IDShield!</h3>\n              <p className=\"text-muted-foreground\">\n                Let's set up your secure digital identity profile to get started with privacy-first data management.\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              {/* Full Name */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fullName\" className=\"flex items-center space-x-2\">\n                  <User className=\"h-4 w-4\" />\n                  <span>Full Name *</span>\n                </Label>\n                <Input\n                  id=\"fullName\"\n                  {...form.register(\"fullName\")}\n                  placeholder=\"Enter your full name\"\n                  data-testid=\"onboarding-input-fullname\"\n                />\n                {form.formState.errors.fullName && (\n                  <p className=\"text-sm text-destructive\">\n                    {form.formState.errors.fullName.message}\n                  </p>\n                )}\n              </div>\n\n              {/* User Type */}\n              <div className=\"space-y-2\">\n                <Label className=\"flex items-center space-x-2\">\n                  <UserCheck className=\"h-4 w-4\" />\n                  <span>Account Type</span>\n                </Label>\n                <Select \n                  value={form.watch(\"userType\")} \n                  onValueChange={(value) => form.setValue(\"userType\", value as \"citizen\" | \"police\")}\n                >\n                  <SelectTrigger data-testid=\"onboarding-select-usertype\">\n                    <SelectValue placeholder=\"Select account type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"citizen\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Shield className=\"h-4 w-4 text-green-600\" />\n                        <span>Citizen</span>\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"police\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className=\"h-4 w-4 text-blue-600\" />\n                        <span>Law Enforcement</span>\n                      </div>\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n                <p className=\"text-xs text-muted-foreground\">\n                  {form.watch(\"userType\") === \"police\" \n                    ? \"Access to police verification features and enhanced security tools\" \n                    : \"Standard privacy and identity management features\"}\n                </p>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center space-y-2\">\n              <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-green-500 to-teal-600 rounded-full flex items-center justify-center\">\n                <Mail className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold\">Contact Information</h3>\n              <p className=\"text-muted-foreground\">\n                Add your contact details for secure communications and identity verification.\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              {/* Email */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"flex items-center space-x-2\">\n                  <Mail className=\"h-4 w-4\" />\n                  <span>Email Address</span>\n                </Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...form.register(\"email\")}\n                  placeholder=\"your@email.com\"\n                  data-testid=\"onboarding-input-email\"\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-destructive\">\n                    {form.formState.errors.email.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Phone */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\" className=\"flex items-center space-x-2\">\n                  <Phone className=\"h-4 w-4\" />\n                  <span>Phone Number</span>\n                </Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  {...form.register(\"phone\")}\n                  placeholder=\"+1 (555) 123-4567\"\n                  data-testid=\"onboarding-input-phone\"\n                />\n                {form.formState.errors.phone && (\n                  <p className=\"text-sm text-destructive\">\n                    {form.formState.errors.phone.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Location */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\" className=\"flex items-center space-x-2\">\n                  <MapPin className=\"h-4 w-4\" />\n                  <span>Location</span>\n                </Label>\n                <Input\n                  id=\"location\"\n                  {...form.register(\"location\")}\n                  placeholder=\"City, Country\"\n                  data-testid=\"onboarding-input-location\"\n                />\n                {form.formState.errors.location && (\n                  <p className=\"text-sm text-destructive\">\n                    {form.formState.errors.location.message}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center space-y-2\">\n              <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-orange-500 to-red-600 rounded-full flex items-center justify-center\">\n                <FileText className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold\">About You</h3>\n              <p className=\"text-muted-foreground\">\n                Tell us a bit about yourself to personalize your IDShield experience.\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              {/* Bio */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"bio\" className=\"flex items-center space-x-2\">\n                  <FileText className=\"h-4 w-4\" />\n                  <span>Bio (Optional)</span>\n                </Label>\n                <Textarea\n                  id=\"bio\"\n                  {...form.register(\"bio\")}\n                  placeholder=\"Tell us about yourself, your interests, or how you plan to use IDShield...\"\n                  rows={4}\n                  data-testid=\"onboarding-textarea-bio\"\n                />\n                <div className=\"flex justify-between text-xs text-muted-foreground\">\n                  <span>Optional but helps personalize your experience</span>\n                  <span>{form.watch(\"bio\")?.length || 0}/500</span>\n                </div>\n                {form.formState.errors.bio && (\n                  <p className=\"text-sm text-destructive\">\n                    {form.formState.errors.bio.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Privacy Notice */}\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <h4 className=\"font-medium flex items-center space-x-2 mb-2\">\n                  <Shield className=\"h-4 w-4 text-purple-600\" />\n                  <span>Your Privacy Matters</span>\n                </h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  All your information is encrypted and stored securely. You have full control \n                  over what data you share and with whom. You can update or delete your profile \n                  information at any time.\n                </p>\n              </div>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Dialog open={open}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader className=\"text-center\">\n          <DialogTitle className=\"text-2xl font-bold\">\n            Complete Your Setup\n          </DialogTitle>\n          <DialogDescription>\n            Step {currentStep} of {totalSteps}\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* Progress Bar */}\n        <div className=\"w-full bg-muted rounded-full h-2 mb-6\">\n          <div \n            className=\"bg-gradient-to-r from-purple-500 to-blue-600 h-2 rounded-full transition-all duration-300\"\n            style={{ width: `${(currentStep / totalSteps) * 100}%` }}\n          />\n        </div>\n\n        <form onSubmit={form.handleSubmit(handleSubmit)}>\n          {renderStep()}\n\n          {/* Navigation Buttons */}\n          <div className=\"flex justify-between pt-6\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={prevStep}\n              disabled={currentStep === 1}\n              data-testid=\"onboarding-button-previous\"\n            >\n              Previous\n            </Button>\n            \n            {currentStep < totalSteps ? (\n              <Button\n                type=\"button\"\n                onClick={nextStep}\n                disabled={!form.watch(\"fullName\") && currentStep === 1}\n                data-testid=\"onboarding-button-next\"\n              >\n                Next\n              </Button>\n            ) : (\n              <Button\n                type=\"submit\"\n                disabled={updateProfileMutation.isPending}\n                data-testid=\"onboarding-button-complete\"\n              >\n                {updateProfileMutation.isPending ? \"Setting up...\" : \"Complete Setup\"}\n              </Button>\n            )}\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13554},"client/src/components/tunnel-animation.tsx":{"content":"import { useEffect, useRef } from \"react\";\n\ninterface TunnelAnimationProps {\n  className?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n  speed?: \"slow\" | \"normal\" | \"fast\";\n}\n\nexport default function TunnelAnimation({ \n  className = \"\", \n  size = \"md\", \n  speed = \"normal\" \n}: TunnelAnimationProps) {\n  const tunnelRef = useRef<HTMLUListElement>(null);\n\n  const sizeClasses = {\n    sm: \"w-32 h-32\",\n    md: \"w-48 h-48\", \n    lg: \"w-64 h-64\"\n  };\n\n  const speeds = {\n    slow: \"20s\",\n    normal: \"10s\", \n    fast: \"6s\"\n  };\n\n  useEffect(() => {\n    if (tunnelRef.current) {\n      tunnelRef.current.style.setProperty('--animation-duration', speeds[speed]);\n    }\n  }, [speed]);\n\n  return (\n    <div className={`tunnel-scene ${className}`}>\n      <div className=\"tunnel-wrapper\">\n        <ul ref={tunnelRef} className={`tunnel ${sizeClasses[size]}`}>\n          {Array.from({ length: 72 }, (_, i) => (\n            <li key={i} className=\"tunnel-ring\" style={{ '--ring-index': i + 1 } as React.CSSProperties}></li>\n          ))}\n        </ul>\n      </div>\n\n      <style jsx>{`\n        @keyframes tunnel-spin {\n          to {\n            transform: rotateX(360deg);\n          }\n        }\n\n        .tunnel-scene {\n          width: 100%;\n          height: 100%;\n          perspective: 500px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .tunnel-wrapper {\n          width: 100%;\n          height: 100%;\n          transform-style: preserve-3d;\n          transform: rotateY(0deg) translateZ(150px);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .tunnel {\n          position: relative;\n          margin: 0 auto;\n          transform-style: preserve-3d;\n          animation: tunnel-spin var(--animation-duration, 10s) infinite linear;\n          list-style: none;\n          padding: 0;\n        }\n\n        .tunnel-ring {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          border: 3px dashed;\n          border-radius: 50%;\n          transform-origin: 50% 50%;\n          transform: translateY(-100px);\n        }\n\n        /* IDShield Brand Colors */\n        .tunnel-ring:nth-child(5n+1) { \n          border-color: hsl(220, 83%, 35%); /* Primary Blue */\n          transform: rotateX(calc(var(--ring-index) * 5deg)) translateY(-100px);\n        }\n        .tunnel-ring:nth-child(5n+2) { \n          border-color: hsl(142, 71%, 45%); /* Accent Green */\n          transform: rotateX(calc(var(--ring-index) * 5deg)) translateY(-100px);\n        }\n        .tunnel-ring:nth-child(5n+3) { \n          border-color: hsl(38, 92%, 50%); /* Warning Orange */\n          transform: rotateX(calc(var(--ring-index) * 5deg)) translateY(-100px);\n        }\n        .tunnel-ring:nth-child(5n+4) { \n          border-color: hsl(0, 84%, 60%); /* Destructive Red */\n          transform: rotateX(calc(var(--ring-index) * 5deg)) translateY(-100px);\n        }\n        .tunnel-ring:nth-child(5n+5) { \n          border-color: hsl(271, 91%, 65%); /* Purple */\n          transform: rotateX(calc(var(--ring-index) * 5deg)) translateY(-100px);\n        }\n\n        /* Additional ring positions for full 72 rings */\n        ${Array.from({ length: 72 }, (_, i) => `\n          .tunnel-ring:nth-child(${i + 1}) {\n            transform: rotateX(${(i + 1) * 5}deg) translateY(-100px);\n          }\n        `).join('')}\n\n        /* Dark mode adjustments */\n        @media (prefers-color-scheme: dark) {\n          .tunnel-ring:nth-child(5n+1) { \n            border-color: hsl(220, 83%, 55%); /* Lighter blue for dark mode */\n          }\n          .tunnel-ring:nth-child(5n+2) { \n            border-color: hsl(142, 71%, 65%); /* Lighter green for dark mode */\n          }\n        }\n      `}</style>\n    </div>\n  );\n}","size_bytes":3841}},"version":1}